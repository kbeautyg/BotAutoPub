from aiogram import Router, Bot
from aiogram import F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states import NewProject
import supabase_db
from __init__ import TEXTS

router = Router()

@router.message(Command(commands=["project", "projects"]))
async def cmd_project(message: Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    args = message.text.split(maxsplit=2)
    lang = "ru"
    user = supabase_db.db.get_user(user_id)
    if user:
        lang = user.get("language", "ru")
    
    # If no subcommand, list projects and provide inline switch/create
    if len(args) == 1:
        if not user:
            await message.answer(TEXTS[lang]['projects_not_found'])
            return
        projects = supabase_db.db.list_projects(user_id)
        if not projects:
            # –ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìÅ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="proj_new")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await message.answer(
                "üìÅ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            return
        
        lines = [TEXTS[lang]['projects_list_title']]
        current_proj = user.get("current_project")
        for proj in projects:
            name = proj.get("name", "Unnamed")
            if current_proj and proj["id"] == current_proj:
                lines.append(TEXTS[lang]['projects_item_current'].format(name=name))
            else:
                lines.append(TEXTS[lang]['projects_item'].format(name=name))
        
        # Build inline keyboard with each project and a New Project button
        buttons = []
        for proj in projects:
            name = proj.get("name", "Unnamed")
            buttons.append([InlineKeyboardButton(text=name + (" ‚úÖ" if current_proj and proj["id"] == current_proj else ""),
                                                callback_data=f"proj_switch:{proj['id']}")])
        buttons.append([InlineKeyboardButton(text="‚ûï " + ("–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç" if lang == "ru" else "New Project"),
                                            callback_data="proj_new")])
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer("\n".join(lines), reply_markup=kb)
        return

    sub = args[1].lower()
    if sub in ("new", "create"):
        # Create a new project with given name
        if len(args) < 3:
            # No name provided, start FSM
            await state.set_state(NewProject.name)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="proj_new_cancel")]
            ])
            await message.answer(
                "üìÅ **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            return
        
        proj_name = args[2].strip()
        if not proj_name:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º." if lang == "ru" else "Project name cannot be empty.")
            return
        project = supabase_db.db.create_project(user_id, proj_name)
        if not project:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç." if lang == "ru" else "Error: Failed to create project.")
            return
        # Set as current project
        supabase_db.db.update_user(user_id, {"current_project": project["id"]})
        await message.answer(TEXTS[lang]['projects_created'].format(name=proj_name))
    elif sub == "switch":
        if len(args) < 3:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/project switch <project_id>" if lang == "ru" else "Usage:\n/project switch <project_id>")
            return
        try:
            pid = int(args[2])
        except:
            await message.answer(TEXTS[lang]['projects_not_found'])
            return
        # Verify membership
        if not supabase_db.db.is_user_in_project(user_id, pid):
            await message.answer(TEXTS[lang]['projects_not_found'])
            return
        project = supabase_db.db.get_project(pid)
        if not project:
            await message.answer(TEXTS[lang]['projects_not_found'])
            return
        supabase_db.db.update_user(user_id, {"current_project": pid})
        await message.answer(TEXTS[lang]['projects_switched'].format(name=project.get("name", "")))
    elif sub == "invite":
        if len(args) < 3:
            await message.answer(TEXTS[lang]['projects_invite_usage'])
            return
        target = args[2].strip()
        try:
            invitee_id = int(target)
        except:
            invitee_id = None
        if not invitee_id:
            await message.answer(TEXTS[lang]['projects_invite_usage'])
            return
        # Ensure current project exists
        if not user or not user.get("current_project"):
            await message.answer(TEXTS[lang]['projects_not_found'])
            return
        proj_id = user["current_project"]
        # Check if invitee has started bot
        invitee_user = supabase_db.db.get_user(invitee_id)
        if not invitee_user:
            await message.answer(TEXTS[lang]['projects_invite_not_found'])
            return
        # Add user to project
        added = supabase_db.db.add_user_to_project(invitee_id, proj_id, role="admin")
        if not added:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ." if lang == "ru" else "User is already a member of the project.")
            return
        await message.answer(TEXTS[lang]['projects_invite_success'].format(user_id=invitee_id))
        # Notify invited user
        proj = supabase_db.db.get_project(proj_id)
        inviter_name = message.from_user.full_name or f"user {user_id}"
        invitee_lang = invitee_user.get("language", "ru")
        notify_text = TEXTS[invitee_lang]['projects_invited_notify'].format(project=proj.get("name", ""), user=inviter_name)
        # Include a button to switch immediately
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è" if invitee_lang == "ru" else "üîÑ Switch to project", callback_data=f"proj_switch:{proj_id}")]
        ])
        try:
            await bot.send_message(invitee_id, notify_text, reply_markup=kb)
        except Exception:
            # If bot can't send message (user hasn't started chat), ignore
            pass
    else:
        # Unknown subcommand
        await message.answer(TEXTS[lang]['projects_not_found'])

@router.callback_query(lambda c: c.data and c.data.startswith("proj_switch:"))
async def on_switch_project(callback: CallbackQuery):
    user_id = callback.from_user.id
    try:
        proj_id = int(callback.data.split(":", 1)[1])
    except:
        await callback.answer()
        return
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    if not supabase_db.db.is_user_in_project(user_id, proj_id):
        await callback.answer(TEXTS[lang]['projects_not_found'], show_alert=True)
        return
    project = supabase_db.db.get_project(proj_id)
    if not project:
        await callback.answer(TEXTS[lang]['projects_not_found'], show_alert=True)
        return
    # Update current project
    supabase_db.db.update_user(user_id, {"current_project": proj_id})
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–æ–≤
    try:
        projects = supabase_db.db.list_projects(user_id)
        text = "üìÅ **–í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:**\n\n"
        current_proj = proj_id  # –¢–æ–ª—å–∫–æ —á—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å
        
        buttons = []
        for proj in projects:
            name = proj.get("name", "Unnamed")
            is_current = proj["id"] == current_proj
            
            if is_current:
                text += f"‚Ä¢ **{name}** ‚úÖ (—Ç–µ–∫—É—â–∏–π)\n"
            else:
                text += f"‚Ä¢ {name}\n"
            
            button_text = f"{name}" + (" ‚úÖ" if is_current else "")
            buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"proj_switch:{proj['id']}"
            )])
        
        buttons.append([InlineKeyboardButton(text="‚ûï –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", callback_data="proj_new")])
        buttons.append([InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –ø—Ä–æ–µ–∫—Ç '{project.get('name', '')}'")
    except Exception as e:
        print(f"Error updating project menu: {e}")
        await callback.answer(TEXTS[lang]['projects_switched'].format(name=project.get("name", "")), show_alert=True)

@router.callback_query(F.data == "proj_new")
async def on_new_project(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    if not user:
        user = supabase_db.db.ensure_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    await state.set_state(NewProject.name)
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="proj_new_cancel")]
    ])
    
    await callback.message.edit_text(
        "üìÅ **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:\n\n"
        "üí° –ü—Ä–∏–º–µ—Ä—ã: \"–ú–æ–π –±–ª–æ–≥\", \"–ö–æ–º–ø–∞–Ω–∏—è ABC\", \"–õ–∏—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã\"",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "proj_new_cancel")
async def on_new_project_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–æ–≤
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    
    try:
        projects = supabase_db.db.list_projects(user_id)
        
        if not projects:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìÅ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="proj_new")],
                [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await callback.message.edit_text(
                "üìÅ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã
            text = "üìÅ **–í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:**\n\n"
            current_proj = user.get("current_project")
            
            buttons = []
            for proj in projects:
                name = proj.get("name", "Unnamed")
                is_current = current_proj and proj["id"] == current_proj
                
                if is_current:
                    text += f"‚Ä¢ **{name}** ‚úÖ (—Ç–µ–∫—É—â–∏–π)\n"
                else:
                    text += f"‚Ä¢ {name}\n"
                
                button_text = f"{name}" + (" ‚úÖ" if is_current else "")
                buttons.append([InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"proj_switch:{proj['id']}"
                )])
            
            buttons.append([InlineKeyboardButton(text="‚ûï –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", callback_data="proj_new")])
            buttons.append([InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    
    except Exception as e:
        print(f"Error in project cancel: {e}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await callback.message.edit_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=keyboard
        )
    
    await callback.answer("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")

@router.message(NewProject.name, F.text)
async def create_new_project_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    project_name = message.text.strip()
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
    if project_name.lower() in ['/cancel', '–æ—Ç–º–µ–Ω–∞', 'cancel']:
        await state.clear()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboard)
        return
    
    if not project_name:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
            parse_mode="Markdown"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è
    if len(project_name) > 50:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤).\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            parse_mode="Markdown"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    try:
        project = supabase_db.db.create_project(user_id, project_name)
        if not project:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            await state.clear()
            return
        
        # Set new project as current
        supabase_db.db.update_user(user_id, {"current_project": project["id"]})
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì∫ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="channels_add")],
            [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="menu_create_post")],
            [InlineKeyboardButton(text="üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏", callback_data="menu_projects")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await message.answer(
            f"‚úÖ **–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω!**\n\n"
            f"–ü—Ä–æ–µ–∫—Ç **'{project_name}'** —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n"
            f"**–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**\n"
            f"‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n"
            f"‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç\n"
            f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é\n\n"
            f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await state.clear()
        
    except Exception as e:
        print(f"Error creating project: {e}")
        await message.answer(
            "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞**\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="Markdown"
        )
        await state.clear()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏
@router.message(NewProject.name)
async def handle_non_text_project_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    await message.answer(
        "‚ùå **–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥**\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º.\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode="Markdown"
    )
