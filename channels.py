from aiogram import Router, types, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramAPIError  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ API
import supabase_db
from __init__ import TEXTS # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ TEXTS –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ –∫–ª—é—á–∏
import asyncio
import logging # –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å logging –≤–º–µ—Å—Ç–æ print –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')


router = Router()

# -------------------------------------------------------------
# –ü–æ–º–æ—â–Ω–∏–∫–∏ –¥–ª—è –º–µ–Ω—é
# -------------------------------------------------------------

def get_channels_main_menu(lang: str):
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ TEXTS —Å–æ–¥–µ—Ä–∂–∏—Ç —ç—Ç–∏ –∫–ª—é—á–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    texts_menu = TEXTS.get(lang, {}).get('channels_menu_buttons', {
        'add': "‚ûï –î–æ–±–∞–≤–∏—Ç—å",
        'remove': "üóë –£–¥–∞–ª–∏—Ç—å",
        'list': "üìã –°–ø–∏—Å–æ–∫",
        'main_menu': "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    })
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=texts_menu['add'], callback_data="channels_add")],
        [InlineKeyboardButton(text=texts_menu['remove'], callback_data="channels_remove")],
        [InlineKeyboardButton(text=texts_menu['list'], callback_data="channels_list")],
        [InlineKeyboardButton(text=texts_menu['main_menu'], callback_data="main_menu")],
    ])


def get_back_menu(lang: str = "ru"): # –î–æ–±–∞–≤–∏–º lang –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    text_back = TEXTS.get(lang, {}).get('general_buttons', {}).get('back', "üîô –ù–∞–∑–∞–¥")
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=text_back, callback_data="channels_menu")]
    ])


# -------------------------------------------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /channels
# -------------------------------------------------------------

@router.message(Command("channels"))
async def cmd_channels(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = supabase_db.db.ensure_user(user_id) # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª user –≤ user_data –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    lang = user_data.get("language", "ru") if user_data else "ru"

    args = message.text.split()[1:] if len(message.text.split()) > 1 else []

    if not args:
        await show_channels_menu(message, user_data, lang)
        return

    sub_command = args[0].lower()
    if sub_command == "add" and len(args) > 1:
        await add_channel_direct(message, user_data, lang, args[1])
    elif sub_command == "remove" and len(args) > 1:
        await remove_channel_direct(message, user_data, lang, args[1])
    elif sub_command == "list":
        await list_channels_direct(message, user_data, lang)
    else:
        await message.answer(TEXTS.get(lang, {}).get('channels_unknown_command', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è /channels"))


async def show_channels_menu(message: Message, user_data: dict, lang: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    text = TEXTS.get(lang, {}).get('channels_manage_title', "üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    keyboard = get_channels_main_menu(lang)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º message.reply –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–ª–∏ message.answer –µ—Å–ª–∏ –Ω–æ–≤–æ–µ
    # –î–ª—è –∫–æ–º–∞–Ω–¥—ã –æ–±—ã—á–Ω–æ message.answer
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")


# -------------------------------------------------------------
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ FSM) - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
# -------------------------------------------------------------

async def add_channel_direct(message: Message, user_data: dict, lang: str, identifier: str):
    """–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –Ω–∞–ø—Ä—è–º—É—é"""
    project_id = user_data.get("current_project")
    if not project_id:
        await message.answer(TEXTS.get(lang, {}).get('project_not_active', "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ /project"))
        return

    chat_info = None
    try:
        logger.info(f"Attempting to get chat info for identifier: {identifier}")
        if identifier.startswith("@"):
            chat_info = await message.bot.get_chat(identifier)
        else:
            try:
                chat_id_int = int(identifier)
                chat_info = await message.bot.get_chat(chat_id_int)
            except ValueError:
                await message.answer(TEXTS.get(lang, {}).get('channels_invalid_id_format', "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞. ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º."))
                return
        
        logger.info(f"Fetched chat: ID={chat_info.id}, Title='{chat_info.title}', Type={chat_info.type}, Username=@{chat_info.username}")

    except TelegramAPIError as e:
        logger.warning(f"TelegramAPIError getting chat '{identifier}': {e.description}")
        if "chat not found" in e.description.lower():
            await message.answer(
                TEXTS.get(lang, {}).get('channels_not_found_detailed', 
                f"‚ùå –ö–∞–Ω–∞–ª —Å ID/username '{identifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ID/username —É–∫–∞–∑–∞–Ω –≤–µ—Ä–Ω–æ –∏, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π, –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–µ–≥–æ.")
            )
        elif "bot was blocked by the user" in e.description.lower() and chat_info and chat_info.type == "private": # –ï—Å–ª–∏ —ç—Ç–æ –õ–° —Å –±–æ—Ç–æ–º
             pass # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –Ω–æ –º—ã –º–æ–∂–µ–º –ø—ã—Ç–∞—Ç—å—Å—è –¥–æ–±–∞–≤–∏—Ç—å "–∫–∞–Ω–∞–ª" (–õ–°)
        else:
            await message.answer(TEXTS.get(lang, {}).get('channels_get_info_error', "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ:") + f" {e.description}")
        return
    except Exception as e:
        logger.error(f"Unexpected error fetching chat '{identifier}': {e}", exc_info=True)
        await message.answer(TEXTS.get(lang, {}).get('channels_get_info_unexpected_error', "‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ."))
        return

    if not chat_info:
        # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ return –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ
        await message.answer(TEXTS.get(lang, {}).get('channels_get_info_failed', "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ."))
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ
    user_is_admin_in_channel = False
    try:
        # –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —á–∞—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª –≥–¥–µ –±–æ—Ç –∞–¥–º–∏–Ω.
        # –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —ç—Ç–æ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –±–µ–∑ —É—á–∞—Å—Ç–∏—è –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ.
        user_member = await message.bot.get_chat_member(chat_info.id, message.from_user.id)
        logger.info(f"User {message.from_user.id} status in chat {chat_info.id} ('{chat_info.title}'): {user_member.status}")
        if user_member.status in ['administrator', 'creator']:
            user_is_admin_in_channel = True
    except TelegramAPIError as e:
        logger.warning(f"TelegramAPIError checking user ({message.from_user.id}) admin status in chat {chat_info.id} ('{chat_info.title}'): {e.description}")
        # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫, –æ–Ω –º–æ–∂–µ—Ç –Ω–µ —Å–º–æ—á—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ –Ω–∏–∂–µ, –µ—Å–ª–∏ user_is_admin_in_channel –æ—Å—Ç–∞–Ω–µ—Ç—Å—è False.
        # –¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏: "user not found" (–µ—Å–ª–∏ —é–∑–µ—Ä –Ω–µ –≤ —á–∞—Ç–µ, –∏–ª–∏ –±–æ—Ç –Ω–µ –≤ —á–∞—Ç–µ –∏ –Ω–µ –≤–∏–¥–∏—Ç —é–∑–µ—Ä–∞),
        # "bot is not a member of the channel/supergroup"
        pass # user_is_admin_in_channel –æ—Å—Ç–∞–Ω–µ—Ç—Å—è False
    except Exception as e:
        logger.error(f"Exception checking user admin status for user {message.from_user.id} in chat {chat_info.id}: {e}", exc_info=True)
        pass # user_is_admin_in_channel –æ—Å—Ç–∞–Ω–µ—Ç—Å—è False

    if not user_is_admin_in_channel:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞
        channel_name_for_msg = f"'{chat_info.title}' (@{chat_info.username})" if chat_info.username else f"'{chat_info.title}'"
        error_text_key = 'channels_user_not_admin'
        default_error_text = (
            f"‚ùå **–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞**\n\n"
            f"–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ {channel_name_for_msg} –¥–ª—è –µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, "
            "–ª–∏–±–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            "1. –í—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∏–ª–∏ @username –∫–∞–Ω–∞–ª–∞.\n"
            "2. –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º) –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.\n"
            "3. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ (—ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–∏—Ö –ø—Ä–∞–≤)."
        )
        await message.answer(TEXTS.get(lang, {}).get(error_text_key, default_error_text), parse_mode="Markdown")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
    bot_is_verified_admin_in_channel = False
    bot_can_post = False # –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    bot_admin_check_details = ""
    try:
        bot_member_in_chat = await message.bot.get_chat_member(chat_info.id, message.bot.id)
        logger.info(f"Bot {message.bot.id} status in chat {chat_info.id} ('{chat_info.title}'): {bot_member_in_chat.status}")
        if bot_member_in_chat.status in ['administrator', 'creator']:
            bot_is_verified_admin_in_channel = True
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–∞–≤–æ –Ω–∞ –ø–æ—Å—Ç–∏–Ω–≥, –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            if hasattr(bot_member_in_chat, 'can_post_messages') and bot_member_in_chat.can_post_messages:
                bot_can_post = True
            elif bot_member_in_chat.status == 'creator': # –°–æ–∑–¥–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç –ø–æ—Å—Ç–∏—Ç—å
                 bot_can_post = True
            
            if not bot_can_post and bot_is_verified_admin_in_channel:
                 bot_admin_check_details = TEXTS.get(lang,{}).get('channels_bot_admin_no_post', "–ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
            elif bot_can_post:
                 bot_admin_check_details = TEXTS.get(lang,{}).get('channels_bot_admin_with_post', "–ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–∞–≤–æ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")

        else: # –ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
            bot_admin_check_details = TEXTS.get(lang,{}).get('channels_bot_not_admin', "–ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞, –Ω–æ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            
    except TelegramAPIError as e:
        logger.warning(f"TelegramAPIError checking bot ({message.bot.id}) admin status in chat {chat_info.id} ('{chat_info.title}'): {e.description}")
        if "user not found" in e.description.lower() or "bot is not a member" in e.description.lower():
            bot_admin_check_details = TEXTS.get(lang,{}).get('channels_bot_not_member', "–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
        else:
            bot_admin_check_details = TEXTS.get(lang,{}).get('channels_bot_check_tg_error', "–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –±–æ—Ç–∞:") + f" {e.description}."
    except Exception as e:
        logger.error(f"Exception checking bot admin status for bot {message.bot.id} in chat {chat_info.id}: {e}", exc_info=True)
        bot_admin_check_details = TEXTS.get(lang,{}).get('channels_bot_check_unknown_error', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –±–æ—Ç–∞.")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
    if not bot_is_verified_admin_in_channel or (bot_is_verified_admin_in_channel and not bot_can_post) :
        warning_text_key = 'channels_bot_warning_publish'
        default_warning_text = (
            f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** {bot_admin_check_details}\n"
            "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –º–æ–∂–Ω–æ, –Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ (–µ—Å–ª–∏ –æ–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è) –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.\n\n"
            "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ —Å –ø—Ä–∞–≤–æ–º '–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π'."
        )
        await message.answer(TEXTS.get(lang, {}).get(warning_text_key, default_warning_text), parse_mode="Markdown")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ chat_info.username —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ –ø–µ—Ä–µ–¥–∞–µ–º None –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        username_to_db = chat_info.username if hasattr(chat_info, 'username') else None
        
        channel_data = supabase_db.db.add_channel(
            user_id=message.from_user.id,
            chat_id=chat_info.id,
            name=chat_info.title or username_to_db or str(chat_info.id), # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            project_id=project_id,
            username=username_to_db,
            is_admin_verified=bot_is_verified_admin_in_channel and bot_can_post # –°–æ—Ö—Ä–∞–Ω—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –ø–æ—Å—Ç–∏—Ç—å
        )

        if channel_data:
            status_text = ""
            if bot_is_verified_admin_in_channel and bot_can_post:
                status_text = TEXTS.get(lang,{}).get('channels_add_status_bot_admin_can_post', "‚úÖ (–±–æ—Ç - –∞–¥–º–∏–Ω —Å –ø—Ä–∞–≤–æ–º –ø–æ—Å—Ç–∏–Ω–≥–∞)")
            elif bot_is_verified_admin_in_channel:
                status_text = TEXTS.get(lang,{}).get('channels_add_status_bot_admin_no_post', "‚ö†Ô∏è (–±–æ—Ç - –∞–¥–º–∏–Ω, –Ω–æ –Ω–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ—Å—Ç–∏—Ç—å)")
            else:
                status_text = TEXTS.get(lang,{}).get('channels_add_status_bot_not_admin', "‚ùì (–±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤)")

            channel_name_for_msg = f"'{channel_data['name']}'"
            success_text_key = 'channels_added_success'
            default_success_text = (
                f"‚úÖ **–ö–∞–Ω–∞–ª {channel_name_for_msg} –¥–æ–±–∞–≤–ª–µ–Ω** {status_text}\n\n"
                f"**ID:** `{channel_data['chat_id']}`"
            )
            await message.answer(TEXTS.get(lang, {}).get(success_text_key, default_success_text), parse_mode="Markdown")
        else:
            # –ü—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–µ—Ç –∫–∞–Ω–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?
            # –≠—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ supabase_db.db.add_channel (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏ –æ–Ω None –ø—Ä–∏ –¥—É–±–ª–∏–∫–∞—Ç–µ –∏–ª–∏ –æ—à–∏–±–∫—É)
            # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ add_channel –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å None/False, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª —É–∂–µ –µ—Å—Ç—å –∏ –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω
            existing_channel = supabase_db.db.get_channel_by_chat_id_and_project(chat_info.id, project_id) # –ù—É–∂–Ω–∞ —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            if existing_channel:
                 await message.answer(TEXTS.get(lang, {}).get('channels_already_exists', f"‚ÑπÔ∏è –ö–∞–Ω–∞–ª '{chat_info.title}' —É–∂–µ –±—ã–ª —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç."))
            else:
                 await message.answer(TEXTS.get(lang, {}).get('channels_add_db_error', "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))

    except Exception as e:
        logger.error(f"Database error adding channel {chat_info.id} ('{chat_info.title}'): {e}", exc_info=True)
        await message.answer(TEXTS.get(lang, {}).get('channels_add_db_exception', "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."))


# -------------------------------------------------------------
# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –Ω–∞–ø—Ä—è–º—É—é
# -------------------------------------------------------------

async def remove_channel_direct(message: Message, user_data: dict, lang: str, identifier: str):
    project_id = user_data.get("current_project")
    if not project_id: # –•–æ—Ç—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ–µ–∫—Ç –Ω–µ —Ç–∞–∫ –≤–∞–∂–µ–Ω, –∫–∞–∫ user_id –∏ channel_id
        # –Ω–æ –µ—Å–ª–∏ –ª–æ–≥–∏–∫–∞ —Ç–∞–∫–∞—è, —á—Ç–æ –∫–∞–Ω–∞–ª—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø—Ä–æ–µ–∫—Ç–∞–º —é–∑–µ—Ä–∞, —Ç–æ –æ–∫
        await message.answer(TEXTS.get(lang, {}).get('project_not_active', "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ /project"))
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_text = TEXTS.get(lang,{}).get('general_buttons',{}).get('yes', "‚úÖ –î–∞")
    cancel_text = TEXTS.get(lang,{}).get('general_buttons',{}).get('no', "‚ùå –ù–µ—Ç")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=confirm_text, callback_data=f"confirm_remove_channel_direct:{identifier}"), # –ò–∑–º–µ–Ω–∏–ª –∫–æ–ª–±–µ–∫ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
            InlineKeyboardButton(text=cancel_text, callback_data="cancel_remove_channel")
        ]
    ])
    question_text = TEXTS.get(lang, {}).get('channels_remove_confirm', "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª {}?").format(f"'{identifier}'")
    await message.answer(question_text, reply_markup=keyboard)


@router.callback_query(F.data.startswith("confirm_remove_channel_direct:"))
async def confirm_remove_channel_cb(callback: CallbackQuery): # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    identifier = callback.data.split(":", 1)[1]
    user_id = callback.from_user.id
    # –ù—É–∂–µ–Ω lang –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    user_data = supabase_db.db.ensure_user(user_id)
    lang = user_data.get("language", "ru") if user_data else "ru"

    # –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è project_id, –µ—Å–ª–∏ –æ–Ω —á–∞—Å—Ç—å –∫–ª—é—á–∞ –≤ –ë–î
    # –õ–∏–±–æ —É–¥–∞–ª—è–µ–º –ø–æ user_id –∏ chat_id/username
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, remove_channel –æ–∂–∏–¥–∞–µ—Ç user_id –∏ identifier (chat_id –∏–ª–∏ username)
    result = supabase_db.db.remove_channel(user_id, identifier) # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å identifier
    
    if result:
        await callback.message.edit_text(TEXTS.get(lang, {}).get('channels_removed_success', "üóë –ö–∞–Ω–∞–ª —É–¥–∞–ª—ë–Ω."))
    else:
        await callback.message.edit_text(TEXTS.get(lang, {}).get('channels_remove_not_found_or_error', "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏."))
    await callback.answer()


@router.callback_query(F.data == "cancel_remove_channel") # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
async def cancel_remove_channel_cb(callback: CallbackQuery):
    user_data = supabase_db.db.ensure_user(callback.from_user.id)
    lang = user_data.get("language", "ru") if user_data else "ru"
    await callback.message.edit_text(TEXTS.get(lang, {}).get('channels_remove_cancelled', "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."))
    await callback.answer()


# -------------------------------------------------------------
# –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
# -------------------------------------------------------------

async def list_channels_direct(message_or_callback_message: Message, user_data: dict, lang: str):
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ Message handler –∏–ª–∏ CallbackQuery handler
    # message_or_callback_message –º–æ–∂–µ—Ç –±—ã—Ç—å message –∏–ª–∏ callback.message
    user_id = user_data["id"] # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ ensure_user –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å 'id'
    channels = supabase_db.db.list_channels(user_id) # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ list_channels –æ–∂–∏–¥–∞–µ—Ç user_id

    if not channels:
        await message_or_callback_message.answer(TEXTS.get(lang, {}).get('channels_list_empty', "–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤."))
        return

    text_lines = [TEXTS.get(lang, {}).get('channels_list_title', "üìã **–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:**") + "\n"]
    for ch in channels:
        admin_marker = "‚úÖ" if ch.get("is_admin_verified") else "‚ùì" # is_admin_verified –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –±–æ—Ç—É
        channel_name = ch.get('name', 'Unknown Channel')
        chat_id_val = ch.get('chat_id', 'N/A')
        text_lines.append(f"{admin_marker} {channel_name} ‚Äî `{chat_id_val}`")

    final_text = "\n".join(text_lines)
    
    # –ï—Å–ª–∏ —ç—Ç–æ callback.message, —Ç–æ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å edit_text, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ–±–æ–ª—å—à–æ–π –∏ –Ω–µ –º–µ–Ω—è–µ—Ç —Å—É—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    # –ù–æ –¥–ª—è —Å–ø–∏—Å–∫–∞ —á–∞—Å—Ç–æ –ª—É—á—à–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –±—ã–ª–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –∫ —Å–ø–∏—Å–∫—É.
    # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ cb_channels_list –≤—ã–∑—ã–≤–∞–µ—Ç list_channels_direct —Å callback.message.
    # –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏...", —Ç–∞–∫ —á—Ç–æ edit_text –ø–æ–¥–æ–π–¥–µ—Ç.
    if isinstance(message_or_callback_message, types.Message) and message_or_callback_message.from_user.id == message_or_callback_message.chat.id :
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ callback) –∏–ª–∏ callback, –Ω–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ
        try: # –µ—Å–ª–∏ —ç—Ç–æ callback.message
            await message_or_callback_message.edit_text(final_text, parse_mode="Markdown", reply_markup=get_back_menu(lang))
        except TelegramAPIError: # –µ—Å–ª–∏ —ç—Ç–æ message, –∏–ª–∏ edit_text –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω
             await message_or_callback_message.answer(final_text, parse_mode="Markdown", reply_markup=get_back_menu(lang))
    else: # –î–ª—è –∫–æ–º–∞–Ω–¥—ã /channels list
         await message_or_callback_message.answer(final_text, parse_mode="Markdown")


# -------------------------------------------------------------
# –ö–æ–ª–ª–±–µ–∫–∏ –º–µ–Ω—é
# -------------------------------------------------------------

@router.callback_query(F.data == "channels_menu")
async def cb_channels_menu(callback: CallbackQuery, state: FSMContext): # –î–æ–±–∞–≤–∏–ª state –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è, —Ö–æ—Ç—è –æ–Ω —Ç—É—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    await state.clear() # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = supabase_db.db.ensure_user(callback.from_user.id)
    lang = user_data.get("language", "ru") if user_data else "ru"
    keyboard = get_channels_main_menu(lang)
    text = TEXTS.get(lang, {}).get('channels_manage_title', "üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    try:
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    except TelegramAPIError as e:
        logger.warning(f"Error editing message in cb_channels_menu: {e.description}. Sending new one.")
        await callback.message.answer(text, reply_markup=keyboard, parse_mode="Markdown") # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    await callback.answer()


@router.callback_query(F.data == "channels_add")
async def cb_channels_add(callback: CallbackQuery, state: FSMContext):
    user_data = supabase_db.db.ensure_user(callback.from_user.id)
    lang = user_data.get("language", "ru") if user_data else "ru"
    prompt_text = TEXTS.get(lang, {}).get('channels_add_prompt_id', "–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username –∫–∞–Ω–∞–ª–∞:")
    try:
        await callback.message.edit_text(prompt_text, reply_markup=get_back_menu(lang))
    except TelegramAPIError as e:
        logger.warning(f"Error editing message in cb_channels_add: {e.description}. Sending new one.")
        await callback.message.answer(prompt_text, reply_markup=get_back_menu(lang))
    await state.set_state("channels_add_waiting_id")
    await callback.answer()


@router.message(F.state == "channels_add_waiting_id") # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è FSMContext.filter_state
async def channels_add_receive_id(message: Message, state: FSMContext):
    identifier = message.text.strip()
    user_data = supabase_db.db.ensure_user(message.from_user.id)
    lang = user_data.get("language", "ru") if user_data else "ru"
    
    # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∏, —Ö–æ—Ä–æ—à–æ –±—ã –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –∫–∞–Ω–∞–ª–æ–≤ –∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await add_channel_direct(message, user_data, lang, identifier)
    await state.clear()
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–∞–Ω–∞–ª–æ–≤ —Å–Ω–æ–≤–∞
    # await show_channels_menu(message, user_data, lang)


@router.callback_query(F.data == "channels_remove")
async def cb_channels_remove(callback: CallbackQuery, state: FSMContext):
    user_data = supabase_db.db.ensure_user(callback.from_user.id)
    lang = user_data.get("language", "ru") if user_data else "ru"
    prompt_text = TEXTS.get(lang, {}).get('channels_remove_prompt_id', "–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    try:
        await callback.message.edit_text(prompt_text, reply_markup=get_back_menu(lang))
    except TelegramAPIError as e:
        logger.warning(f"Error editing message in cb_channels_remove: {e.description}. Sending new one.")
        await callback.message.answer(prompt_text, reply_markup=get_back_menu(lang))
    await state.set_state("channels_remove_waiting_id")
    await callback.answer()


@router.message(F.state == "channels_remove_waiting_id") # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
async def channels_remove_receive_id(message: Message, state: FSMContext):
    identifier = message.text.strip()
    user_data = supabase_db.db.ensure_user(message.from_user.id)
    lang = user_data.get("language", "ru") if user_data else "ru"
    
    await remove_channel_direct(message, user_data, lang, identifier) # remove_channel_direct –ø–æ–∫–∞–∂–µ—Ç —Å–≤–æ—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.clear()
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–∞–Ω–∞–ª–æ–≤ —Å–Ω–æ–≤–∞
    # await show_channels_menu(message, user_data, lang)


@router.callback_query(F.data == "channels_list")
async def cb_channels_list(callback: CallbackQuery, state: FSMContext): # –î–æ–±–∞–≤–∏–ª state
    await state.clear() # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    user_data = supabase_db.db.ensure_user(callback.from_user.id)
    lang = user_data.get("language", "ru") if user_data else "ru"
    await list_channels_direct(callback.message, user_data, lang) # callback.message –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.answer()

# –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–æ—É—Ç–µ—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ –±–æ—Ç–∞:
# dp.include_router(your_channels_router_filename.router)

# –¢–∞–∫–∂–µ, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à–∞ TEXTS —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ü—Ä–∏–º–µ—Ä:
# TEXTS = {
#     "ru": {
#         "channels_menu_buttons": {
#             "add": "‚ûï –î–æ–±–∞–≤–∏—Ç—å", ...
#         },
#         "general_buttons": {
#             "back": "üîô –ù–∞–∑–∞–¥", ...
#         },
#         "channels_manage_title": "üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
#         # ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –≤—Å–µ—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª—é—á–µ–π
#     },
#     "en": { ... }
# }
