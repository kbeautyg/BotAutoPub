import logging
import asyncio
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, filters, ContextTypes
)
from telegram.error import TelegramError

from config import Config
from database import db
from scheduler import init_scheduler, post_scheduler
from handlers import BotHandlers, CallbackHandlers, ChannelHandlers, PostHandlers
from utils import create_back_button, create_main_menu_keyboard
from conversation_handlers import (
    PostConversationHandlers, ChannelConversationHandlers, NavigationHandlers,
    WAITING_FOR_TEXT, WAITING_FOR_MEDIA, WAITING_FOR_BUTTONS, 
    WAITING_FOR_SCHEDULE, WAITING_FOR_CHANNEL_ID, WAITING_FOR_CHANNEL_TITLE,
    CONFIRM_POST, EDIT_POST
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        self.application = None
        self.scheduler = None
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            Config.validate()
            
            
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).build()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            self.scheduler, _ = init_scheduler(self.application.bot)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self._register_handlers()
            
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Railway")
            raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            raise
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
        post_conversation = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(PostHandlers.create_post_start, pattern="^create_post$"),
                CallbackQueryHandler(PostHandlers.select_channel_for_post, pattern="^select_channel_"),
                CommandHandler("post", PostHandlers.create_post_start)
            ],
            states={
                WAITING_FOR_TEXT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, PostConversationHandlers.handle_post_text),
                    CallbackQueryHandler(PostConversationHandlers.skip_text_callback, pattern="^skip_text$"),
                ],
                WAITING_FOR_MEDIA: [
                    MessageHandler(
                        (filters.PHOTO | filters.VIDEO | filters.DOCUMENT | 
                         filters.AUDIO | filters.VOICE | filters.ANIMATION) & ~filters.COMMAND,
                        PostConversationHandlers.handle_post_media
                    ),
                    CallbackQueryHandler(PostConversationHandlers.skip_media_callback, pattern="^skip_media$"),
                    CallbackQueryHandler(NavigationHandlers.back_to_text_callback, pattern="^back_to_text$"),
                ],
                WAITING_FOR_BUTTONS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, PostConversationHandlers.handle_post_buttons),
                    CallbackQueryHandler(PostConversationHandlers.skip_buttons_callback, pattern="^skip_buttons$"),
                    CallbackQueryHandler(NavigationHandlers.back_to_text_callback, pattern="^back_to_media$"),
                ],
                WAITING_FOR_SCHEDULE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, PostConversationHandlers.handle_schedule_time),
                    CallbackQueryHandler(PostConversationHandlers.publish_now_callback, pattern="^publish_now$"),
                    CallbackQueryHandler(PostConversationHandlers.schedule_post_callback, pattern="^schedule_post$"),
                ],
                CONFIRM_POST: [
                    CallbackQueryHandler(PostConversationHandlers.confirm_post_callback, pattern="^confirm_post$"),
                ]
            },
            fallbacks=[
                CallbackQueryHandler(NavigationHandlers.cancel_callback, pattern="^cancel$"),
                CommandHandler("cancel", BotHandlers.cancel_command)
            ]
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        channel_conversation = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(ChannelHandlers.add_channel_start, pattern="^add_channel$")
            ],
            states={
                WAITING_FOR_CHANNEL_ID: [
                    MessageHandler(
                        (filters.TEXT | filters.FORWARDED) & ~filters.COMMAND,
                        ChannelConversationHandlers.handle_channel_id
                    ),
                ]
            },
            fallbacks=[
                CallbackQueryHandler(NavigationHandlers.cancel_callback, pattern="^cancel$"),
                CommandHandler("cancel", BotHandlers.cancel_command)
            ]
        )
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", BotHandlers.start_command))
        self.application.add_handler(CommandHandler("help", BotHandlers.help_command))
        self.application.add_handler(CommandHandler("menu", BotHandlers.menu_command))
        self.application.add_handler(CommandHandler("cancel", BotHandlers.cancel_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥)
        self.application.add_handler(CommandHandler("channels", self._channels_command))
        self.application.add_handler(CommandHandler("scheduled", self._scheduled_posts_command))
        self.application.add_handler(CommandHandler("stats", self._stats_command))
        
        # Conversation handlers
        self.application.add_handler(post_conversation)
        self.application.add_handler(channel_conversation)
        
        # Callback handlers
        self.application.add_handler(CallbackQueryHandler(CallbackHandlers.main_menu_callback, pattern="^main_menu$"))
        self.application.add_handler(CallbackQueryHandler(CallbackHandlers.settings_callback, pattern="^settings$"))
        self.application.add_handler(CallbackQueryHandler(CallbackHandlers.change_timezone_callback, pattern="^(change_timezone|tz_.+)$"))
        self.application.add_handler(CallbackQueryHandler(CallbackHandlers.back_to_settings_callback, pattern="^back_to_settings$"))
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏
        self.application.add_handler(CallbackQueryHandler(ChannelHandlers.manage_channels_callback, pattern="^manage_channels$"))
        self.application.add_handler(CallbackQueryHandler(ChannelHandlers.list_channels_callback, pattern="^list_channels$"))
        
        # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
        self.application.add_handler(CallbackQueryHandler(self._scheduled_posts_callback, pattern="^scheduled_posts$"))
        self.application.add_handler(CallbackQueryHandler(self._view_scheduled_post, pattern="^view_post_"))
        self.application.add_handler(CallbackQueryHandler(self._delete_scheduled_post, pattern="^delete_post_"))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.application.add_handler(CallbackQueryHandler(self._stats_callback, pattern="^statistics$"))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.application.add_handler(CallbackQueryHandler(self._info_callback, pattern="^info$"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self._error_handler)
        
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def _channels_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
        await ChannelHandlers.manage_channels_callback(update, context)
    
    async def _scheduled_posts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        await self._scheduled_posts_callback(update, context)
    
    async def _scheduled_posts_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        if update.callback_query:
            query = update.callback_query
            await query.answer()
            user = query.from_user
        else:
            user = update.effective_user
        
        if not await db.is_admin(user.id):
            text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"
            keyboard = [[]]
        else:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
            scheduled_posts = await db.get_scheduled_posts()
            
            if not scheduled_posts:
                text = "üìã –û—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç"
                keyboard = [[]]
            else:
                text = f"üìã <b>–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã ({len(scheduled_posts)}):</b>\n\n"
                keyboard = []
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö
                channels = await db.get_channels()
                channel_dict = {ch['telegram_id']: ch for ch in channels}
                
                # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                db_user = await db.get_user(user.id)
                user_timezone = db_user.get('timezone', 'UTC') if db_user else 'UTC'
                
                for post in scheduled_posts[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                    channel = channel_dict.get(post['channel_id'])
                    channel_name = channel['title'] if channel else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª'
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                    from utils import DateTimeParser
                    from datetime import datetime
                    scheduled_time = datetime.fromisoformat(post['scheduled_time'].replace('Z', '+00:00'))
                    formatted_time = DateTimeParser.format_datetime(scheduled_time, user_timezone)
                    
                    # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
                    post_text = post.get('text_content', '')
                    if post_text:
                        preview = post_text[:50] + "..." if len(post_text) > 50 else post_text
                    else:
                        preview = f"[{post.get('media_type', '–º–µ–¥–∏–∞')}]" if post.get('media_type') else "[–ø—É—Å—Ç–æ–π –ø–æ—Å—Ç]"
                    
                    text += f"‚Ä¢ {channel_name}\n"
                    text += f"  {formatted_time}\n"
                    text += f"  {preview}\n\n"
                    
                    keyboard.append([
                        InlineKeyboardButton(f"üëÅÔ∏è {channel_name[:20]}", callback_data=f"view_post_{post['id']}")
                    ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        from telegram import InlineKeyboardMarkup
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')
    
    async def _view_scheduled_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        post_id = int(query.data.split('_')[2])
        user = query.from_user
        
        if not await db.is_admin(user.id):
            await query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–æ–≤",
                reply_markup=create_back_button("scheduled_posts")
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
        post = await db.get_post(post_id)
        if not post:
            await query.edit_message_text(
                "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=create_back_button("scheduled_posts")
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channels = await db.get_channels()
        channel = next((c for c in channels if c['telegram_id'] == post['channel_id']), None)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        text = f"üìã <b>–î–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞ #{post_id}</b>\n\n"
        text += f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel['title'] if channel else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}\n"
        
        # –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if post.get('scheduled_time'):
            from utils import DateTimeParser
            from datetime import datetime
            
            db_user = await db.get_user(user.id)
            user_timezone = db_user.get('timezone', 'UTC') if db_user else 'UTC'
            
            scheduled_time = datetime.fromisoformat(post['scheduled_time'].replace('Z', '+00:00'))
            formatted_time = DateTimeParser.format_datetime(scheduled_time, user_timezone)
            text += f"‚è∞ <b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {formatted_time}\n\n"
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç
        if post.get('text_content'):
            text += f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{post['text_content'][:500]}"
            if len(post['text_content']) > 500:
                text += "..."
            text += "\n\n"
        
        if post.get('media_type'):
            text += f"üìé <b>–ú–µ–¥–∏–∞:</b> {post['media_type']}\n"
            if post.get('media_caption'):
                text += f"üìù <b>–ü–æ–¥–ø–∏—Å—å:</b> {post['media_caption'][:200]}"
                if len(post['media_caption']) > 200:
                    text += "..."
                text += "\n"
            text += "\n"
        
        if post.get('reply_markup'):
            text += "üîò <b>–ö–Ω–æ–ø–∫–∏:</b> –î–∞\n\n"
        
        text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {post['status']}"
        
        keyboard = [
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_post_{post_id}")],
            [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data="scheduled_posts")]
        ]
        
        from telegram import InlineKeyboardMarkup
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
    async def _delete_scheduled_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        post_id = int(query.data.split('_')[2])
        user = query.from_user
        
        if not await db.is_admin(user.id):
            await query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤",
                reply_markup=create_back_button("scheduled_posts")
            )
            return
        
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç
        success = await db.delete_post(post_id)
        
        if success:
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await db.log_action(user.id, 'post_deleted', {'post_id': post_id})
            
            await query.edit_message_text(
                "‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                reply_markup=create_back_button("scheduled_posts")
            )
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞",
                reply_markup=create_back_button("scheduled_posts")
            )
    
    async def _stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        await self._stats_callback(update, context)
    
    async def _stats_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
        if update.callback_query:
            query = update.callback_query
            await query.answer()
            user = query.from_user
        else:
            user = update.effective_user
        
        if not await db.is_admin(user.id):
            text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        else:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                channels = await db.get_channels()
                all_posts = await db.get_scheduled_posts()
                
                # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                published_count = 0
                scheduled_count = 0
                failed_count = 0
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
                response = db.supabase.table('posts').select('status').execute()
                for post in response.data:
                    status = post.get('status', 'draft')
                    if status == 'published':
                        published_count += 1
                    elif status == 'scheduled':
                        scheduled_count += 1
                    elif status == 'failed':
                        failed_count += 1
                
                text = (
                    "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
                    f"üì∫ <b>–ö–∞–Ω–∞–ª–æ–≤:</b> {len(channels)}\n"
                    f"üìù <b>–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤:</b> {len(response.data)}\n"
                    f"‚úÖ <b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:</b> {published_count}\n"
                    f"‚è∞ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:</b> {scheduled_count}\n"
                    f"‚ùå <b>–û—à–∏–±–æ–∫:</b> {failed_count}\n\n"
                )
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
                if channels:
                    text += "<b>–ü–æ –∫–∞–Ω–∞–ª–∞–º:</b>\n"
                    for channel in channels[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                        # –°—á–∏—Ç–∞–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞
                        channel_posts = db.supabase.table('posts').select('id').eq('channel_id', channel['telegram_id']).execute()
                        text += f"‚Ä¢ {channel['title']}: {len(channel_posts.data)} –ø–æ—Å—Ç–æ–≤\n"
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        
        keyboard = create_back_button("main_menu")
        
        if update.callback_query:
            await query.edit_message_text(text, reply_markup=keyboard, parse_mode='HTML')
        else:
            await update.message.reply_text(text, reply_markup=keyboard, parse_mode='HTML')
    
    async def _info_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
        query = update.callback_query
        await query.answer()
        
        text = (
            "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>\n\n"
            "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –∫–∞–Ω–∞–ª–∞–º–∏\n"
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤\n"
            "‚è∞ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n\n"
            "üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.\n\n"
            "üîß –í–µ—Ä—Å–∏—è: 1.0.0"
        )
        
        await query.edit_message_text(
            text,
            reply_markup=create_back_button("main_menu"),
            parse_mode='HTML'
        )
    
    async def _error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception while handling an update: {context.error}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if isinstance(update, Update) and update.effective_user:
            try:
                await context.bot.send_message(
                    chat_id=update.effective_user.id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
            except Exception:
                pass
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            await self.initialize()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            if self.scheduler:
                self.scheduler.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            await self.application.run_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            if self.scheduler:
                self.scheduler.stop()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.scheduler:
            self.scheduler.stop()
        
        if self.application:
            await self.application.stop()
        
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = TelegramBot()
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.stop()

if __name__ == "__main__":
    asyncio.run(main())