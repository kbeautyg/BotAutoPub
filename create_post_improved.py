from aiogram import Router, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime
from zoneinfo import ZoneInfo
from states import PostCreationFlow
import supabase_db
from __init__ import TEXTS
import re
import json

router = Router()

# –°–±—Ä–æ—Å FSM –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ—Å—Ç–∞
@router.message(Command("create"))
async def cmd_create_post(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    await state.clear()  # –í–∞–∂–Ω—ã–π —Å–±—Ä–æ—Å!
    user_id = message.from_user.id
    user = supabase_db.db.ensure_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    project_id = user.get("current_project")
    if not project_id:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ /project")
        return
    channels = supabase_db.db.list_channels(project_id=project_id)
    if not channels:
        await message.answer(
            "‚ùå **–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤**\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ /channels",
            parse_mode="Markdown"
        )
        return
    await state.set_data({
        "user_id": user_id,
        "project_id": project_id,
        "text": None,
        "media_type": None,
        "media_file_id": None,
        "parse_mode": "HTML",
        "buttons": None,
        "publish_time": None,
        "repeat_interval": None,
        "channel_id": None,
        "draft": False,
        "step_history": []
    })
    await start_text_step(message, state, lang)

# ===========================
# –®–∞–≥ 1: –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
# ===========================
def get_navigation_keyboard(current_step: str, lang: str = "ru", can_skip: bool = True):
    buttons = []
    nav_row = []
    if current_step != "step_text":
        nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="post_nav_back"))
    if can_skip:
        nav_row.append(InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="post_nav_skip"))
    if nav_row:
        buttons.append(nav_row)
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="post_nav_cancel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def start_text_step(message: Message, state: FSMContext, lang: str):
    await state.set_state(PostCreationFlow.step_text)
    text = (
        "üìù **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ - –®–∞–≥ 1/7**\n\n"
        "**–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞**\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞\n"
        "‚Ä¢ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥, –µ—Å–ª–∏ –ø–æ—Å—Ç –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —Å –º–µ–¥–∏–∞\n\n"
        "üí° *–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ*"
    )
    keyboard = get_navigation_keyboard("step_text", lang, can_skip=True)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(PostCreationFlow.step_text, F.text)
async def handle_text_input(message: Message, state: FSMContext):
    user = supabase_db.db.get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    data = await state.get_data()
    data["text"] = message.text
    data["step_history"].append("step_text")
    await state.set_data(data)
    await start_media_step(message, state, lang)

# ===========================
# –®–∞–≥ 2: –ú–µ–¥–∏–∞
# ===========================
async def start_media_step(message: Message, state: FSMContext, lang: str):
    await state.set_state(PostCreationFlow.step_media)
    text = (
        "üñº **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ - –®–∞–≥ 2/7**\n\n"
        "**–î–æ–±–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –∫ –ø–æ—Å—Ç—É**\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å GIF/–∞–Ω–∏–º–∞—Ü–∏—é\n"
        "‚Ä¢ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥\n\n"
        "üí° *–ú–µ–¥–∏–∞ –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∫ —Ç–µ–∫—Å—Ç—É –ø–æ—Å—Ç–∞*"
    )
    keyboard = get_navigation_keyboard("step_media", lang, can_skip=True)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(PostCreationFlow.step_media, F.photo)
async def handle_photo_input(message: Message, state: FSMContext):
    user = supabase_db.db.get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    data = await state.get_data()
    data["media_type"] = "photo"
    data["media_file_id"] = message.photo[-1].file_id
    data["step_history"].append("step_media")
    await state.set_data(data)
    await start_format_step(message, state, lang)

@router.message(PostCreationFlow.step_media, F.video)
async def handle_video_input(message: Message, state: FSMContext):
    user = supabase_db.db.get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    data = await state.get_data()
    data["media_type"] = "video"
    data["media_file_id"] = message.video.file_id
    data["step_history"].append("step_media")
    await state.set_data(data)
    await start_format_step(message, state, lang)

@router.message(PostCreationFlow.step_media, F.animation)
async def handle_animation_input(message: Message, state: FSMContext):
    user = supabase_db.db.get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    data = await state.get_data()
    data["media_type"] = "animation"
    data["media_file_id"] = message.animation.file_id
    data["step_history"].append("step_media")
    await state.set_data(data)
    await start_format_step(message, state, lang)

# ===========================
# –®–∞–≥ 3: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# ===========================
def get_format_keyboard(lang: str = "ru"):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù HTML", callback_data="format_html")],
        [InlineKeyboardButton(text="üìã Markdown", callback_data="format_markdown")],
        [InlineKeyboardButton(text="üìÑ –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="format_none")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="post_nav_back")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="post_nav_cancel")]
    ])

async def start_format_step(message: Message, state: FSMContext, lang: str):
    await state.set_state(PostCreationFlow.step_format)
    text = (
        "üé® **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ - –®–∞–≥ 3/7**\n\n"
        "**–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞**\n\n"
        "‚Ä¢ **HTML** - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ <b>–∂–∏—Ä–Ω–æ–≥–æ</b>, <i>–∫—É—Ä—Å–∏–≤–∞</i>, <a href='#'>—Å—Å—ã–ª–æ–∫</a>\n"
        "‚Ä¢ **Markdown** - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ **–∂–∏—Ä–Ω–æ–≥–æ**, *–∫—É—Ä—Å–∏–≤–∞*, [—Å—Å—ã–ª–æ–∫](url)\n"
        "‚Ä¢ **–ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è** - –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç\n\n"
        "üí° *–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è HTML –¥–ª—è –±–æ–ª—å—à–µ–π –≥–∏–±–∫–æ—Å—Ç–∏*"
    )
    keyboard = get_format_keyboard(lang)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data.startswith("format_"))
async def handle_format_selection(callback: CallbackQuery, state: FSMContext):
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    format_map = {
        "format_html": "HTML",
        "format_markdown": "Markdown",
        "format_none": None
    }
    data = await state.get_data()
    data["parse_mode"] = format_map[callback.data]
    data["step_history"].append("step_format")
    await state.set_data(data)
    await callback.answer()
    await start_buttons_step(callback.message, state, lang)

# ===========================
# –®–∞–≥ 4: –ö–Ω–æ–ø–∫–∏
# ===========================
async def start_buttons_step(message: Message, state: FSMContext, lang: str):
    await state.set_state(PostCreationFlow.step_buttons)
    text = (
        "üîò **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ - –®–∞–≥ 4/7**\n\n"
        "**–î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –∫ –ø–æ—Å—Ç—É**\n\n"
        "–§–æ—Ä–º–∞—Ç: –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ\n"
        "`–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | https://example.com`\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "`–ù–∞—à —Å–∞–π—Ç | https://example.com`\n"
        "`Telegram | https://t.me/channel`\n\n"
        "–ò–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –Ω—É–∂–Ω—ã."
    )
    keyboard = get_navigation_keyboard("step_buttons", lang, can_skip=True)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(PostCreationFlow.step_buttons, F.text)
async def handle_buttons_input(message: Message, state: FSMContext):
    user = supabase_db.db.get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    try:
        buttons = []
        lines = message.text.strip().split('\n')
        for line in lines:
            if '|' in line:
                parts = line.split('|', 1)
                text = parts[0].strip()
                url = parts[1].strip()
                if text and url:
                    buttons.append({"text": text, "url": url})
        data = await state.get_data()
        data["buttons"] = buttons if buttons else None
        data["step_history"].append("step_buttons")
        await state.set_data(data)
        await start_time_step(message, state, lang)
    except Exception as e:
        await message.answer(
            "‚ùå **–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–Ω–æ–ø–æ–∫**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–¢–µ–∫—Å—Ç | URL`\n"
            "–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.",
            parse_mode="Markdown"
        )

# ===========================
# –®–∞–≥ 5: –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
# ===========================
def get_time_options_keyboard(lang: str = "ru"):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="time_now")],
        [InlineKeyboardButton(text="üìù –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫", callback_data="time_draft")],
        [InlineKeyboardButton(text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è", callback_data="time_schedule")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="post_nav_back")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="post_nav_cancel")]
    ])

async def start_time_step(message: Message, state: FSMContext, lang: str):
    await state.set_state(PostCreationFlow.step_time)
    text = (
        "‚è∞ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ - –®–∞–≥ 5/7**\n\n"
        "**–ö–æ–≥–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç?**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"
    )
    keyboard = get_time_options_keyboard(lang)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data == "time_now")
async def handle_time_now(callback: CallbackQuery, state: FSMContext):
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    data = await state.get_data()
    data["publish_time"] = datetime.now(ZoneInfo("UTC"))
    data["draft"] = False
    data["step_history"].append("step_time")
    await state.set_data(data)
    await callback.answer()
    await start_channel_step(callback.message, state, lang)

@router.callback_query(F.data == "time_draft")
async def handle_time_draft(callback: CallbackQuery, state: FSMContext):
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    data = await state.get_data()
    data["publish_time"] = None
    data["draft"] = True
    data["step_history"].append("step_time")
    await state.set_data(data)
    await callback.answer()
    await start_channel_step(callback.message, state, lang)

@router.callback_query(F.data == "time_schedule")
async def handle_time_schedule(callback: CallbackQuery, state: FSMContext):
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    date_fmt = user.get("date_format", "YYYY-MM-DD")
    time_fmt = user.get("time_format", "HH:MM")
    tz_name = user.get("timezone", "UTC")
    text = (
        f"üìÖ **–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏**\n\n"
        f"–§–æ—Ä–º–∞—Ç: `{date_fmt} {time_fmt}`\n"
        f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz_name}\n\n"
        f"–ü—Ä–∏–º–µ—Ä: `2024-12-25 15:30`"
    )
    keyboard = get_navigation_keyboard("step_time", lang, can_skip=False)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

def user_datetime_parse(user, raw):
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É/–≤—Ä–µ–º—è —Å—Ç—Ä–æ–≥–æ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
    date_fmt = user.get("date_format", "YYYY-MM-DD")
    time_fmt = user.get("time_format", "HH:MM")
    tz_name = user.get("timezone", "UTC")
    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç –∫ strptime
    fmt = date_fmt.replace("YYYY", "%Y").replace("MM", "%m").replace("DD", "%d")
    fmt_time = time_fmt.replace("HH", "%H").replace("MM", "%M")
    strptime_fmt = f"{fmt} {fmt_time}"
    dt = datetime.strptime(raw.strip(), strptime_fmt)
    tz = ZoneInfo(tz_name)
    local_dt = dt.replace(tzinfo=tz)
    utc_dt = local_dt.astimezone(ZoneInfo("UTC"))
    return utc_dt

@router.message(PostCreationFlow.step_time, F.text)
async def handle_scheduled_time_input(message: Message, state: FSMContext):
    user = supabase_db.db.get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    try:
        utc_dt = user_datetime_parse(user, message.text)
        if utc_dt <= datetime.now(ZoneInfo("UTC")):
            await message.answer(
                "‚ùå **–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.",
                parse_mode="Markdown"
            )
            return
        data = await state.get_data()
        data["publish_time"] = utc_dt
        data["draft"] = False
        data["step_history"].append("step_time")
        await state.set_data(data)
        await start_channel_step(message, state, lang)
    except Exception:
        date_fmt = user.get("date_format", "YYYY-MM-DD")
        time_fmt = user.get("time_format", "HH:MM")
        await message.answer(
            f"‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏**\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `{date_fmt} {time_fmt}`",
            parse_mode="Markdown"
        )

# ===========================
# –®–∞–≥ 6: –ö–∞–Ω–∞–ª
# ===========================
def get_channels_keyboard(channels: list, lang: str = "ru"):
    buttons = []
    for i, channel in enumerate(channels):
        admin_status = "‚úÖ" if channel.get('is_admin_verified') else "‚ùì"
        text = f"{admin_status} {channel['name']}"
        buttons.append([InlineKeyboardButton(
            text=text,
            callback_data=f"channel_select:{channel['id']}"
        )])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="post_nav_back")])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="post_nav_cancel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def start_channel_step(message: Message, state: FSMContext, lang: str):
    await state.set_state(PostCreationFlow.step_channel)
    data = await state.get_data()
    project_id = data["project_id"]
    channels = supabase_db.db.list_channels(project_id=project_id)
    text = (
        "üì∫ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ - –®–∞–≥ 6/7**\n\n"
        "**–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏**\n\n"
        "‚úÖ - –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
        "‚ùì - –°—Ç–∞—Ç—É—Å –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω\n\n"
        "‚ö†Ô∏è *–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞*"
    )
    keyboard = get_channels_keyboard(channels, lang)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data.startswith("channel_select:"))
async def handle_channel_selection(callback: CallbackQuery, state: FSMContext):
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    channel_id = int(callback.data.split(":", 1)[1])
    data = await state.get_data()
    data["channel_id"] = channel_id
    data["step_history"].append("step_channel")
    await state.set_data(data)
    await callback.answer()
    await start_preview_step(callback.message, state, lang)

# ===========================
# –®–∞–≥ 7: –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
# ===========================
def get_preview_keyboard(lang: str = "ru"):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="post_confirm")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="post_edit_menu")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="post_nav_cancel")]
    ])

async def start_preview_step(message: Message, state: FSMContext, lang: str):
    await state.set_state(PostCreationFlow.step_preview)
    data = await state.get_data()
    channel = supabase_db.db.get_channel(data["channel_id"])
    preview_text = "üëÄ **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞**\n\n"
    preview_text += f"**–ö–∞–Ω–∞–ª:** {channel['name']}\n"
    if data.get("publish_time"):
        preview_text += f"**–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:** {data['publish_time'].strftime('%Y-%m-%d %H:%M UTC')}\n"
    elif data.get("draft"):
        preview_text += "**–°—Ç–∞—Ç—É—Å:** –ß–µ—Ä–Ω–æ–≤–∏–∫\n"
    else:
        preview_text += "**–°—Ç–∞—Ç—É—Å:** –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å\n"
    if data.get("parse_mode"):
        preview_text += f"**–§–æ—Ä–º–∞—Ç:** {data['parse_mode']}\n"
    preview_text += "\n" + "‚îÄ" * 30 + "\n\n"
    if data.get("text"):
        preview_text += data["text"]
    else:
        preview_text += "*[–ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞]*"
    if data.get("media_type"):
        preview_text += f"\n\nüìé *–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ: {data['media_type']}*"
    if data.get("buttons"):
        preview_text += f"\n\nüîò *–ö–Ω–æ–ø–æ–∫: {len(data['buttons'])}*"
    keyboard = get_preview_keyboard(lang)
    # -- –≤–æ—Ç —Ç—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞, –µ—Å–ª–∏ –µ—Å—Ç—å!
    media_type = data.get("media_type")
    media_file_id = data.get("media_file_id")
    if media_type and media_file_id:
        if media_type == "photo":
            await message.answer_photo(media_file_id, caption=preview_text, reply_markup=keyboard, parse_mode="Markdown")
        elif media_type == "video":
            await message.answer_video(media_file_id, caption=preview_text, reply_markup=keyboard, parse_mode="Markdown")
        elif media_type == "animation":
            await message.answer_animation(media_file_id, caption=preview_text, reply_markup=keyboard, parse_mode="Markdown")
        else:
            await message.answer(preview_text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message.answer(preview_text, reply_markup=keyboard, parse_mode="Markdown")

# ===========================
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# ===========================
@router.callback_query(F.data == "post_confirm")
async def handle_post_confirmation(callback: CallbackQuery, state: FSMContext):
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    data = await state.get_data()
    post_data = {
        "user_id": data["user_id"],
        "project_id": data["project_id"],
        "channel_id": data["channel_id"],
        "text": data.get("text"),
        "media_type": data.get("media_type"),
        "media_file_id": data.get("media_file_id"),
        "parse_mode": data.get("parse_mode"),
        "buttons": data.get("buttons"),
        "publish_time": data.get("publish_time"),
        "repeat_interval": data.get("repeat_interval"),
        "draft": data.get("draft", False),
        "published": False
    }
    post = supabase_db.db.add_post(post_data)
    # INSTANT PUBLISH: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç)
    if post and not data.get("draft") and not data.get("publish_time"):
        channel = supabase_db.db.get_channel(post["channel_id"])
        chat_id = channel["chat_id"]
        parse_mode = data.get("parse_mode")
        markup = None
        if data.get("buttons"):
            kb = [[InlineKeyboardButton(text=b["text"], url=b["url"])] for b in data["buttons"]]
            markup = InlineKeyboardMarkup(inline_keyboard=kb)
        try:
            if data.get("media_type") == "photo" and data.get("media_file_id"):
                await callback.bot.send_photo(chat_id, data["media_file_id"], caption=data.get("text") or "", reply_markup=markup, parse_mode=parse_mode)
            elif data.get("media_type") == "video" and data.get("media_file_id"):
                await callback.bot.send_video(chat_id, data["media_file_id"], caption=data.get("text") or "", reply_markup=markup, parse_mode=parse_mode)
            elif data.get("media_type") == "animation" and data.get("media_file_id"):
                await callback.bot.send_animation(chat_id, data["media_file_id"], caption=data.get("text") or "", reply_markup=markup, parse_mode=parse_mode)
            else:
                await callback.bot.send_message(chat_id, data.get("text") or "", reply_markup=markup, parse_mode=parse_mode)
            status_text = "üöÄ **–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!**"
        except Exception as e:
            status_text = f"‚ùå **–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:** {e}"
        await callback.message.edit_text(
            f"{status_text}\n\n"
            f"**ID –ø–æ—Å—Ç–∞:** #{post['id']}\n"
            f"–ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ! ‚úÖ",
            parse_mode="Markdown"
        )
    elif post:
        if data.get("draft"):
            status_text = "üìù **–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω**"
        elif data.get("publish_time"):
            status_text = "‚è∞ **–ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω**"
        else:
            status_text = "üöÄ **–ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω**"
        await callback.message.edit_text(
            f"{status_text}\n\n"
            f"**ID –ø–æ—Å—Ç–∞:** #{post['id']}\n"
            f"–ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ! ‚úÖ",
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞**\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="Markdown"
        )
    await state.clear()
    await callback.answer()

# –ù–∞–≤–∏–≥–∞—Ü–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞ ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–≤–æ–∏
# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@router.callback_query(F.data == "post_nav_back")
async def handle_nav_back(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É"""
    data = await state.get_data()
    history = data.get("step_history", [])
    
    if not history:
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥!")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    history.pop()
    data["step_history"] = history
    await state.set_data(data)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
    if not history:
        current_step = "step_text"
    else:
        current_step = history[-1]
    
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
    step_functions = {
        "step_text": start_text_step,
        "step_media": start_media_step,
        "step_format": start_format_step,
        "step_buttons": start_buttons_step,
        "step_time": start_time_step,
        "step_channel": start_channel_step,
        "step_preview": start_preview_step
    }
    
    if current_step in step_functions:
        await step_functions[current_step](callback.message, state, lang)
    
    await callback.answer()

@router.callback_query(F.data == "post_nav_skip")
async def handle_nav_skip(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥"""
    current_state = await state.get_state()
    data = await state.get_data()
    
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    if current_state == PostCreationFlow.step_text:
        data["step_history"].append("step_text")
        await state.set_data(data)
        await start_media_step(callback.message, state, lang)
    elif current_state == PostCreationFlow.step_media:
        data["step_history"].append("step_media")
        await state.set_data(data)
        await start_format_step(callback.message, state, lang)
    elif current_state == PostCreationFlow.step_buttons:
        data["step_history"].append("step_buttons")
        await state.set_data(data)
        await start_time_step(callback.message, state, lang)
    
    await callback.answer()

@router.callback_query(F.data == "post_nav_cancel")
async def handle_nav_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n"
        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.",
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "post_edit_menu")
async def handle_edit_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    text = (
        "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞**\n\n"
        "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
    )
    
    keyboard = get_edit_menu_keyboard()
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "post_preview")
async def handle_back_to_preview(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É"""
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    await start_preview_step(callback.message, state, lang)
    await callback.answer()
