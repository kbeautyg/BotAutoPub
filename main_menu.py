from aiogram import Router, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import supabase_db

router = Router()

def get_main_menu_keyboard(lang: str = "ru"):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    if lang == "ru":
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="menu_create_post"),
                InlineKeyboardButton(text="üìã –ú–æ–∏ –ø–æ—Å—Ç—ã", callback_data="menu_posts")
            ],
            [
                InlineKeyboardButton(text="üì∫ –ö–∞–Ω–∞–ª—ã", callback_data="menu_channels"),
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")
            ],
            [
                InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help")
            ]
        ])
    else:
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìù Create Post", callback_data="menu_create_post"),
                InlineKeyboardButton(text="üìã My Posts", callback_data="menu_posts")
            ],
            [
                InlineKeyboardButton(text="üì∫ Channels", callback_data="menu_channels"),
                InlineKeyboardButton(text="‚öôÔ∏è Settings", callback_data="menu_settings")
            ],
            [
                InlineKeyboardButton(text="‚ùì Help", callback_data="menu_help")
            ]
        ])

def get_welcome_text(user: dict, lang: str = "ru") -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
    if lang == "ru":
        text = "ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏!**\n\n"
        text += "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:\n"
        text += "‚Ä¢ üìù –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã\n"
        text += "‚Ä¢ üì∫ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–Ω–∞–ª–∞–º–∏ Telegram\n"
        text += "‚Ä¢ ‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç\n"
        text += "‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        
        # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if user:
            try:
                channels = supabase_db.db.get_user_channels(user['user_id'])
                posts = supabase_db.db.list_posts(user_id=user['user_id'], only_pending=True)
                text += f"üì∫ –í–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(channels) if channels else 0} | ‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {len(posts) if posts else 0}\n\n"
            except Exception as e:
                print(f"Error getting stats for user: {e}")
                text += "\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    else:
        text = "ü§ñ **Welcome to the Channel Management Bot!**\n\n"
        text += "This bot will help you:\n"
        text += "‚Ä¢ üìù Create and schedule posts\n"
        text += "‚Ä¢ üì∫ Manage Telegram channels\n"
        text += "‚Ä¢ ‚è∞ Automatically publish content\n"
        text += "‚Ä¢ üìä Track statistics\n\n"
        
        # Quick stats
        if user:
            try:
                channels = supabase_db.db.get_user_channels(user['user_id'])
                posts = supabase_db.db.list_posts(user_id=user['user_id'], only_pending=True)
                text += f"üì∫ Your channels: {len(channels) if channels else 0} | ‚è∞ Scheduled posts: {len(posts) if posts else 0}\n\n"
            except Exception as e:
                print(f"Error getting stats for user: {e}")
                text += "\n"
        
        text += "Choose an action from the menu below:"
    
    return text

@router.message(Command("menu"))
async def cmd_main_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = message.from_user.id
    try:
        user = supabase_db.db.ensure_user(user_id)
        lang = user.get("language", "ru") if user else "ru"
        
        text = get_welcome_text(user, lang)
        keyboard = get_main_menu_keyboard(lang)
        
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    except Exception as e:
        print(f"Error in cmd_main_menu: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "main_menu")
async def callback_main_menu(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = callback.from_user.id
    try:
        user = supabase_db.db.get_user(user_id)
        if not user:
            user = supabase_db.db.ensure_user(user_id)
        lang = user.get("language", "ru") if user else "ru"
        
        text = get_welcome_text(user, lang)
        keyboard = get_main_menu_keyboard(lang)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
    except Exception as e:
        print(f"Error in callback_main_menu: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "menu_create_post")
async def callback_create_post(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –Ω–∞–ø—Ä—è–º—É—é"""
    user_id = callback.from_user.id
    user = supabase_db.db.ensure_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    channels = supabase_db.db.get_user_channels(user_id)
    if not channels:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì∫ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="channels_add")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await callback.message.edit_text(
            "‚ùå **–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤**\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤.",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        await callback.answer()
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è
    await state.set_data({
        "user_id": user_id,
        "text": None,
        "media_type": None,
        "media_file_id": None,
        "parse_mode": "HTML",
        "buttons": None,
        "publish_time": None,
        "repeat_interval": None,
        "channel_id": None,
        "draft": False,
        "step_history": [],
        "current_step": "step_text"
    })
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
    try:
        from scheduled_posts import start_text_step
        from states import PostCreationFlow
        await state.set_state(PostCreationFlow.step_text)
        await start_text_step(callback.message, state, lang)
        await callback.answer()
    except ImportError:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/create`",
            parse_mode="Markdown"
        )
        await callback.answer()

@router.callback_query(F.data == "menu_posts")
async def callback_posts_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –ø–æ—Å—Ç–æ–≤"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ list_posts
        from list_posts import callback_posts_menu as posts_menu_handler
        await posts_menu_handler(callback)
    except Exception as e:
        print(f"Error in callback_posts_menu: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "menu_channels")
async def callback_channels_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        # –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ –º–µ–Ω—é –∫–∞–Ω–∞–ª–æ–≤
        user_id = callback.from_user.id
        user = supabase_db.db.get_user(user_id)
        lang = user.get("language", "ru") if user else "ru"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–Ω–∞–ª–æ–≤
        from channels import get_channels_main_menu
        text = "üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        keyboard = get_channels_main_menu(lang)
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
    except Exception as e:
        print(f"Error in callback_channels_menu: {e}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            "üì∫ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/channels` –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏.\n\n"
            "**–ö–æ–º–∞–Ω–¥—ã:**\n"
            "‚Ä¢ `/channels` - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤\n"
            "‚Ä¢ `/channels add` - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n"
            "‚Ä¢ `/channels remove <ID>` - —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()

@router.callback_query(F.data == "menu_settings")
async def callback_settings_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ settings_improved
        user_id = callback.from_user.id
        user = supabase_db.db.get_user(user_id)
        if not user:
            user = supabase_db.db.ensure_user(user_id)
        lang = user.get("language", "ru") if user else "ru"
        
        # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        from settings_improved import format_user_settings, get_settings_main_menu
        text = format_user_settings(user)
        keyboard = get_settings_main_menu(lang)
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
    except Exception as e:
        print(f"Error in callback_settings_menu: {e}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/settings` –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.\n\n"
            "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
            "‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å\n"
            "‚Ä¢ –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()

@router.callback_query(F.data == "menu_help")
async def callback_help_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –ø–æ–º–æ—â–∏"""
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        
        help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ `/menu` - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏:**
‚Ä¢ `/create` - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç (–ø–æ—à–∞–≥–æ–≤–æ)
‚Ä¢ `/quickpost <–∫–∞–Ω–∞–ª> <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>` - –±—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
‚Ä¢ `/list` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
‚Ä¢ `/view <ID>` - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
‚Ä¢ `/edit <ID>` - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç
‚Ä¢ `/delete <ID>` - —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç
‚Ä¢ `/publish <ID>` - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏:**
‚Ä¢ `/channels` - –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏
‚Ä¢ `/channels add <@–∫–∞–Ω–∞–ª –∏–ª–∏ ID>` - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
‚Ä¢ `/channels list` - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤

**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ `/settings` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è

üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!
"""
        
        await callback.message.edit_text(
            help_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        print(f"Error in callback_help_menu: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –ö–æ–º–∞–Ω–¥—ã –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
@router.message(Command("quick"))
async def cmd_quick_actions(message: Message, state: FSMContext):
    """–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
    try:
        user_id = message.from_user.id
        user = supabase_db.db.ensure_user(user_id)
        lang = user.get("language", "ru") if user else "ru"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ë—ã—Å—Ç—Ä—ã–π –ø–æ—Å—Ç", callback_data="quick_post")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="quick_stats")],
            [InlineKeyboardButton(text="‚è∞ –ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ—Å—Ç—ã", callback_data="quick_upcoming")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        text = "‚ö° **–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    except Exception as e:
        print(f"Error in cmd_quick_actions: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "quick_post")
async def callback_quick_post(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    try:
        await callback.message.answer(
            "üöÄ **–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/quickpost` –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:\n\n"
            "**–§–æ—Ä–º–∞—Ç:** `/quickpost <–∫–∞–Ω–∞–ª> <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>`\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ `/quickpost @channel now –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞`\n"
            "‚Ä¢ `/quickpost 1 draft –ß–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ—Å—Ç–∞`\n"
            "‚Ä¢ `/quickpost 2 2024-12-25_15:30 –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç`\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/create` –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –ø–æ—Å—Ç–æ–º.",
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        print(f"Error in callback_quick_post: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "quick_stats")
async def callback_quick_stats(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    try:
        user_id = callback.from_user.id
        user = supabase_db.db.get_user(user_id)
        if not user:
            user = supabase_db.db.ensure_user(user_id)
        
        try:
            channels = supabase_db.db.get_user_channels(user_id) or []
            all_posts = supabase_db.db.list_posts(user_id=user_id, only_pending=False) or []
            scheduled = [p for p in all_posts if not p.get('published') and not p.get('draft') and p.get('publish_time')]
            drafts = [p for p in all_posts if p.get('draft')]
            published = [p for p in all_posts if p.get('published')]
            
            text = (
                f"üìä **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
                f"üì∫ –ö–∞–Ω–∞–ª–æ–≤: {len(channels)}\n"
                f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(scheduled)}\n"
                f"üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: {len(drafts)}\n"
                f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: {len(published)}\n"
            )
        except Exception as e:
            print(f"Error getting stats: {e}")
            text = "üìä **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="menu_posts")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
    except Exception as e:
        print(f"Error in callback_quick_stats: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "quick_upcoming")
async def callback_quick_upcoming(callback: CallbackQuery):
    """–ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ—Å—Ç—ã"""
    try:
        user_id = callback.from_user.id
        user = supabase_db.db.get_user(user_id)
        if not user:
            user = supabase_db.db.ensure_user(user_id)
        
        try:
            posts = supabase_db.db.get_scheduled_posts_by_channel(user_id) or []
            
            if not posts:
                text = "‚è∞ **–ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ—Å—Ç—ã**\n\n‚ùå –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."
            else:
                text = "‚è∞ **–ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ—Å—Ç—ã**\n\n"
                for i, post in enumerate(posts[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    try:
                        from datetime import datetime
                        from zoneinfo import ZoneInfo
                        
                        if post.get('publish_time'):
                            utc_time = datetime.fromisoformat(post['publish_time'].replace('Z', '+00:00'))
                            if user.get('timezone'):
                                user_tz = ZoneInfo(user['timezone'])
                                local_time = utc_time.astimezone(user_tz)
                                time_str = local_time.strftime('%m-%d %H:%M')
                            else:
                                time_str = utc_time.strftime('%m-%d %H:%M')
                            
                            channel_name = "–ö–∞–Ω–∞–ª"
                            if post.get('channels') and isinstance(post['channels'], dict):
                                channel_name = post['channels'].get('name', '–ö–∞–Ω–∞–ª')
                            
                            post_text = post.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')[:25]
                            text += f"{i}. **{time_str}** - {channel_name}\n   {post_text}...\n\n"
                        else:
                            text += f"{i}. –ü–æ—Å—Ç #{post.get('id', '?')}\n\n"
                    except Exception as e:
                        print(f"Error formatting post {post}: {e}")
                        text += f"{i}. –ü–æ—Å—Ç #{post.get('id', '?')}\n\n"
        except Exception as e:
            print(f"Error getting upcoming posts: {e}")
            text = "‚è∞ **–ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ—Å—Ç—ã**\n\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –í—Å–µ –ø–æ—Å—Ç—ã", callback_data="posts_scheduled")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
    except Exception as e:
        print(f"Error in callback_quick_upcoming: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
