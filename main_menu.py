from aiogram import Router, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states import PostCreationFlow
import supabase_db

router = Router()

def get_main_menu_keyboard(lang: str = "ru"):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    if lang == "ru":
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="menu_create_post"),
                InlineKeyboardButton(text="üìã –ú–æ–∏ –ø–æ—Å—Ç—ã", callback_data="menu_posts")
            ],
            [
                InlineKeyboardButton(text="üì∫ –ö–∞–Ω–∞–ª—ã", callback_data="menu_channels"),
                InlineKeyboardButton(text="üìÅ –ü—Ä–æ–µ–∫—Ç—ã", callback_data="menu_projects")
            ],
            [
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings"),
                InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help")
            ]
        ])
    else:
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìù Create Post", callback_data="menu_create_post"),
                InlineKeyboardButton(text="üìã My Posts", callback_data="menu_posts")
            ],
            [
                InlineKeyboardButton(text="üì∫ Channels", callback_data="menu_channels"),
                InlineKeyboardButton(text="üìÅ Projects", callback_data="menu_projects")
            ],
            [
                InlineKeyboardButton(text="‚öôÔ∏è Settings", callback_data="menu_settings"),
                InlineKeyboardButton(text="‚ùì Help", callback_data="menu_help")
            ]
        ])

def get_welcome_text(user: dict, lang: str = "ru") -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
    if lang == "ru":
        text = "ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏!**\n\n"
        text += "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:\n"
        text += "‚Ä¢ üìù –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã\n"
        text += "‚Ä¢ üì∫ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–Ω–∞–ª–∞–º–∏ Telegram\n"
        text += "‚Ä¢ ‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç\n"
        text += "‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        
        if user.get('current_project'):
            project = supabase_db.db.get_project(user['current_project'])
            if project:
                text += f"üìÅ **–¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç:** {project['name']}\n"
        
        # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if user.get('current_project'):
            channels = supabase_db.db.list_channels(project_id=user['current_project'])
            posts = supabase_db.db.list_posts(project_id=user['current_project'], only_pending=True)
            text += f"üì∫ –ö–∞–Ω–∞–ª–æ–≤: {len(channels)} | ‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {len(posts)}\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    else:
        text = "ü§ñ **Welcome to the Channel Management Bot!**\n\n"
        text += "This bot will help you:\n"
        text += "‚Ä¢ üìù Create and schedule posts\n"
        text += "‚Ä¢ üì∫ Manage Telegram channels\n"
        text += "‚Ä¢ ‚è∞ Automatically publish content\n"
        text += "‚Ä¢ üìä Track statistics\n\n"
        
        if user.get('current_project'):
            project = supabase_db.db.get_project(user['current_project'])
            if project:
                text += f"üìÅ **Current project:** {project['name']}\n"
        
        # Quick stats
        if user.get('current_project'):
            channels = supabase_db.db.list_channels(project_id=user['current_project'])
            posts = supabase_db.db.list_posts(project_id=user['current_project'], only_pending=True)
            text += f"üì∫ Channels: {len(channels)} | ‚è∞ Scheduled posts: {len(posts)}\n\n"
        
        text += "Choose an action from the menu below:"
    
    return text

@router.message(Command("menu"))
async def cmd_main_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = message.from_user.id
    user = supabase_db.db.ensure_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    text = get_welcome_text(user, lang)
    keyboard = get_main_menu_keyboard(lang)
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data == "main_menu")
async def callback_main_menu(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    text = get_welcome_text(user, lang)
    keyboard = get_main_menu_keyboard(lang)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "menu_create_post")
async def callback_create_post(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç - –ø—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è"""
    user_id = callback.from_user.id
    user = supabase_db.db.ensure_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    project_id = user.get("current_project")
    if not project_id:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÅ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="proj_new")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            "‚ùå **–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞**\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–º–∏.",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–Ω–∞–ª–æ–≤
    channels = supabase_db.db.list_channels(project_id=project_id)
    if not channels:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì∫ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="channels_add")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            "‚ùå **–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤**\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤.",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        await callback.answer()
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
    await state.set_data({
        "user_id": user_id,
        "project_id": project_id,
        "text": None,
        "media_type": None,
        "media_file_id": None,
        "parse_mode": "HTML",
        "buttons": None,
        "publish_time": None,
        "repeat_interval": None,
        "channel_id": None,
        "draft": False,
        "step_history": [],
        "current_step": "step_text"
    })
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
    await state.set_state(PostCreationFlow.step_text)
    
    text = (
        "üìù **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ - –®–∞–≥ 1/7**\n\n"
        "**–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞**\n\n"
        "–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ `skip` –∏–ª–∏ `–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å` - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥\n"
        "‚Ä¢ `cancel` –∏–ª–∏ `–æ—Ç–º–µ–Ω–∞` - –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ\n\n"
        "üí° *–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ*"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="post_nav_skip")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="post_nav_cancel")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "menu_posts")
async def callback_posts_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –ø–æ—Å—Ç–æ–≤"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ list_posts_fixed
    from list_posts_fixed import callback_posts_menu as posts_menu_handler
    await posts_menu_handler(callback)

@router.callback_query(F.data == "menu_channels")
async def callback_channels_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –∫–∞–Ω–∞–ª–æ–≤"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–Ω–∞–ª–æ–≤
    text = "üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data="channels_list")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="channels_add")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="channels_remove")],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞", callback_data="channels_check_admin")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "menu_projects")
async def callback_projects_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    if not user:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await callback.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞**\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    projects = supabase_db.db.list_projects(user_id)
    if not projects:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="proj_new")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            "üìÅ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏**\n\n"
            "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    text = "üìÅ **–í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:**\n\n"
    current_proj = user.get("current_project")
    
    buttons = []
    for proj in projects:
        name = proj.get("name", "Unnamed")
        if current_proj and proj["id"] == current_proj:
            text += f"‚Ä¢ {name} ‚úÖ\n"
            buttons.append([InlineKeyboardButton(
                text=f"‚úÖ {name} (–∞–∫—Ç–∏–≤–Ω—ã–π)",
                callback_data=f"proj_switch:{proj['id']}"
            )])
        else:
            text += f"‚Ä¢ {name}\n"
            buttons.append([InlineKeyboardButton(
                text=name,
                callback_data=f"proj_switch:{proj['id']}"
            )])
    
    buttons.append([InlineKeyboardButton(text="‚ûï –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", callback_data="proj_new")])
    buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "menu_settings")
async def callback_settings_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = callback.from_user.id
    user = supabase_db.db.ensure_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ settings_improved
    from settings_improved import show_settings_menu
    await show_settings_menu(callback.message, user, lang)
    await callback.answer()

@router.callback_query(F.data == "menu_help")
async def callback_help_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –ø–æ–º–æ—â–∏"""
    help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ `/menu` - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏:**
‚Ä¢ `/create` - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç (–ø–æ—à–∞–≥–æ–≤–æ)
‚Ä¢ `/quickpost <–∫–∞–Ω–∞–ª> <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>` - –±—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
‚Ä¢ `/list` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
‚Ä¢ `/view <ID>` - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
‚Ä¢ `/edit <ID>` - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç
‚Ä¢ `/delete <ID>` - —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏:**
‚Ä¢ `/channels` - –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏
‚Ä¢ `/channels add <@–∫–∞–Ω–∞–ª –∏–ª–∏ ID>` - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
‚Ä¢ `/channels list` - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤

**–ü—Ä–æ–µ–∫—Ç—ã:**
‚Ä¢ `/project` - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏

**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ `/settings` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è

**–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞:
‚Ä¢ `skip` –∏–ª–∏ `–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å` - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥
‚Ä¢ `back` –∏–ª–∏ `–Ω–∞–∑–∞–¥` - –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
‚Ä¢ `cancel` –∏–ª–∏ `–æ—Ç–º–µ–Ω–∞` - –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
‚Ä¢ `now` –∏–ª–∏ `—Å–µ–π—á–∞—Å` - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å
‚Ä¢ `draft` –∏–ª–∏ `—á–µ—Ä–Ω–æ–≤–∏–∫` - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫

üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(help_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

# –ö–æ–º–∞–Ω–¥—ã –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
@router.message(Command("quick"))
async def cmd_quick_actions(message: Message, state: FSMContext):
    """–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
    user_id = message.from_user.id
    user = supabase_db.db.ensure_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ë—ã—Å—Ç—Ä—ã–π –ø–æ—Å—Ç", callback_data="quick_post")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="quick_stats")],
        [InlineKeyboardButton(text="‚è∞ –ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ—Å—Ç—ã", callback_data="quick_upcoming")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    text = "‚ö° **–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data == "quick_post")
async def callback_quick_post(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="menu_create_post")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        "üöÄ **–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞**\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞\n"
        "–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É `/quickpost <–∫–∞–Ω–∞–ª> <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>`\n\n"
        "–ü—Ä–∏–º–µ—Ä: `/quickpost 1 now –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!`",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data == "quick_stats")
async def callback_quick_stats(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    project_id = user.get("current_project")
    
    if not project_id:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÅ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="proj_new")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            "‚ùå **–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞**\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        await callback.answer()
        return
    
    channels = supabase_db.db.list_channels(project_id=project_id)
    all_posts = supabase_db.db.list_posts(project_id=project_id, only_pending=False)
    scheduled = [p for p in all_posts if not p.get('published') and not p.get('draft') and p.get('publish_time')]
    drafts = [p for p in all_posts if p.get('draft')]
    published = [p for p in all_posts if p.get('published')]
    
    text = (
        f"üìä **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        f"üì∫ –ö–∞–Ω–∞–ª–æ–≤: {len(channels)}\n"
        f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(scheduled)}\n"
        f"üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: {len(drafts)}\n"
        f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: {len(published)}\n"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="menu_posts")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "quick_upcoming")
async def callback_quick_upcoming(callback: CallbackQuery):
    """–ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ—Å—Ç—ã"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    project_id = user.get("current_project")
    
    if not project_id:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÅ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="proj_new")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            "‚ùå **–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞**\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–æ–≤.",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        await callback.answer()
        return
    
    posts = supabase_db.db.get_scheduled_posts_by_channel(project_id)
    
    if not posts:
        text = "‚è∞ **–ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ—Å—Ç—ã**\n\n‚ùå –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="menu_create_post")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    else:
        text = "‚è∞ **–ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ—Å—Ç—ã**\n\n"
        for i, post in enumerate(posts[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            try:
                from datetime import datetime
                from zoneinfo import ZoneInfo
                
                utc_time = datetime.fromisoformat(post['publish_time'].replace('Z', '+00:00'))
                if user.get('timezone'):
                    user_tz = ZoneInfo(user['timezone'])
                    local_time = utc_time.astimezone(user_tz)
                    time_str = local_time.strftime('%m-%d %H:%M')
                else:
                    time_str = utc_time.strftime('%m-%d %H:%M')
                
                channel_name = post.get('channels', {}).get('name', '–ö–∞–Ω–∞–ª')
                post_text = post.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')[:25]
                text += f"{i}. **{time_str}** - {channel_name}\n   {post_text}...\n\n"
            except:
                text += f"{i}. –ü–æ—Å—Ç #{post['id']}\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –í—Å–µ –ø–æ—Å—Ç—ã", callback_data="posts_scheduled")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()
