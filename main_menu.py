from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import supabase_db
from __init__ import TEXTS

router = Router()

def get_main_menu_keyboard(lang: str = "ru") -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="menu_create_post"),
            InlineKeyboardButton(text="üìã –ú–æ–∏ –ø–æ—Å—Ç—ã", callback_data="posts_menu")
        ],
        [
            InlineKeyboardButton(text="üì∫ –ö–∞–Ω–∞–ª—ã", callback_data="menu_channels"),
            InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="menu_scheduled")
        ],
        [
            InlineKeyboardButton(text="üìÅ –ü—Ä–æ–µ–∫—Ç—ã", callback_data="menu_projects"),
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")
        ],
        [
            InlineKeyboardButton(text="üìñ –ü–æ–º–æ—â—å", callback_data="menu_help")
        ]
    ])

@router.message(Command("menu"))
async def cmd_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = message.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    project_id = user.get("current_project") if user else None
    
    if not project_id:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÅ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="menu_projects")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")],
            [InlineKeyboardButton(text="üìñ –ü–æ–º–æ—â—å", callback_data="menu_help")]
        ])
        
        await message.answer(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
            "‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    else:
        keyboard = get_main_menu_keyboard(lang)
        
        await message.answer(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

@router.callback_query(F.data == "main_menu")
async def callback_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    project_id = user.get("current_project") if user else None
    
    if not project_id:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÅ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="menu_projects")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")],
            [InlineKeyboardButton(text="üìñ –ü–æ–º–æ—â—å", callback_data="menu_help")]
        ])
        
        await callback.message.edit_text(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
            "‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    else:
        keyboard = get_main_menu_keyboard(lang)
        
        await callback.message.edit_text(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    await callback.answer()

@router.callback_query(F.data == "menu_create_post")
async def callback_create_post(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç - —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å"""
    from create import cmd_create_post
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏
    await cmd_create_post(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "menu_create_post_direct")
async def callback_create_post_direct(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Å–ø–∏—Å–∫–∞"""
    from create import cmd_create_post
    await cmd_create_post(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "menu_scheduled")
async def callback_scheduled_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    project_id = user.get("current_project") if user else None
    
    if not project_id:
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
    posts = supabase_db.db.get_scheduled_posts_by_channel(project_id)
    
    if not posts:
        text = "üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤**\n\n‚ùå –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="menu_create_post_direct")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    else:
        text = f"üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤**\n\n–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {len(posts)} –ø–æ—Å—Ç–æ–≤\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø–æ—Å—Ç–æ–≤
        for i, post in enumerate(posts[:5], 1):
            channel_info = post.get("channels", {})
            channel_name = channel_info.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª")
            post_text = post.get("text", "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")[:30]
            text += f"{i}. #{post['id']} ‚Ä¢ {channel_name}\n   {post_text}...\n"
        
        if len(posts) > 5:
            text += f"\n_...–∏ –µ—â–µ {len(posts) - 5} –ø–æ—Å—Ç–æ–≤_"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –í—Å–µ –ø–æ—Å—Ç—ã", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="menu_create_post_direct")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "menu_channels")
async def callback_channels_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –∫–∞–Ω–∞–ª–æ–≤ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é"""
    from channels import show_channels_menu
    await show_channels_menu(callback.message, callback.from_user.id)
    await callback.answer()

@router.callback_query(F.data == "menu_projects")
async def callback_projects_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–æ–≤ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é"""
    from projects import show_projects_menu
    await show_projects_menu(callback.message, callback.from_user.id)
    await callback.answer()

@router.callback_query(F.data == "menu_settings")
async def callback_settings_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é"""
    from settings_improved import show_settings_menu
    await show_settings_menu(callback.message, callback.from_user.id)
    await callback.answer()

@router.callback_query(F.data == "menu_help")
async def callback_help_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –ø–æ–º–æ—â–∏ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
    help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ `/menu` - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏:**
‚Ä¢ `/create` - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç
‚Ä¢ `/list` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
‚Ä¢ `/edit <ID>` - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç
‚Ä¢ `/delete <ID>` - —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏:**
‚Ä¢ `/channels` - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏

**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ `/settings` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è

üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="menu_create_post_direct"),
            InlineKeyboardButton(text="üìã –ú–æ–∏ –ø–æ—Å—Ç—ã", callback_data="posts_menu")
        ],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(help_text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()
