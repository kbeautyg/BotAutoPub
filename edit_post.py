from aiogram import Router, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime
from zoneinfo import ZoneInfo
from states import PostCreationFlow
import supabase_db
from __init__ import TEXTS
import json

router = Router()

# –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ create.py –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
def get_edit_navigation_keyboard(can_skip: bool = True):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    buttons = []
    
    nav_row = []
    if can_skip:
        nav_row.append(InlineKeyboardButton(text="‚è≠Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", callback_data="edit_skip"))
    nav_row.append(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="edit_cancel"))
    
    if nav_row:
        buttons.append(nav_row)
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_edit_main_menu(post_id: int):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_field:{post_id}:text")],
        [InlineKeyboardButton(text="üñº –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞", callback_data=f"edit_field:{post_id}:media")],
        [InlineKeyboardButton(text="üé® –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç", callback_data=f"edit_field:{post_id}:format")],
        [InlineKeyboardButton(text="üîò –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫–∏", callback_data=f"edit_field:{post_id}:buttons")],
        [InlineKeyboardButton(text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data=f"edit_field:{post_id}:time")],
        [InlineKeyboardButton(text="üì∫ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data=f"edit_field:{post_id}:channel")],
        [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–≤—Ç–æ—Ä", callback_data=f"edit_field:{post_id}:repeat")],
        [InlineKeyboardButton(text="üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"edit_preview:{post_id}")],
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data=f"edit_save:{post_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"post_view:{post_id}")]
    ])

@router.message(Command("edit"))
async def cmd_edit(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    user_id = message.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(TEXTS[lang]['edit_usage'])
        return
    
    try:
        post_id = int(args[1])
    except:
        await message.answer(TEXTS[lang]['edit_invalid_id'])
        return
    
    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await show_edit_menu(message, post_id, user_id, lang)

async def show_edit_menu(message: Message, post_id: int, user_id: int, lang: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    post = supabase_db.db.get_post(post_id)
    
    if not post or not supabase_db.db.is_user_in_project(user_id, post.get("project_id", -1)):
        await message.answer(TEXTS[lang]['edit_post_not_found'])
        return
    
    if post.get("published"):
        await message.answer(TEXTS[lang]['edit_post_published'])
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    channel = supabase_db.db.get_channel(post.get("channel_id"))
    channel_name = channel.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª") if channel else "–ö–∞–Ω–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    text = f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
    text += f"üì∫ **–ö–∞–Ω–∞–ª:** {channel_name}\n"
    
    # –¢–µ–∫—Å—Ç
    post_text = post.get("text", "")
    if post_text:
        text += f"üìù **–¢–µ–∫—Å—Ç:** {post_text[:50]}{'...' if len(post_text) > 50 else ''}\n"
    else:
        text += f"üìù **–¢–µ–∫—Å—Ç:** _–Ω–µ –∑–∞–¥–∞–Ω_\n"
    
    # –ú–µ–¥–∏–∞
    if post.get("media_id"):
        media_type = post.get("media_type", "–º–µ–¥–∏–∞")
        text += f"üñº **–ú–µ–¥–∏–∞:** {TEXTS[lang].get(f'media_{media_type}', media_type)}\n"
    else:
        text += f"üñº **–ú–µ–¥–∏–∞:** _–Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ_\n"
    
    # –§–æ—Ä–º–∞—Ç
    format_type = post.get("parse_mode") or post.get("format") or "none"
    text += f"üé® **–§–æ—Ä–º–∞—Ç:** {format_type}\n"
    
    # –ö–Ω–æ–ø–∫–∏
    buttons = post.get("buttons")
    if buttons:
        try:
            if isinstance(buttons, str):
                buttons_list = json.loads(buttons)
            else:
                buttons_list = buttons
            text += f"üîò **–ö–Ω–æ–ø–æ–∫:** {len(buttons_list)}\n"
        except:
            text += f"üîò **–ö–Ω–æ–ø–∫–∏:** _–æ—à–∏–±–∫–∞_\n"
    else:
        text += f"üîò **–ö–Ω–æ–ø–∫–∏:** _–Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã_\n"
    
    # –í—Ä–µ–º—è
    if post.get("publish_time"):
        try:
            from view_post import format_time_for_user
            time_str = format_time_for_user(post["publish_time"], user)
            text += f"‚è∞ **–í—Ä–µ–º—è:** {time_str}\n"
        except:
            text += f"‚è∞ **–í—Ä–µ–º—è:** {post['publish_time']}\n"
    elif post.get("draft"):
        text += f"‚è∞ **–°—Ç–∞—Ç—É—Å:** –ß–µ—Ä–Ω–æ–≤–∏–∫\n"
    else:
        text += f"‚è∞ **–í—Ä–µ–º—è:** _–Ω–µ –∑–∞–¥–∞–Ω–æ_\n"
    
    # –ü–æ–≤—Ç–æ—Ä
    repeat = post.get("repeat_interval", 0)
    if repeat > 0:
        text += f"üîÑ **–ü–æ–≤—Ç–æ—Ä:** –∫–∞–∂–¥—ã–µ {format_interval(repeat)}\n"
    else:
        text += f"üîÑ **–ü–æ–≤—Ç–æ—Ä:** _–æ—Ç–∫–ª—é—á–µ–Ω_\n"
    
    text += "\n**–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:**"
    
    keyboard = get_edit_main_menu(post_id)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

def format_interval(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª"""
    if seconds % 86400 == 0:
        days = seconds // 86400
        return f"{days} –¥–Ω."
    elif seconds % 3600 == 0:
        hours = seconds // 3600
        return f"{hours} —á."
    else:
        minutes = seconds // 60
        return f"{minutes} –º–∏–Ω."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("post_edit_cmd:"))
async def callback_edit_post(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é"""
    user_id = callback.from_user.id
    post_id = int(callback.data.split(":", 1)[1])
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    await show_edit_menu(callback.message, post_id, user_id, lang)
    await callback.answer()

@router.callback_query(F.data.startswith("edit_field:"))
async def callback_edit_field(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è"""
    parts = callback.data.split(":")
    post_id = int(parts[1])
    field = parts[2]
    
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    post = supabase_db.db.get_post(post_id)
    if not post:
        await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        editing_post_id=post_id,
        editing_field=field,
        original_post=post,
        user_data=user
    )
    
    if field == "text":
        await state.set_state(PostCreationFlow.step_text)
        current_text = post.get("text", "")
        text = (
            f"üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
            f"**–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:**\n{current_text[:500]}{'...' if len(current_text) > 500 else ''}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π."
        )
        keyboard = get_edit_navigation_keyboard(can_skip=True)
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        
    elif field == "media":
        await state.set_state(PostCreationFlow.step_media)
        text = f"üñº **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
        if post.get("media_id"):
            media_type = post.get("media_type", "–º–µ–¥–∏–∞")
            text += f"**–¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞:** {TEXTS[lang].get(f'media_{media_type}', media_type)}\n\n"
        else:
            text += "**–¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞:** _–Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ_\n\n"
        text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/GIF –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        keyboard = get_edit_navigation_keyboard(can_skip=True)
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        
    elif field == "format":
        text = f"üé® **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
        current_format = post.get("parse_mode") or post.get("format") or "none"
        text += f"**–¢–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç:** {current_format}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç:"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù HTML", callback_data=f"edit_format:{post_id}:HTML")],
            [InlineKeyboardButton(text="üìã Markdown", callback_data=f"edit_format:{post_id}:Markdown")],
            [InlineKeyboardButton(text="üìÑ –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data=f"edit_format:{post_id}:none")],
            [InlineKeyboardButton(text="‚è≠Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π", callback_data=f"edit_skip_format:{post_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"edit_menu:{post_id}")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        
    elif field == "buttons":
        await state.set_state(PostCreationFlow.step_buttons)
        text = f"üîò **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
        
        buttons = post.get("buttons", [])
        if buttons:
            try:
                if isinstance(buttons, str):
                    buttons_list = json.loads(buttons)
                else:
                    buttons_list = buttons
                text += "**–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:**\n"
                for btn in buttons_list:
                    if isinstance(btn, dict):
                        text += f"‚Ä¢ {btn.get('text', '')} | {btn.get('url', '')}\n"
                text += "\n"
            except:
                text += "**–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:** _–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è_\n\n"
        else:
            text += "**–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:** _–Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã_\n\n"
        
        text += (
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "```\n"
            "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | https://example.com\n"
            "–í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ | https://example2.com\n"
            "```"
        )
        keyboard = get_edit_navigation_keyboard(can_skip=True)
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        
    elif field == "time":
        text = f"‚è∞ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
        
        if post.get("publish_time"):
            try:
                from view_post import format_time_for_user
                time_str = format_time_for_user(post["publish_time"], user)
                text += f"**–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:** {time_str}\n\n"
            except:
                text += f"**–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:** {post['publish_time']}\n\n"
        elif post.get("draft"):
            text += "**–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:** –ß–µ—Ä–Ω–æ–≤–∏–∫\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"edit_time_now:{post_id}")],
            [InlineKeyboardButton(text="üìù –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫", callback_data=f"edit_time_draft:{post_id}")],
            [InlineKeyboardButton(text="‚è∞ –£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è", callback_data=f"edit_time_custom:{post_id}")],
            [InlineKeyboardButton(text="‚è≠Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ", callback_data=f"edit_skip_time:{post_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"edit_menu:{post_id}")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        
    elif field == "channel":
        project_id = post.get("project_id")
        channels = supabase_db.db.list_channels(project_id=project_id)
        
        text = f"üì∫ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
        
        current_channel_id = post.get("channel_id")
        current_channel = None
        for ch in channels:
            if ch["id"] == current_channel_id:
                current_channel = ch
                break
        
        if current_channel:
            text += f"**–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª:** {current_channel['name']}\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª:"
        
        buttons = []
        for channel in channels:
            if channel["id"] != current_channel_id:
                admin_status = "‚úÖ" if channel.get('is_admin_verified') else "‚ùì"
                buttons.append([InlineKeyboardButton(
                    text=f"{admin_status} {channel['name']}", 
                    callback_data=f"edit_channel:{post_id}:{channel['id']}"
                )])
        
        buttons.append([InlineKeyboardButton(text="‚è≠Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π", callback_data=f"edit_skip_channel:{post_id}")])
        buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"edit_menu:{post_id}")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        
    elif field == "repeat":
        text = f"üîÑ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∞ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
        
        current_repeat = post.get("repeat_interval", 0)
        if current_repeat > 0:
            text += f"**–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:** –∫–∞–∂–¥—ã–µ {format_interval(current_repeat)}\n\n"
        else:
            text += "**–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:** _–ø–æ–≤—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω_\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚è∞ –ö–∞–∂–¥—ã–π —á–∞—Å", callback_data=f"edit_repeat:{post_id}:3600")],
            [InlineKeyboardButton(text="üìÖ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data=f"edit_repeat:{post_id}:86400")],
            [InlineKeyboardButton(text="üìÜ –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é", callback_data=f"edit_repeat:{post_id}:604800")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä", callback_data=f"edit_repeat:{post_id}:0")],
            [InlineKeyboardButton(text="‚öôÔ∏è –°–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª", callback_data=f"edit_repeat_custom:{post_id}")],
            [InlineKeyboardButton(text="‚è≠Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π", callback_data=f"edit_skip_repeat:{post_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"edit_menu:{post_id}")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ skip –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
@router.callback_query(F.data == "edit_skip")
async def callback_edit_skip(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—è"""
    data = await state.get_data()
    post_id = data.get("editing_post_id")
    
    if not post_id:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ—Å—Ç–∞")
        return
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await show_edit_menu(callback.message, post_id, callback.from_user.id, "ru")
    await state.clear()
    await callback.answer()

@router.callback_query(F.data.startswith("edit_skip_"))
async def callback_edit_skip_specific(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è"""
    post_id = int(callback.data.split(":")[-1])
    await show_edit_menu(callback.message, post_id, callback.from_user.id, "ru")
    await callback.answer()

@router.callback_query(F.data == "edit_cancel")
async def callback_edit_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    data = await state.get_data()
    post_id = data.get("editing_post_id")
    
    await state.clear()
    
    if post_id:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–æ—Å—Ç–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞", callback_data=f"post_view:{post_id}")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await callback.message.edit_text(
            f"‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ #{post_id} –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=keyboard
        )
    else:
        await callback.message.edit_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
@router.callback_query(F.data.startswith("edit_time_now:"))
async def callback_edit_time_now(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å–µ–π—á–∞—Å"""
    post_id = int(callback.data.split(":")[-1])
    
    await state.update_data(
        new_publish_time=datetime.now(ZoneInfo("UTC")),
        new_draft=False
    )
    
    await show_edit_menu(callback.message, post_id, callback.from_user.id, "ru")
    await callback.answer("–í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å")

@router.callback_query(F.data.startswith("edit_time_draft:"))
async def callback_edit_time_draft(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫"""
    post_id = int(callback.data.split(":")[-1])
    
    await state.update_data(
        new_publish_time=None,
        new_draft=True
    )
    
    await show_edit_menu(callback.message, post_id, callback.from_user.id, "ru")
    await callback.answer("–ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: –ß–µ—Ä–Ω–æ–≤–∏–∫")

@router.callback_query(F.data.startswith("edit_time_custom:"))
async def callback_edit_time_custom(callback: CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    post_id = int(callback.data.split(":")[-1])
    user = supabase_db.db.get_user(callback.from_user.id)
    
    await state.set_state(PostCreationFlow.step_time)
    await state.update_data(editing_custom_time=True)
    
    text = (
        f"üìÖ **–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏**\n\n"
        f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user.get('timezone', 'UTC')}\n\n"
        f"–§–æ—Ä–º–∞—Ç—ã:\n"
        f"‚Ä¢ `2024-12-25 15:30`\n"
        f"‚Ä¢ `25.12.2024 15:30`\n"
        f"‚Ä¢ `25/12/2024 15:30`"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"edit_menu:{post_id}")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
@router.message(PostCreationFlow.step_text, F.text)
async def handle_edit_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    data = await state.get_data()
    
    if not data.get("editing_post_id"):
        return  # –≠—Ç–æ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    post_id = data["editing_post_id"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    await state.update_data(new_text=message.text)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
    user_id = message.from_user.id
    await show_edit_menu(message, post_id, user_id, "ru")
    await state.clear()

@router.message(EditPost.time, Command("skip"))
async def skip_edit_time(message: Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
    data = await state.get_data()
    orig_post = data.get("orig_post", {})
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    await state.update_data(new_publish_time=orig_post.get("publish_time"))
    await ask_edit_repeat(message, state)

@router.message(PostCreationFlow.step_media, F.photo | F.video | F.animation)
async def handle_edit_media_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–¥–∏–∞"""
    data = await state.get_data()
    
    if not data.get("editing_post_id"):
        return
    
    post_id = data["editing_post_id"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –º–µ–¥–∏–∞
    if message.photo:
        await state.update_data(
            new_media_type="photo",
            new_media_id=message.photo[-1].file_id
        )
    elif message.video:
        await state.update_data(
            new_media_type="video",
            new_media_id=message.video.file_id
        )
    elif message.animation:
        await state.update_data(
            new_media_type="animation",
            new_media_id=message.animation.file_id
        )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
    await show_edit_menu(message, post_id, message.from_user.id, "ru")
    await state.clear()

@router.message(PostCreationFlow.step_buttons, F.text)
async def handle_edit_buttons_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    data = await state.get_data()
    
    if not data.get("editing_post_id"):
        return
    
    post_id = data["editing_post_id"]
    
    # –ü–∞—Ä—Å–∏–º –∫–Ω–æ–ø–∫–∏
    buttons = []
    lines = message.text.strip().split('\n')
    
    for line in lines:
        if '|' in line:
            parts = line.split('|', 1)
            text = parts[0].strip()
            url = parts[1].strip()
            if text and url:
                buttons.append({"text": text, "url": url})
    
    if buttons:
        await state.update_data(new_buttons=buttons)
        await show_edit_menu(message, post_id, message.from_user.id, "ru")
    else:
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–æ–∫**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "```\n"
            "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | https://example.com\n"
            "```",
            parse_mode="Markdown"
        )
    
    await state.clear()

@router.message(PostCreationFlow.step_time, F.text)
async def handle_edit_time_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    data = await state.get_data()
    
    if not data.get("editing_post_id") or not data.get("editing_custom_time"):
        return
    
    post_id = data["editing_post_id"]
    user = data.get("user_data", {})
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        for fmt in ["%Y-%m-%d %H:%M", "%d.%m.%Y %H:%M", "%d/%m/%Y %H:%M"]:
            try:
                dt = datetime.strptime(message.text.strip(), fmt)
                break
            except ValueError:
                continue
        else:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç")
        
        tz = ZoneInfo(user.get("timezone", "UTC"))
        local_dt = dt.replace(tzinfo=tz)
        utc_dt = local_dt.astimezone(ZoneInfo("UTC"))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
        if utc_dt <= datetime.now(ZoneInfo("UTC")):
            await message.answer("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
            return
        
        await state.update_data(new_publish_time=utc_dt)
        await show_edit_menu(message, post_id, message.from_user.id, "ru")
        
    except ValueError:
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ `2024-12-25 15:30`\n"
            "‚Ä¢ `25.12.2024 15:30`\n"
            "‚Ä¢ `25/12/2024 15:30`",
            parse_mode="Markdown"
        )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
@router.callback_query(F.data.startswith("edit_format:"))
async def callback_edit_format(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç"""
    parts = callback.data.split(":")
    post_id = int(parts[1])
    new_format = parts[2]
    
    await state.update_data(new_format=new_format)
    await show_edit_menu(callback.message, post_id, callback.from_user.id, "ru")
    await callback.answer(f"–§–æ—Ä–º–∞—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_format}")

@router.callback_query(F.data.startswith("edit_channel:"))
async def callback_edit_channel(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª"""
    parts = callback.data.split(":")
    post_id = int(parts[1])
    channel_id = int(parts[2])
    
    await state.update_data(new_channel_id=channel_id)
    await show_edit_menu(callback.message, post_id, callback.from_user.id, "ru")
    await callback.answer("–ö–∞–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω")

@router.callback_query(F.data.startswith("edit_repeat:"))
async def callback_edit_repeat(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–∞"""
    parts = callback.data.split(":")
    post_id = int(parts[1])
    interval = int(parts[2])
    
    await state.update_data(new_repeat_interval=interval)
    await show_edit_menu(callback.message, post_id, callback.from_user.id, "ru")
    
    if interval > 0:
        await callback.answer(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: –∫–∞–∂–¥—ã–µ {format_interval(interval)}")
    else:
        await callback.answer("–ü–æ–≤—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω")

@router.callback_query(F.data.startswith("edit_repeat_custom:"))
async def callback_edit_repeat_custom(callback: CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    post_id = int(callback.data.split(":")[-1])
    
    await state.set_state(PostCreationFlow.step_repeat)
    
    text = (
        f"üîÑ **–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–∞**\n\n"
        f"–§–æ—Ä–º–∞—Ç—ã:\n"
        f"‚Ä¢ `30m` - 30 –º–∏–Ω—É—Ç\n"
        f"‚Ä¢ `2h` - 2 —á–∞—Å–∞\n"
        f"‚Ä¢ `1d` - 1 –¥–µ–Ω—å\n"
        f"‚Ä¢ `7d` - 7 –¥–Ω–µ–π"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"edit_menu:{post_id}")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.message(PostCreationFlow.step_repeat, F.text)
async def handle_edit_repeat_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–∞"""
    data = await state.get_data()
    
    if not data.get("editing_post_id"):
        return
    
    post_id = data["editing_post_id"]
    text = message.text.strip().lower()
    
    # –ü–∞—Ä—Å–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    try:
        if text.endswith('m'):
            minutes = int(text[:-1])
            interval = minutes * 60
        elif text.endswith('h'):
            hours = int(text[:-1])
            interval = hours * 3600
        elif text.endswith('d'):
            days = int(text[:-1])
            interval = days * 86400
        else:
            raise ValueError()
        
        if interval > 0:
            await state.update_data(new_repeat_interval=interval)
            await show_edit_menu(message, post_id, message.from_user.id, "ru")
        else:
            raise ValueError()
        
    except ValueError:
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ `30m` - –º–∏–Ω—É—Ç—ã\n"
            "‚Ä¢ `2h` - —á–∞—Å—ã\n"
            "‚Ä¢ `1d` - –¥–Ω–∏",
            parse_mode="Markdown"
        )
    
    await state.clear()

# –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
@router.callback_query(F.data.startswith("edit_preview:"))
async def callback_edit_preview(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏"""
    post_id = int(callback.data.split(":")[-1])
    
    post = supabase_db.db.get_post(post_id)
    if not post:
        await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –ø—Ä–µ–≤—å—é
    preview_data = post.copy()
    
    if "new_text" in data:
        preview_data["text"] = data["new_text"]
    if "new_media_id" in data:
        preview_data["media_id"] = data["new_media_id"]
        preview_data["media_type"] = data["new_media_type"]
    if "new_format" in data:
        preview_data["parse_mode"] = data["new_format"]
    if "new_buttons" in data:
        preview_data["buttons"] = data["new_buttons"]
    if "new_channel_id" in data:
        preview_data["channel_id"] = data["new_channel_id"]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
    from view_post import send_post_preview
    channel = supabase_db.db.get_channel(preview_data.get("channel_id"))
    await send_post_preview(callback.message, preview_data, channel)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data=f"edit_save:{post_id}")],
        [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"edit_menu:{post_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"post_view:{post_id}")]
    ])
    
    await callback.message.answer(
        "üëÄ **–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π**\n\n"
        "–¢–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –ø–æ—Å—Ç –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
@router.callback_query(F.data.startswith("edit_save:"))
async def callback_edit_save(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    post_id = int(callback.data.split(":")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    data = await state.get_data()
    
    updates = {}
    if "new_text" in data:
        updates["text"] = data["new_text"]
    if "new_media_id" in data:
        updates["media_id"] = data["new_media_id"]
        updates["media_type"] = data["new_media_type"]
    if "new_format" in data:
        updates["parse_mode"] = data["new_format"]
    if "new_buttons" in data:
        updates["buttons"] = data["new_buttons"]
    if "new_publish_time" in data:
        updates["publish_time"] = data["new_publish_time"]
    if "new_draft" in data:
        updates["draft"] = data["new_draft"]
    if "new_channel_id" in data:
        updates["channel_id"] = data["new_channel_id"]
    if "new_repeat_interval" in data:
        updates["repeat_interval"] = data["new_repeat_interval"]
    
    if updates:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        supabase_db.db.update_post(post_id, updates)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞", callback_data=f"post_view:{post_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit_menu:{post_id}")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            f"‚úÖ **–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã**\n\n"
            f"–ü–æ—Å—Ç #{post_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text("‚ùå –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    await state.clear()
    await callback.answer()

@router.callback_query(F.data.startswith("edit_menu:"))
async def callback_return_to_edit_menu(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    post_id = int(callback.data.split(":")[-1])
    await state.clear()
    await show_edit_menu(callback.message, post_id, callback.from_user.id, "ru")
    await callback.answer()
