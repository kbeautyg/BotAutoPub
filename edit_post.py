import json
import re
from aiogram import Router, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime
from zoneinfo import ZoneInfo
from states import EditPost
import supabase_db
from __init__ import TEXTS

router = Router()

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ò–ò-–∞–≥–µ–Ω—Ç–∞ (—Ç–∞–∫–∏–µ –∂–µ –∫–∞–∫ –≤ create.py)
TEXT_COMMANDS = {
    "skip": ["skip", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "/skip"],
    "cancel": ["cancel", "–æ—Ç–º–µ–Ω–∞", "/cancel", "–æ—Ç–º–µ–Ω–∏—Ç—å"],
    "back": ["back", "–Ω–∞–∑–∞–¥", "/back"],
    "confirm": ["confirm", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "/confirm", "–¥–∞", "yes"],
    "now": ["now", "—Å–µ–π—á–∞—Å"],
    "draft": ["draft", "—á–µ—Ä–Ω–æ–≤–∏–∫"]
}

def is_command(text: str, command: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π"""
    if not text:
        return False
    text_lower = text.strip().lower()
    return text_lower in TEXT_COMMANDS.get(command, [])

def get_edit_navigation_keyboard(current_step: str, lang: str = "ru", can_skip: bool = True):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_row = []
    if can_skip:
        nav_row.append(InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="edit_nav_skip"))
    
    if nav_row:
        buttons.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="edit_nav_cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_format_keyboard(lang: str = "ru"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù HTML", callback_data="edit_format_html")],
        [InlineKeyboardButton(text="üìã Markdown", callback_data="edit_format_markdown")],
        [InlineKeyboardButton(text="üìÑ –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="edit_format_none")],
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="edit_nav_skip")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="edit_nav_cancel")]
    ])

def get_time_options_keyboard(lang: str = "ru"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–ø—Ü–∏–π –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="edit_time_now")],
        [InlineKeyboardButton(text="üìù –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫", callback_data="edit_time_draft")],
        [InlineKeyboardButton(text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è", callback_data="edit_time_schedule")],
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="edit_nav_skip")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="edit_nav_cancel")]
    ])

def get_channels_keyboard(channels: list, lang: str = "ru"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞"""
    buttons = []
    
    for i, channel in enumerate(channels):
        admin_status = "‚úÖ" if channel.get('is_admin_verified') else "‚ùì"
        text = f"{admin_status} {channel['name']}"
        buttons.append([InlineKeyboardButton(
            text=text, 
            callback_data=f"edit_channel_select:{channel['id']}"
        )])
    
    buttons.append([InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="edit_nav_skip")])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="edit_nav_cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_preview_keyboard(lang: str = "ru"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="edit_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="edit_nav_cancel")]
    ])

def format_interval(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds == 0:
        return "–Ω–µ—Ç"
    elif seconds % 86400 == 0:
        days = seconds // 86400
        return f"{days}d"
    elif seconds % 3600 == 0:
        hours = seconds // 3600
        return f"{hours}h"
    elif seconds % 60 == 0:
        minutes = seconds // 60
        return f"{minutes}m"
    else:
        return f"{seconds}s"

def parse_time_improved(user: dict, text: str):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    try:
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        formats = ["%Y-%m-%d %H:%M", "%d.%m.%Y %H:%M", "%d/%m/%Y %H:%M"]
        
        dt = None
        for fmt in formats:
            try:
                dt = datetime.strptime(text.strip(), fmt)
                break
            except ValueError:
                continue
        
        if dt is None:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tz_name = user.get("timezone", "UTC")
        try:
            tz = ZoneInfo(tz_name)
        except Exception:
            tz = ZoneInfo("UTC")
        
        local_dt = dt.replace(tzinfo=tz)
        utc_dt = local_dt.astimezone(ZoneInfo("UTC"))
        
        return utc_dt
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")

@router.message(Command("edit"))
async def cmd_edit(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    user_id = message.from_user.id
    args = message.text.split(maxsplit=1)
    
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    if len(args) < 2:
        await message.answer(
            "üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/edit <ID –ø–æ—Å—Ç–∞>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/edit 123`",
            parse_mode="Markdown"
        )
        return
    
    try:
        post_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå ID –ø–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
    post = supabase_db.db.get_post(post_id)
    if not post or not supabase_db.db.is_user_in_project(user_id, post.get("project_id", -1)):
        await message.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    if post.get("published"):
        await message.answer("‚ùå –ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.set_data({
        "post_id": post_id,
        "original_post": post,
        "user_settings": user,
        "current_step": "text",
        "changes": {}
    })
    
    await start_edit_text_step(message, state, lang)

async def start_edit_text_step(message: Message, state: FSMContext, lang: str):
    """–®–∞–≥ 1: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
    await state.set_state(EditPost.text)
    
    data = await state.get_data()
    original_post = data["original_post"]
    current_text = original_post.get("text") or "–ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"
    
    text = (
        f"üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ #{original_post['id']} - –®–∞–≥ 1/6**\n\n"
        f"**–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:**\n"
        f"{current_text[:300]}{'...' if len(current_text) > 300 else ''}\n\n"
        f"**–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        f"‚Ä¢ `skip` - –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç\n"
        f"‚Ä¢ `cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
        f"üí° *–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ*"
    )
    
    keyboard = get_edit_navigation_keyboard("text", lang)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(EditPost.text, F.text)
async def handle_edit_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    user = supabase_db.db.get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    if is_command(message.text, "skip"):
        data = await state.get_data()
        await state.set_data(data)
        await start_edit_media_step(message, state, lang)
        return
    
    if is_command(message.text, "cancel"):
        await state.clear()
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    data = await state.get_data()
    data["changes"]["text"] = message.text
    await state.set_data(data)
    
    await start_edit_media_step(message, state, lang)

async def start_edit_media_step(message: Message, state: FSMContext, lang: str):
    """–®–∞–≥ 2: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞"""
    await state.set_state(EditPost.media)
    
    data = await state.get_data()
    original_post = data["original_post"]
    
    media_info = "–Ω–µ—Ç –º–µ–¥–∏–∞"
    if original_post.get("media_id"):
        media_type = original_post.get("media_type", "–º–µ–¥–∏–∞")
        if media_type == "photo":
            media_info = "üì∑ —Ñ–æ—Ç–æ"
        elif media_type == "video":
            media_info = "üé¨ –≤–∏–¥–µ–æ"
        elif media_type == "animation":
            media_info = "üéû GIF"
        else:
            media_info = f"üìé {media_type}"
    
    text = (
        f"üñº **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ - –®–∞–≥ 2/6**\n\n"
        f"**–¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞:** {media_info}\n\n"
        f"**–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –º–µ–¥–∏–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/GIF\n"
        f"‚Ä¢ `skip` - –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞\n"
        f"‚Ä¢ `cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )
    
    keyboard = get_edit_navigation_keyboard("media", lang)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(EditPost.media, F.text | F.photo | F.video | F.animation)
async def handle_edit_media_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥"""
    user = supabase_db.db.get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if message.text and is_command(message.text, "skip"):
        data = await state.get_data()
        await state.set_data(data)
        await start_edit_format_step(message, state, lang)
        return
    
    if message.text and is_command(message.text, "cancel"):
        await state.clear()
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
    data = await state.get_data()
    media_handled = False
    
    if message.photo:
        data["changes"]["media_type"] = "photo"
        data["changes"]["media_id"] = message.photo[-1].file_id
        media_handled = True
    elif message.video:
        data["changes"]["media_type"] = "video"
        data["changes"]["media_id"] = message.video.file_id
        media_handled = True
    elif message.animation:
        data["changes"]["media_type"] = "animation"
        data["changes"]["media_id"] = message.animation.file_id
        media_handled = True
    
    if media_handled:
        await state.set_data(data)
        await start_edit_format_step(message, state, lang)
    else:
        if message.text:
            await message.answer(
                "‚ùå **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞**\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ `skip` - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å\n"
                "‚Ä¢ `cancel` - –æ—Ç–º–µ–Ω–∞\n\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª",
                parse_mode="Markdown"
            )

async def start_edit_format_step(message: Message, state: FSMContext, lang: str):
    """–®–∞–≥ 3: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞"""
    await state.set_state(EditPost.format)
    
    data = await state.get_data()
    original_post = data["original_post"]
    current_format = original_post.get("parse_mode") or original_post.get("format") or "HTML"
    
    text = (
        f"üé® **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ - –®–∞–≥ 3/6**\n\n"
        f"**–¢–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç:** {current_format}\n\n"
        f"**–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç:**\n"
        f"‚Ä¢ **HTML** - <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <a href='#'>—Å—Å—ã–ª–∫–∏</a>\n"
        f"‚Ä¢ **Markdown** - **–∂–∏—Ä–Ω—ã–π**, *–∫—É—Ä—Å–∏–≤*, [—Å—Å—ã–ª–∫–∏](url)\n"
        f"‚Ä¢ **–û–±—ã—á–Ω—ã–π** - –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
        f"–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"‚Ä¢ `html` - HTML —Ñ–æ—Ä–º–∞—Ç\n"
        f"‚Ä¢ `markdown` - Markdown —Ñ–æ—Ä–º–∞—Ç\n"
        f"‚Ä¢ `none` - –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        f"‚Ä¢ `skip` - –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç\n"
        f"‚Ä¢ `cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å"
    )
    
    keyboard = get_format_keyboard(lang)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(EditPost.format, F.text)
async def handle_edit_format_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
    user = supabase_db.db.get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    text_lower = message.text.lower().strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    if is_command(message.text, "skip"):
        data = await state.get_data()
        await state.set_data(data)
        await start_edit_buttons_step(message, state, lang)
        return
    
    if is_command(message.text, "cancel"):
        await state.clear()
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    # –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
    format_map = {
        "html": "HTML",
        "markdown": "Markdown",
        "md": "Markdown",
        "none": None,
        "–æ–±—ã—á–Ω—ã–π": None,
        "–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è": None
    }
    
    if text_lower in format_map:
        data = await state.get_data()
        data["changes"]["parse_mode"] = format_map[text_lower]
        await state.set_data(data)
        await start_edit_buttons_step(message, state, lang)
    else:
        await message.answer(
            "‚ùå **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç**\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ `html` - HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ `markdown` - Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ `none` - –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ `skip` - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å\n"
            "‚Ä¢ `cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å",
            parse_mode="Markdown"
        )

@router.callback_query(F.data.startswith("edit_format_"))
async def handle_edit_format_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"""
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    format_map = {
        "edit_format_html": "HTML",
        "edit_format_markdown": "Markdown",
        "edit_format_none": None
    }
    
    data = await state.get_data()
    data["changes"]["parse_mode"] = format_map.get(callback.data, "HTML")
    await state.set_data(data)
    
    await callback.answer()
    await start_edit_buttons_step(callback.message, state, lang)

async def start_edit_buttons_step(message: Message, state: FSMContext, lang: str):
    """–®–∞–≥ 4: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫"""
    await state.set_state(EditPost.buttons)
    
    data = await state.get_data()
    original_post = data["original_post"]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏
    current_buttons = original_post.get("buttons", [])
    if isinstance(current_buttons, str):
        try:
            current_buttons = json.loads(current_buttons)
        except:
            current_buttons = []
    
    buttons_text = "–Ω–µ—Ç –∫–Ω–æ–ø–æ–∫"
    if current_buttons:
        buttons_list = []
        for btn in current_buttons:
            if isinstance(btn, dict) and btn.get("text") and btn.get("url"):
                buttons_list.append(f"‚Ä¢ {btn['text']} | {btn['url']}")
        if buttons_list:
            buttons_text = "\n".join(buttons_list)
    
    text = (
        f"üîò **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ - –®–∞–≥ 4/6**\n\n"
        f"**–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:**\n{buttons_text}\n\n"
        f"**–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏:**\n"
        f"–§–æ—Ä–º–∞—Ç: `–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | https://example.com`\n"
        f"–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ\n\n"
        f"–ü—Ä–∏–º–µ—Ä:\n"
        f"```\n"
        f"–ù–∞—à —Å–∞–π—Ç | https://example.com\n"
        f"Telegram | https://t.me/channel\n"
        f"```\n\n"
        f"–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"‚Ä¢ `skip` - –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏\n"
        f"‚Ä¢ `cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )
    
    keyboard = get_edit_navigation_keyboard("buttons", lang)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(EditPost.buttons, F.text)
async def handle_edit_buttons_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–Ω–æ–ø–æ–∫"""
    user = supabase_db.db.get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    if is_command(message.text, "skip"):
        data = await state.get_data()
        await state.set_data(data)
        await start_edit_time_step(message, state, lang)
        return
    
    if is_command(message.text, "cancel"):
        await state.clear()
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–Ω–æ–ø–∫–∏
    try:
        buttons = []
        lines = message.text.strip().split('\n')
        
        for line in lines:
            if '|' in line:
                parts = line.split('|', 1)
                text = parts[0].strip()
                url = parts[1].strip()
                if text and url:
                    buttons.append({"text": text, "url": url})
        
        data = await state.get_data()
        data["changes"]["buttons"] = buttons
        await state.set_data(data)
        
        await start_edit_time_step(message, state, lang)
        
    except Exception as e:
        await message.answer(
            "‚ùå **–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–Ω–æ–ø–æ–∫**\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–¢–µ–∫—Å—Ç | URL`",
            parse_mode="Markdown"
        )

async def start_edit_time_step(message: Message, state: FSMContext, lang: str):
    """–®–∞–≥ 5: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    await state.set_state(EditPost.time)
    
    data = await state.get_data()
    original_post = data["original_post"]
    user_settings = data["user_settings"]
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    current_time_str = "—á–µ—Ä–Ω–æ–≤–∏–∫"
    if original_post.get("publish_time"):
        try:
            pub_time_str = original_post["publish_time"]
            if isinstance(pub_time_str, str):
                if pub_time_str.endswith('Z'):
                    pub_time_str = pub_time_str[:-1] + '+00:00'
                pub_dt = datetime.fromisoformat(pub_time_str)
            else:
                pub_dt = pub_time_str
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tz_name = user_settings.get("timezone", "UTC")
            try:
                tz = ZoneInfo(tz_name)
                local_dt = pub_dt.astimezone(tz)
                current_time_str = local_dt.strftime('%Y-%m-%d %H:%M')
            except:
                current_time_str = pub_dt.strftime('%Y-%m-%d %H:%M UTC')
        except:
            current_time_str = "–æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞"
    elif original_post.get("draft"):
        current_time_str = "—á–µ—Ä–Ω–æ–≤–∏–∫"
    
    timezone = user_settings.get("timezone", "UTC")
    
    text = (
        f"‚è∞ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ - –®–∞–≥ 5/6**\n\n"
        f"**–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:** {current_time_str}\n"
        f"**–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** {timezone}\n\n"
        f"**–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:**\n\n"
        f"–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"‚Ä¢ `now` - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å\n"
        f"‚Ä¢ `draft` - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫\n"
        f"‚Ä¢ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: `2024-12-25 15:30`\n"
        f"‚Ä¢ `skip` - –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è\n"
        f"‚Ä¢ `cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )
    
    keyboard = get_time_options_keyboard(lang)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(EditPost.time, F.text)
async def handle_edit_time_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    user = supabase_db.db.get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    text_lower = message.text.lower().strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    if is_command(message.text, "skip"):
        data = await state.get_data()
        await state.set_data(data)
        await start_edit_channel_step(message, state, lang)
        return
    
    if is_command(message.text, "cancel"):
        await state.clear()
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    data = await state.get_data()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    if is_command(message.text, "now"):
        data["changes"]["publish_time"] = datetime.now(ZoneInfo("UTC"))
        data["changes"]["draft"] = False
    elif is_command(message.text, "draft"):
        data["changes"]["publish_time"] = None
        data["changes"]["draft"] = True
    else:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É
        try:
            new_time = parse_time_improved(user, message.text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
            if new_time <= datetime.now(ZoneInfo("UTC")):
                await message.answer("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
                return
            
            data["changes"]["publish_time"] = new_time
            data["changes"]["draft"] = False
            
        except ValueError as e:
            await message.answer(
                f"‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏**\n\n"
                f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                f"‚Ä¢ `now` - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å\n"
                f"‚Ä¢ `draft` - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫\n"
                f"‚Ä¢ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: `2024-12-25 15:30`\n"
                f"‚Ä¢ `skip` - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å\n"
                f"‚Ä¢ `cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å",
                parse_mode="Markdown"
            )
            return
    
    await state.set_data(data)
    await start_edit_channel_step(message, state, lang)

@router.callback_query(F.data == "edit_time_now")
async def handle_edit_time_now(callback: CallbackQuery, state: FSMContext):
    """–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å"""
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    data = await state.get_data()
    data["changes"]["publish_time"] = datetime.now(ZoneInfo("UTC"))
    data["changes"]["draft"] = False
    await state.set_data(data)
    
    await callback.answer()
    await start_edit_channel_step(callback.message, state, lang)

@router.callback_query(F.data == "edit_time_draft")
async def handle_edit_time_draft(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫"""
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    data = await state.get_data()
    data["changes"]["publish_time"] = None
    data["changes"]["draft"] = True
    await state.set_data(data)
    
    await callback.answer()
    await start_edit_channel_step(callback.message, state, lang)

@router.callback_query(F.data == "edit_time_schedule")
async def handle_edit_time_schedule(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è"""
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
    await state.set_state(EditPost.time)
    
    user = supabase_db.db.get_user(callback.from_user.id)
    tz_name = user.get("timezone", "UTC")
    
    text = (
        f"üìÖ **–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏**\n\n"
        f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz_name}\n\n"
        f"–§–æ—Ä–º–∞—Ç—ã:\n"
        f"‚Ä¢ `2024-12-25 15:30`\n"
        f"‚Ä¢ `25.12.2024 15:30`\n"
        f"‚Ä¢ `25/12/2024 15:30`\n\n"
        f"–ò–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"‚Ä¢ `now` - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å\n"
        f"‚Ä¢ `draft` - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫\n"
        f"‚Ä¢ `skip` - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å\n"
        f"‚Ä¢ `cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å"
    )
    
    await callback.message.edit_text(text, parse_mode="Markdown")
    await callback.answer()

async def start_edit_channel_step(message: Message, state: FSMContext, lang: str):
    """–®–∞–≥ 6: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    await state.set_state(EditPost.channel)
    
    data = await state.get_data()
    original_post = data["original_post"]
    user_settings = data["user_settings"]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª
    current_channel_name = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
    current_channel = supabase_db.db.get_channel(original_post.get("channel_id"))
    if current_channel:
        current_channel_name = current_channel["name"]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    project_id = user_settings.get("current_project")
    channels = supabase_db.db.list_channels(project_id=project_id)
    
    if not channels:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞")
        await start_edit_preview_step(message, state, lang)
        return
    
    text = (
        f"üì∫ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ - –®–∞–≥ 6/6**\n\n"
        f"**–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª:** {current_channel_name}\n\n"
        f"**–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª:**\n\n"
    )
    
    # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏
    for i, channel in enumerate(channels, 1):
        admin_status = "‚úÖ" if channel.get('is_admin_verified') else "‚ùì"
        text += f"{i}. {admin_status} {channel['name']}\n"
    
    text += (
        f"\n–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"‚Ä¢ –ù–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `1`)\n"
        f"‚Ä¢ @username –∫–∞–Ω–∞–ª–∞\n"
        f"‚Ä¢ `skip` - –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª\n"
        f"‚Ä¢ `cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )
    
    keyboard = get_channels_keyboard(channels, lang)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(EditPost.channel, F.text)
async def handle_edit_channel_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞"""
    user = supabase_db.db.get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    if is_command(message.text, "skip"):
        data = await state.get_data()
        await state.set_data(data)
        await start_edit_preview_step(message, state, lang)
        return
    
    if is_command(message.text, "cancel"):
        await state.clear()
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    data = await state.get_data()
    user_settings = data["user_settings"]
    project_id = user_settings.get("current_project")
    channels = supabase_db.db.list_channels(project_id=project_id)
    
    text = message.text.strip()
    channel = None
    
    # –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–∞ –ø–æ –Ω–æ–º–µ—Ä—É
    if text.isdigit():
        idx = int(text) - 1
        if 0 <= idx < len(channels):
            channel = channels[idx]
    # –ü–æ–∏—Å–∫ –ø–æ username –∏–ª–∏ ID
    else:
        for ch in channels:
            if (ch.get('username') and f"@{ch['username']}" == text) or \
               str(ch['chat_id']) == text or \
               str(ch['id']) == text:
                channel = ch
                break
    
    if not channel:
        available_channels = ", ".join([f"{i+1}" for i in range(len(channels))])
        await message.answer(
            f"‚ùå **–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n"
            f"‚Ä¢ –ù–æ–º–µ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤: {available_channels}\n"
            f"‚Ä¢ @username –∫–∞–Ω–∞–ª–∞\n"
            f"‚Ä¢ `skip` - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
            parse_mode="Markdown"
        )
        return
    
    data["changes"]["channel_id"] = channel['id']
    data["changes"]["chat_id"] = channel.get('chat_id')
    await state.set_data(data)
    
    await start_edit_preview_step(message, state, lang)

@router.callback_query(F.data.startswith("edit_channel_select:"))
async def handle_edit_channel_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    channel_id = int(callback.data.split(":", 1)[1])
    channel = supabase_db.db.get_channel(channel_id)
    
    data = await state.get_data()
    data["changes"]["channel_id"] = channel_id
    if channel:
        data["changes"]["chat_id"] = channel.get('chat_id')
    await state.set_data(data)
    
    await callback.answer()
    await start_edit_preview_step(callback.message, state, lang)

async def start_edit_preview_step(message: Message, state: FSMContext, lang: str):
    """–®–∞–≥ 7: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    await state.set_state(EditPost.confirm)
    
    data = await state.get_data()
    original_post = data["original_post"]
    changes = data["changes"]
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–≤—å—é (–∫–æ–º–±–∏–Ω–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª + –∏–∑–º–µ–Ω–µ–Ω–∏—è)
    preview_data = original_post.copy()
    preview_data.update(changes)
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞
    await send_edit_post_preview(message, preview_data)
    
    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    info_text = f"üëÄ **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π - –ü–æ—Å—Ç #{original_post['id']}**\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    changes_list = []
    
    if "text" in changes:
        changes_list.append("üìù –¢–µ–∫—Å—Ç")
    if "media_id" in changes:
        changes_list.append("üñº –ú–µ–¥–∏–∞")
    if "parse_mode" in changes:
        changes_list.append("üé® –§–æ—Ä–º–∞—Ç")
    if "buttons" in changes:
        changes_list.append("üîò –ö–Ω–æ–ø–∫–∏")
    if "publish_time" in changes or "draft" in changes:
        changes_list.append("‚è∞ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
    if "channel_id" in changes:
        changes_list.append("üì∫ –ö–∞–Ω–∞–ª")
    
    if changes_list:
        info_text += f"**–ò–∑–º–µ–Ω–µ–Ω–∏—è:** {', '.join(changes_list)}\n\n"
    else:
        info_text += "**–ò–∑–º–µ–Ω–µ–Ω–∏—è:** –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    channel_id = preview_data.get("channel_id")
    if channel_id:
        channel = supabase_db.db.get_channel(channel_id)
        if channel:
            info_text += f"**–ö–∞–Ω–∞–ª:** {channel['name']}\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    if preview_data.get("draft"):
        info_text += "**–°—Ç–∞—Ç—É—Å:** –ß–µ—Ä–Ω–æ–≤–∏–∫\n"
    elif preview_data.get("publish_time"):
        user_settings = data["user_settings"]
        try:
            pub_time = preview_data["publish_time"]
            if isinstance(pub_time, datetime):
                tz_name = user_settings.get("timezone", "UTC")
                try:
                    tz = ZoneInfo(tz_name)
                    local_time = pub_time.astimezone(tz)
                    time_str = local_time.strftime('%Y-%m-%d %H:%M')
                    info_text += f"**–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:** {time_str} ({tz_name})\n"
                except:
                    time_str = pub_time.strftime('%Y-%m-%d %H:%M UTC')
                    info_text += f"**–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:** {time_str}\n"
            else:
                info_text += f"**–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:** {pub_time}\n"
        except:
            info_text += "**–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:** —Ç–µ–∫—É—â–µ–µ –∏–∑ –ø–æ—Å—Ç–∞\n"
    
    if preview_data.get("parse_mode"):
        info_text += f"**–§–æ—Ä–º–∞—Ç:** {preview_data['parse_mode']}\n"
    
    info_text += (
        f"\n**–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        f"‚Ä¢ `confirm` –∏–ª–∏ `–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å` - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
        f"‚Ä¢ `cancel` –∏–ª–∏ `–æ—Ç–º–µ–Ω–∞` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
        f"‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π."
    )
    
    keyboard = get_preview_keyboard(lang)
    await message.answer(info_text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(EditPost.confirm, F.text)
async def handle_edit_preview_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ"""
    user = supabase_db.db.get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    if is_command(message.text, "confirm"):
        await handle_edit_confirmation_text(message, state)
        return
    
    if is_command(message.text, "cancel"):
        await state.clear()
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    await message.answer(
        "‚ùå **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞**\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ `confirm` - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
        "‚Ä¢ `cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å",
        parse_mode="Markdown"
    )

async def send_edit_post_preview(message: Message, preview_data: dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–≤—å—é –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    text = preview_data.get("text", "")
    media_id = preview_data.get("media_id")
    media_type = preview_data.get("media_type")
    parse_mode = preview_data.get("parse_mode")
    buttons = preview_data.get("buttons")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
    markup = None
    if buttons:
        kb = []
        if isinstance(buttons, str):
            try:
                buttons = json.loads(buttons)
            except:
                buttons = []
        
        for btn in buttons:
            if isinstance(btn, dict) and btn.get("text") and btn.get("url"):
                kb.append([InlineKeyboardButton(text=btn["text"], url=btn["url"])])
        if kb:
            markup = InlineKeyboardMarkup(inline_keyboard=kb)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º parse_mode
    if parse_mode == "HTML":
        pm = "HTML"
    elif parse_mode == "Markdown":
        pm = "Markdown"
    else:
        pm = None
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–≤—å—é
    try:
        if media_id and media_type:
            if media_type == "photo":
                await message.answer_photo(
                    media_id,
                    caption=text or None,
                    parse_mode=pm,
                    reply_markup=markup
                )
            elif media_type == "video":
                await message.answer_video(
                    media_id,
                    caption=text or None,
                    parse_mode=pm,
                    reply_markup=markup
                )
            elif media_type == "animation":
                await message.answer_animation(
                    media_id,
                    caption=text or None,
                    parse_mode=pm,
                    reply_markup=markup
                )
        else:
            await message.answer(
                text or "üìù *[–ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞]*",
                parse_mode=pm or "Markdown",
                reply_markup=markup
            )
    except Exception as e:
        await message.answer(
            f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞**\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é: {str(e)}\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.",
            parse_mode="Markdown"
        )

@router.callback_query(F.data == "edit_confirm")
async def handle_edit_confirmation(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await handle_edit_confirmation_text(callback.message, state, is_callback=True)
    await callback.answer()

async def handle_edit_confirmation_text(message: Message, state: FSMContext, is_callback: bool = False):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    try:
        data = await state.get_data()
        post_id = data["post_id"]
        changes = data["changes"]
        user = data["user_settings"]
        lang = user.get("language", "ru") if user else "ru"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç –µ—â–µ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
        latest_post = supabase_db.db.get_post(post_id)
        if not latest_post:
            error_text = "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            if is_callback:
                await message.edit_text(error_text, parse_mode="Markdown")
            else:
                await message.answer(error_text, parse_mode="Markdown")
            await state.clear()
            return
        
        if latest_post.get("published"):
            error_text = "‚ùå –ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç"
            if is_callback:
                await message.edit_text(error_text, parse_mode="Markdown")
            else:
                await message.answer(error_text, parse_mode="Markdown")
            await state.clear()
            return
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        updates = {}
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        for key, value in changes.items():
            if key == "publish_time" and isinstance(value, datetime):
                updates[key] = value.isoformat()
            elif key == "buttons" and isinstance(value, list):
                updates[key] = json.dumps(value) if value else None
            else:
                updates[key] = value
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤—Ä–µ–º—è
        if "publish_time" in updates:
            updates["notified"] = False
        
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ {post_id}: {updates}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if updates:
            supabase_db.db.update_post(post_id, updates)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        changes_count = len(changes)
        if changes_count == 0:
            response_text = f"‚ÑπÔ∏è **–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã**\n\n–ü–æ—Å—Ç #{post_id} –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."
        else:
            response_text = (
                f"‚úÖ **–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã**\n\n"
                f"–ü–æ—Å—Ç #{post_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                f"–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {changes_count}\n\n"
                f"**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n"
                f"‚Ä¢ `/view {post_id}` - –ø—Ä–æ—Å–º–æ—Ç—Ä\n"
                f"‚Ä¢ `/edit {post_id}` - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞\n"
                f"‚Ä¢ `/delete {post_id}` - —É–¥–∞–ª–∏—Ç—å\n"
                f"‚Ä¢ `/list` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"post_full_view:{post_id}"),
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"post_edit_cmd:{post_id}")
            ],
            [
                InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu"),
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ])
        
        if is_callback:
            await message.edit_text(response_text, parse_mode="Markdown", reply_markup=keyboard)
        else:
            await message.answer(response_text, parse_mode="Markdown", reply_markup=keyboard)
        
        await state.clear()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
        
        error_text = (
            f"‚ùå **–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è**\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è: {str(e)}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        
        try:
            if is_callback:
                await message.edit_text(error_text, parse_mode="Markdown")
            else:
                await message.answer(error_text, parse_mode="Markdown")
        except:
            pass
        
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@router.callback_query(F.data == "edit_nav_skip")
async def handle_edit_nav_skip(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    current_state = await state.get_state()
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    data = await state.get_data()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    if current_state == EditPost.text:
        await start_edit_media_step(callback.message, state, lang)
    elif current_state == EditPost.media:
        await start_edit_format_step(callback.message, state, lang)
    elif current_state == EditPost.format:
        await start_edit_buttons_step(callback.message, state, lang)
    elif current_state == EditPost.buttons:
        await start_edit_time_step(callback.message, state, lang)
    elif current_state == EditPost.time:
        await start_edit_channel_step(callback.message, state, lang)
    elif current_state == EditPost.channel:
        await start_edit_preview_step(callback.message, state, lang)
    
    await callback.answer()

@router.callback_query(F.data == "edit_nav_cancel")
async def handle_edit_nav_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n"
        "–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.",
        parse_mode="Markdown"
    )
    await callback.answer()
