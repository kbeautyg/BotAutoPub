from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime
from zoneinfo import ZoneInfo
from states import PostCreationFlow
import supabase_db
import json
import re
import html

router = Router()

def get_edit_main_menu_keyboard(post_id: int, lang: str = "ru"):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç", callback_data=f"edit_field:{post_id}:text"),
            InlineKeyboardButton(text="üñº –ú–µ–¥–∏–∞", callback_data=f"edit_field:{post_id}:media")
        ],
        [
            InlineKeyboardButton(text="üé® –§–æ—Ä–º–∞—Ç", callback_data=f"edit_field:{post_id}:format"),
            InlineKeyboardButton(text="üîò –ö–Ω–æ–ø–∫–∏", callback_data=f"edit_field:{post_id}:buttons")
        ],
        [
            InlineKeyboardButton(text="‚è∞ –í—Ä–µ–º—è", callback_data=f"edit_field:{post_id}:time"),
            InlineKeyboardButton(text="üì∫ –ö–∞–Ω–∞–ª", callback_data=f"edit_field:{post_id}:channel")
        ],
        [
            InlineKeyboardButton(text="üîÑ –ü–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ", callback_data=f"edit_recreate:{post_id}")
        ],
        [
            InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞", callback_data=f"post_full_view:{post_id}"),
            InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")
        ]
    ])

def format_post_summary(post: dict, channel: dict = None) -> str:
    """–°–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    text = "üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞**\n\n"
    
    if channel:
        text += f"**–ö–∞–Ω–∞–ª:** {channel['name']}\n"
    
    if post.get("published"):
        text += "**–°—Ç–∞—Ç—É—Å:** ‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)\n"
    elif post.get("draft"):
        text += "**–°—Ç–∞—Ç—É—Å:** üìù –ß–µ—Ä–Ω–æ–≤–∏–∫\n"
    elif post.get("publish_time"):
        text += f"**–°—Ç–∞—Ç—É—Å:** ‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω\n"
    
    # –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
    if post.get("text"):
        content_preview = post["text"][:100] + "..." if len(post["text"]) > 100 else post["text"]
        text += f"**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:** {content_preview}\n"
    
    if post.get("media_type"):
        text += f"**–ú–µ–¥–∏–∞:** {post['media_type']}\n"
    
    if post.get("parse_mode"):
        text += f"**–§–æ—Ä–º–∞—Ç:** {post['parse_mode']}\n"
    
    text += "\n**–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:**"
    
    return text

@router.message(Command("edit"))
async def cmd_edit_post(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –ø–æ ID"""
    user_id = message.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer(
            "‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã**\n\n"
            "`/edit <ID –ø–æ—Å—Ç–∞>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/edit 123`",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        return
    
    try:
        post_id = int(args[1])
    except ValueError:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer("‚ùå ID –ø–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º", reply_markup=keyboard)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
    post = supabase_db.db.get_post(post_id)
    if not post:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer(f"‚ùå –ü–æ—Å—Ç #{post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=keyboard)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª
    if not supabase_db.db.is_channel_admin(post.get("channel_id"), user_id):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É", reply_markup=keyboard)
        return
    
    if post.get("published"):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞", callback_data=f"post_full_view:{post_id}")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")]
        ])
        await message.answer("‚ùå –ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç", reply_markup=keyboard)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    channel = supabase_db.db.get_channel(post.get("channel_id"))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await show_edit_main_menu(message, post_id, post, user, lang)

async def show_edit_main_menu(message: Message, post_id: int, post: dict, user: dict, lang: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    channel = supabase_db.db.get_channel(post.get("channel_id"))
    
    text = format_post_summary(post, channel)
    keyboard = get_edit_main_menu_keyboard(post_id, lang)
    
    if hasattr(message, 'edit_text'):
        try:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        except:
            await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö callback'–æ–≤ –∏–∑ main.py
async def handle_edit_field_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ main.py)"""
    parts = callback.data.split(":")
    post_id = int(parts[1])
    field = parts[2]
    
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
    post = supabase_db.db.get_post(post_id)
    if not post:
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not supabase_db.db.is_channel_admin(post.get("channel_id"), user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É!")
        return
    
    if post.get("published"):
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç!")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.set_data({
        "edit_mode": True,
        "post_id": post_id,
        "original_post": post,
        "current_field": field,
        "changes": {}
    })
    
    await start_field_edit(callback.message, state, field, post, user)
    await callback.answer()

async def handle_edit_recreate(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    post_id = int(callback.data.split(":", 1)[1])
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
    post = supabase_db.db.get_post(post_id)
    if not post:
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not supabase_db.db.is_channel_admin(post.get("channel_id"), user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É!")
        return
    
    if post.get("published"):
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç!")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ
    await state.set_data({
        "edit_mode": True,
        "recreate_mode": True,
        "post_id": post_id,
        "user_id": user_id,
        "text": post.get("text"),
        "media_type": post.get("media_type"),
        "media_file_id": post.get("media_id"),
        "parse_mode": post.get("parse_mode", "HTML"),
        "buttons": json.loads(post["buttons"]) if post.get("buttons") and isinstance(post["buttons"], str) else post.get("buttons"),
        "publish_time": post.get("publish_time"),
        "repeat_interval": post.get("repeat_interval"),
        "channel_id": post.get("channel_id"),
        "draft": post.get("draft", False),
        "step_history": [],
        "current_step": "step_text"
    })
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
    from scheduled_posts import start_text_step
    await state.set_state(PostCreationFlow.step_text)
    
    await callback.message.edit_text(
        f"üîÑ **–ü–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–Ω–æ–≤–æ –ø—Ä–æ–π—Ç–∏ –≤—Å–µ —à–∞–≥–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.\n"
        f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –æ—Å–Ω–æ–≤–∞.\n\n"
        f"–ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞:",
        parse_mode="Markdown"
    )
    
    await start_text_step(callback.message, state, user.get("language", "ru"))
    await callback.answer()

async def handle_edit_menu_return(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    post_id = data.get("post_id")
    
    if not post_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ—Å—Ç–∞")
        return
    
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    post = supabase_db.db.get_post(post_id)
    
    if not post:
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    await show_edit_main_menu(callback.message, post_id, post, user, user.get("language", "ru"))
    await callback.answer()

async def handle_edit_confirm_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    data = await state.get_data()
    post_id = data.get("post_id")
    changes = data.get("changes", {})
    
    if not post_id or not changes:
        await callback.answer("‚ùå –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    success = supabase_db.db.update_post(post_id, changes)
    
    if success:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞", callback_data=f"post_full_view:{post_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit_menu:{post_id}")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")]
        ])
        
        await callback.message.edit_text(
            f"‚úÖ **–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã**\n\n"
            f"–ü–æ—Å—Ç #{post_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    else:
        await callback.message.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è**\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.",
            parse_mode="Markdown"
        )
    
    await state.clear()
    await callback.answer()

async def handle_edit_skip(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è"""
    data = await state.get_data()
    post_id = data.get("post_id")
    
    if not post_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ—Å—Ç–∞")
        return
    
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    post = supabase_db.db.get_post(post_id)
    
    await show_edit_main_menu(callback.message, post_id, post, user, user.get("language", "ru"))
    await callback.answer()

async def handle_edit_save(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—è"""
    data = await state.get_data()
    post_id = data.get("post_id")
    field = data.get("current_field")
    new_value = data.get("new_value")
    
    if not post_id or not field:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    changes = {field: new_value}
    success = supabase_db.db.update_post(post_id, changes)
    
    if success:
        user_id = callback.from_user.id
        user = supabase_db.db.get_user(user_id)
        post = supabase_db.db.get_post(post_id)
        
        await show_edit_main_menu(callback.message, post_id, post, user, user.get("language", "ru"))
        await callback.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

async def handle_edit_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    data = await state.get_data()
    post_id = data.get("post_id")
    
    await state.clear()
    
    if post_id:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞", callback_data=f"post_full_view:{post_id}")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            "‚ùå **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n"
            "–í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω—ã.",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await callback.message.edit_text(
            "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=keyboard
        )
    
    await callback.answer()

async def start_field_edit(message: Message, state: FSMContext, field: str, post: dict, user: dict):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è"""
    lang = user.get("language", "ru")
    
    if field == "text":
        await start_edit_text_step(message, state, lang)
    elif field == "media":
        await start_edit_media_step(message, state, lang)
    elif field == "format":
        await start_edit_format_step(message, state, lang)
    elif field == "buttons":
        await start_edit_buttons_step(message, state, lang)
    elif field == "time":
        await start_edit_time_step(message, state, lang)
    elif field == "channel":
        await start_edit_channel_step(message, state, lang)

async def start_edit_text_step(message: Message, state: FSMContext, lang: str):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
    await state.set_state(PostCreationFlow.step_text)
    
    data = await state.get_data()
    post = data.get("original_post", {})
    current_text = post.get("text", "")
    
    text = (
        "üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞**\n\n"
        f"**–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:**\n"
        f"{current_text[:300]}{'...' if len(current_text) > 300 else ''}\n\n"
        f"**–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç** –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"‚Ä¢ `skip` - –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç\n"
        f"‚Ä¢ `clear` - —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç\n"
        f"‚Ä¢ `cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π", callback_data="edit_skip")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_clear_text")],
        [InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é", callback_data=f"edit_menu:{data.get('post_id')}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="edit_cancel")]
    ])
    
    if hasattr(message, 'edit_text'):
        try:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        except:
            await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

async def start_edit_media_step(message: Message, state: FSMContext, lang: str):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –ø–æ—Å—Ç–∞"""
    await state.set_state(PostCreationFlow.step_media)
    
    data = await state.get_data()
    post = data.get("original_post", {})
    current_media = post.get("media_type", "–Ω–µ—Ç")
    
    text = (
        "üñº **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞**\n\n"
        f"**–¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞:** {current_media}\n\n"
        f"**–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –º–µ–¥–∏–∞** (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/GIF) –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"‚Ä¢ `skip` - –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞\n"
        f"‚Ä¢ `remove` - —É–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞\n"
        f"‚Ä¢ `cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ", callback_data="edit_skip")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞", callback_data="edit_remove_media")],
        [InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é", callback_data=f"edit_menu:{data.get('post_id')}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="edit_cancel")]
    ])
    
    if hasattr(message, 'edit_text'):
        try:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        except:
            await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

async def start_edit_format_step(message: Message, state: FSMContext, lang: str):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ—Å—Ç–∞"""
    data = await state.get_data()
    post = data.get("original_post", {})
    current_format = post.get("parse_mode", "HTML")
    
    text = (
        "üé® **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞**\n\n"
        f"**–¢–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç:** {current_format}\n\n"
        f"**–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç:**"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù HTML", callback_data="edit_format_html")],
        [InlineKeyboardButton(text="üìã Markdown", callback_data="edit_format_markdown")],
        [InlineKeyboardButton(text="üìÑ –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="edit_format_none")],
        [InlineKeyboardButton(text="‚è≠Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π", callback_data="edit_skip")],
        [InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é", callback_data=f"edit_menu:{data.get('post_id')}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="edit_cancel")]
    ])
    
    if hasattr(message, 'edit_text'):
        try:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        except:
            await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

async def start_edit_buttons_step(message: Message, state: FSMContext, lang: str):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å—Ç–∞"""
    await state.set_state(PostCreationFlow.step_buttons)
    
    data = await state.get_data()
    post = data.get("original_post", {})
    
    current_buttons = []
    if post.get("buttons"):
        try:
            if isinstance(post["buttons"], str):
                current_buttons = json.loads(post["buttons"])
            else:
                current_buttons = post["buttons"]
        except:
            current_buttons = []
    
    buttons_text = "\n".join([f"‚Ä¢ {btn.get('text', '')} | {btn.get('url', '')}" for btn in current_buttons]) if current_buttons else "–ù–µ—Ç –∫–Ω–æ–ø–æ–∫"
    
    text = (
        "üîò **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫**\n\n"
        f"**–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:**\n{buttons_text}\n\n"
        f"**–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏** –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"`–¢–µ–∫—Å—Ç | URL`\n"
        f"–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ\n\n"
        f"–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"‚Ä¢ `skip` - –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏\n"
        f"‚Ä¢ `remove` - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏\n"
        f"‚Ä¢ `cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ", callback_data="edit_skip")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏", callback_data="edit_remove_buttons")],
        [InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é", callback_data=f"edit_menu:{data.get('post_id')}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="edit_cancel")]
    ])
    
    if hasattr(message, 'edit_text'):
        try:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        except:
            await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

async def start_edit_time_step(message: Message, state: FSMContext, lang: str):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    data = await state.get_data()
    post = data.get("original_post", {})
    
    if post.get("draft"):
        current_time = "–ß–µ—Ä–Ω–æ–≤–∏–∫"
    elif post.get("publish_time"):
        current_time = f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {post['publish_time']}"
    else:
        current_time = "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è"
    
    text = (
        "‚è∞ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏**\n\n"
        f"**–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:** {current_time}\n\n"
        f"**–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É:**\n"
        f"–§–æ—Ä–º–∞—Ç: `YYYY-MM-DD HH:MM`\n"
        f"–ü—Ä–∏–º–µ—Ä: `2024-12-25 15:30`\n\n"
        f"–ö–æ–º–∞–Ω–¥—ã:\n"
        f"‚Ä¢ `now` - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å\n"
        f"‚Ä¢ `draft` - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫\n"
        f"‚Ä¢ `skip` - –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è\n"
        f"‚Ä¢ `cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –°–µ–π—á–∞—Å", callback_data="edit_time_now")],
        [InlineKeyboardButton(text="üìù –ß–µ—Ä–Ω–æ–≤–∏–∫", callback_data="edit_time_draft")],
        [InlineKeyboardButton(text="‚è≠Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ", callback_data="edit_skip")],
        [InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é", callback_data=f"edit_menu:{data.get('post_id')}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="edit_cancel")]
    ])
    
    if hasattr(message, 'edit_text'):
        try:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        except:
            await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

async def start_edit_channel_step(message: Message, state: FSMContext, lang: str):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ—Å—Ç–∞"""
    data = await state.get_data()
    post = data.get("original_post", {})
    user_id = data.get("original_post", {}).get("created_by")
    
    if not user_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–æ–∑–¥–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    channels = supabase_db.db.get_user_channels(user_id)
    current_channel = supabase_db.db.get_channel(post.get("channel_id"))
    
    text = (
        "üì∫ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞**\n\n"
        f"**–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª:** {current_channel['name'] if current_channel else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}\n\n"
        f"**–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª:**\n\n"
    )
    
    buttons = []
    for i, channel in enumerate(channels, 1):
        admin_status = "‚úÖ" if channel.get('is_admin_verified') else "‚ùì"
        is_current = channel['id'] == post.get("channel_id")
        text += f"{i}. {admin_status} {channel['name']}" + (" (—Ç–µ–∫—É—â–∏–π)" if is_current else "") + "\n"
        
        buttons.append([InlineKeyboardButton(
            text=f"{admin_status} {channel['name']}" + (" ‚úì" if is_current else ""),
            callback_data=f"edit_channel_select:{channel['id']}"
        )])
    
    buttons.extend([
        [InlineKeyboardButton(text="‚è≠Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π", callback_data="edit_skip")],
        [InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é", callback_data=f"edit_menu:{data.get('post_id')}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="edit_cancel")]
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    if hasattr(message, 'edit_text'):
        try:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        except:
            await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è callback'–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("edit_format_"))
async def handle_edit_format_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
    format_map = {
        "edit_format_html": "HTML",
        "edit_format_markdown": "Markdown",
        "edit_format_none": None
    }
    
    new_format = format_map.get(callback.data, "HTML")
    data = await state.get_data()
    post_id = data.get("post_id")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    changes = {"parse_mode": new_format}
    success = supabase_db.db.update_post(post_id, changes)
    
    if success:
        user_id = callback.from_user.id
        user = supabase_db.db.get_user(user_id)
        post = supabase_db.db.get_post(post_id)
        
        await show_edit_main_menu(callback.message, post_id, post, user, user.get("language", "ru"))
        await callback.answer(f"‚úÖ –§–æ—Ä–º–∞—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_format or '–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'}")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

@router.callback_query(F.data.startswith("edit_time_"))
async def handle_edit_time_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    action = callback.data.split("_")[-1]  # now, draft
    data = await state.get_data()
    post_id = data.get("post_id")
    
    if action == "now":
        changes = {
            "publish_time": datetime.now(ZoneInfo("UTC")).isoformat(),
            "draft": False
        }
    elif action == "draft":
        changes = {
            "publish_time": None,
            "draft": True
        }
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    success = supabase_db.db.update_post(post_id, changes)
    
    if success:
        user_id = callback.from_user.id
        user = supabase_db.db.get_user(user_id)
        post = supabase_db.db.get_post(post_id)
        
        await show_edit_main_menu(callback.message, post_id, post, user, user.get("language", "ru"))
        status = "–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏" if action == "now" else "—á–µ—Ä–Ω–æ–≤–∏–∫–∞"
        await callback.answer(f"‚úÖ –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {status}")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

@router.callback_query(F.data.startswith("edit_channel_select:"))
async def handle_edit_channel_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞"""
    channel_id = int(callback.data.split(":", 1)[1])
    data = await state.get_data()
    post_id = data.get("post_id")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è chat_id
    new_channel = supabase_db.db.get_channel(channel_id)
    if not new_channel:
        await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    changes = {
        "channel_id": channel_id,
        "chat_id": new_channel["chat_id"]
    }
    success = supabase_db.db.update_post(post_id, changes)
    
    if success:
        user_id = callback.from_user.id
        user = supabase_db.db.get_user(user_id)
        post = supabase_db.db.get_post(post_id)
        
        await show_edit_main_menu(callback.message, post_id, post, user, user.get("language", "ru"))
        await callback.answer(f"‚úÖ –ö–∞–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_channel['name']}")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è/–æ—á–∏—Å—Ç–∫–∏
@router.callback_query(F.data == "edit_clear_text")
async def handle_edit_clear_text(callback: CallbackQuery, state: FSMContext):
    """–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞"""
    data = await state.get_data()
    post_id = data.get("post_id")
    
    changes = {"text": None}
    success = supabase_db.db.update_post(post_id, changes)
    
    if success:
        user_id = callback.from_user.id
        user = supabase_db.db.get_user(user_id)
        post = supabase_db.db.get_post(post_id)
        
        await show_edit_main_menu(callback.message, post_id, post, user, user.get("language", "ru"))
        await callback.answer("‚úÖ –¢–µ–∫—Å—Ç —É–¥–∞–ª–µ–Ω")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

@router.callback_query(F.data == "edit_remove_media")
async def handle_edit_remove_media(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞ –ø–æ—Å—Ç–∞"""
    data = await state.get_data()
    post_id = data.get("post_id")
    
    changes = {
        "media_type": None,
        "media_id": None
    }
    success = supabase_db.db.update_post(post_id, changes)
    
    if success:
        user_id = callback.from_user.id
        user = supabase_db.db.get_user(user_id)
        post = supabase_db.db.get_post(post_id)
        
        await show_edit_main_menu(callback.message, post_id, post, user, user.get("language", "ru"))
        await callback.answer("‚úÖ –ú–µ–¥–∏–∞ —É–¥–∞–ª–µ–Ω–æ")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

@router.callback_query(F.data == "edit_remove_buttons")
async def handle_edit_remove_buttons(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å—Ç–∞"""
    data = await state.get_data()
    post_id = data.get("post_id")
    
    changes = {"buttons": None}
    success = supabase_db.db.update_post(post_id, changes)
    
    if success:
        user_id = callback.from_user.id
        user = supabase_db.db.get_user(user_id)
        post = supabase_db.db.get_post(post_id)
        
        await show_edit_main_menu(callback.message, post_id, post, user, user.get("language", "ru"))
        await callback.answer("‚úÖ –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
@router.message(PostCreationFlow.step_text, F.text)
async def handle_edit_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if not data.get("edit_mode"):
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    post_id = data.get("post_id")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text.lower().strip() in ["skip", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]:
        user_id = message.from_user.id
        user = supabase_db.db.get_user(user_id)
        post = supabase_db.db.get_post(post_id)
        await show_edit_main_menu(message, post_id, post, user, user.get("language", "ru"))
        return
    
    if message.text.lower().strip() in ["cancel", "–æ—Ç–º–µ–Ω–∞"]:
        await handle_edit_cancel_text(message, state)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    changes = {"text": message.text}
    success = supabase_db.db.update_post(post_id, changes)
    
    if success:
        user_id = message.from_user.id
        user = supabase_db.db.get_user(user_id)
        post = supabase_db.db.get_post(post_id)
        
        await show_edit_main_menu(message, post_id, post, user, user.get("language", "ru"))
        await message.answer("‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞")

async def handle_edit_cancel_text(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É"""
    data = await state.get_data()
    post_id = data.get("post_id")
    
    await state.clear()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞", callback_data=f"post_full_view:{post_id}" if post_id else "posts_menu")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await message.answer(
        "‚ùå **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n"
        "–í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω—ã.",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
