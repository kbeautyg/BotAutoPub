import json
import re
from aiogram import Router, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime
from zoneinfo import ZoneInfo
from states import EditPost
import supabase_db
from __init__ import TEXTS

router = Router()

TOKEN_MAP = {
    "YYYY": "%Y", "YY": "%y",
    "MM": "%m",   "DD": "%d",
    "HH": "%H",   "hh": "%I",
    "mm": "%M",   "SS": "%S",
    "AM": "%p",   "PM": "%p",
    "am": "%p",   "pm": "%p",
}
_rx = re.compile("|".join(sorted(TOKEN_MAP, key=len, reverse=True)))

def format_to_strptime(date_fmt: str, time_fmt: str) -> str:
    return _rx.sub(lambda m: TOKEN_MAP[m.group(0)], f"{date_fmt} {time_fmt}")

def parse_time(user: dict, text: str):
    date_fmt = user.get("date_format", "YYYY-MM-DD")
    time_fmt = user.get("time_format", "HH:mm")
    tz_name = user.get("timezone", "UTC")
    # Adjust time format for correct parsing
    if "MM" in time_fmt:
        time_fmt = time_fmt.replace("MM", "mm")
    fmt = format_to_strptime(date_fmt, time_fmt)
    dt = datetime.strptime(text, fmt)
    try:
        tz = ZoneInfo(tz_name)
    except Exception:
        tz = ZoneInfo("UTC")
    local_dt = dt.replace(tzinfo=tz)
    utc_dt = local_dt.astimezone(ZoneInfo("UTC"))
    return utc_dt

def format_example(user: dict):
    date_fmt = user.get("date_format", "YYYY-MM-DD")
    time_fmt = user.get("time_format", "HH:mm")
    if "MM" in time_fmt:
        time_fmt = time_fmt.replace("MM", "mm")
    fmt = format_to_strptime(date_fmt, time_fmt)
    now = datetime.now()
    try:
        return now.strftime(fmt)
    except Exception:
        return now.strftime("%Y-%m-%d %H:%M")

def get_edit_navigation_keyboard(lang: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="edit_skip")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="edit_cancel")]
    ])

def get_edit_menu_keyboard(post_id: int, lang: str = "ru") -> InlineKeyboardMarkup:
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç", callback_data=f"edit_start:text:{post_id}"),
            InlineKeyboardButton(text="üñº –ú–µ–¥–∏–∞", callback_data=f"edit_start:media:{post_id}")
        ],
        [
            InlineKeyboardButton(text="üé® –§–æ—Ä–º–∞—Ç", callback_data=f"edit_start:format:{post_id}"),
            InlineKeyboardButton(text="üîò –ö–Ω–æ–ø–∫–∏", callback_data=f"edit_start:buttons:{post_id}")
        ],
        [
            InlineKeyboardButton(text="‚è∞ –í—Ä–µ–º—è", callback_data=f"edit_start:time:{post_id}"),
            InlineKeyboardButton(text="üì∫ –ö–∞–Ω–∞–ª", callback_data=f"edit_start:channel:{post_id}")
        ],
        [
            InlineKeyboardButton(text="üîÑ –ó–∞–Ω–æ–≤–æ", callback_data=f"edit_restart:{post_id}"),
            InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"edit_finish:{post_id}")
        ],
        [
            InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"post_view:{post_id}"),
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ])

def get_format_selection_keyboard(lang: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù HTML", callback_data="format_select:html")],
        [InlineKeyboardButton(text="üìã Markdown", callback_data="format_select:markdown")],
        [InlineKeyboardButton(text="üìÑ –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="format_select:none")],
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="edit_skip")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="edit_cancel")]
    ])

@router.message(Command("edit"))
async def cmd_edit(message: Message, state: FSMContext):
    user_id = message.from_user.id
    args = message.text.split(maxsplit=1)
    lang = "ru"
    user = supabase_db.db.get_user(user_id)
    if user:
        lang = user.get("language", "ru")
    
    if len(args) < 2:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer(
            "‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã**\n\n"
            "`/edit <ID –ø–æ—Å—Ç–∞>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/edit 123`",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        return
    
    try:
        post_id = int(args[1])
    except:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ—Å—Ç–∞**\n\n"
            "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        return
    
    post = supabase_db.db.get_post(post_id)
    # Permission check: user must be member of the project containing this post
    if not post or not supabase_db.db.is_user_in_project(user_id, post.get("project_id", -1)):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer(
            f"‚ùå **–ü–æ—Å—Ç #{post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É.",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        return
    
    if post.get("published"):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞", callback_data=f"post_view:{post_id}")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer(
            f"‚ùå **–ü–æ—Å—Ç #{post_id} —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω**\n\n"
            "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è.",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await show_edit_menu(message, post_id, user, lang)

async def show_edit_menu(message: Message, post_id: int, user: dict, lang: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    post = supabase_db.db.get_post(post_id)
    channel = supabase_db.db.get_channel(post.get("channel_id"))
    
    text = f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
    if channel:
        text += f"üì∫ **–ö–∞–Ω–∞–ª:** {channel['name']}\n"
    
    if post.get("text"):
        preview_text = post["text"][:50] + "..." if len(post["text"]) > 50 else post["text"]
        text += f"üìù **–¢–µ–∫—Å—Ç:** {preview_text}\n"
    else:
        text += "üìù **–¢–µ–∫—Å—Ç:** –Ω–µ –∑–∞–¥–∞–Ω\n"
    
    if post.get("media_id"):
        media_type = post.get("media_type", "–º–µ–¥–∏–∞")
        text += f"üñº **–ú–µ–¥–∏–∞:** {media_type}\n"
    else:
        text += "üñº **–ú–µ–¥–∏–∞:** –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\n"
    
    format_val = post.get("parse_mode") or post.get("format") or "none"
    text += f"üé® **–§–æ—Ä–º–∞—Ç:** {format_val}\n"
    
    if post.get("buttons"):
        try:
            buttons = json.loads(post["buttons"]) if isinstance(post["buttons"], str) else post["buttons"]
            text += f"üîò **–ö–Ω–æ–ø–∫–∏:** {len(buttons)} —à—Ç.\n"
        except:
            text += "üîò **–ö–Ω–æ–ø–∫–∏:** –Ω–µ –∑–∞–¥–∞–Ω—ã\n"
    else:
        text += "üîò **–ö–Ω–æ–ø–∫–∏:** –Ω–µ –∑–∞–¥–∞–Ω—ã\n"
    
    if post.get("publish_time"):
        text += f"‚è∞ **–í—Ä–µ–º—è:** –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ\n"
    elif post.get("draft"):
        text += "‚è∞ **–í—Ä–µ–º—è:** —á–µ—Ä–Ω–æ–≤–∏–∫\n"
    else:
        text += "‚è∞ **–í—Ä–µ–º—è:** –Ω–µ –∑–∞–¥–∞–Ω–æ\n"
    
    text += "\n**–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:**"
    
    keyboard = get_edit_menu_keyboard(post_id, lang)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("edit_start:"))
async def handle_edit_start(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è"""
    data_parts = callback.data.split(":")
    field = data_parts[1]
    post_id = int(data_parts[2])
    
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    post = supabase_db.db.get_post(post_id)
    if not post:
        await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # Initialize FSM for editing
    await state.update_data(
        orig_post=post, 
        user_settings=(user or supabase_db.db.ensure_user(user_id, default_lang=lang)),
        editing_field=field
    )
    
    if field == "text":
        await state.set_state(EditPost.text)
        current_text = post.get("text") or "–Ω–µ –∑–∞–¥–∞–Ω"
        text = (
            f"üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
            f"**–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:**\n{current_text}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:"
        )
        keyboard = get_edit_navigation_keyboard(lang)
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    
    elif field == "media":
        await ask_edit_media(callback.message, state, is_callback=True)
    
    elif field == "format":
        await ask_edit_format(callback.message, state, is_callback=True)
    
    elif field == "buttons":
        await ask_edit_buttons(callback.message, state, is_callback=True)
    
    elif field == "time":
        await ask_edit_time(callback.message, state, is_callback=True)
    
    elif field == "channel":
        await ask_edit_channel(callback.message, state, is_callback=True)
    
    await callback.answer()

@router.callback_query(F.data.startswith("edit_restart:"))
async def handle_edit_restart(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ"""
    post_id = int(callback.data.split(":")[1])
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
    await callback.message.edit_text(
        f"üîÑ **–ü–æ–ª–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/edit {post_id}` –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π.",
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("edit_finish:"))
async def handle_edit_finish(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    post_id = int(callback.data.split(":")[1])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞", callback_data=f"post_view:{post_id}")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        f"‚úÖ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ**\n\n"
        f"–ü–æ—Å—Ç #{post_id} –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "edit_skip")
async def handle_edit_skip(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–µ"""
    data = await state.get_data()
    post = data.get("orig_post", {})
    post_id = post.get("id")
    user = data.get("user_settings", {})
    lang = user.get("language", "ru")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await show_edit_menu(callback.message, post_id, user, lang)
    await state.clear()
    await callback.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ")

@router.callback_query(F.data == "edit_cancel")
async def handle_edit_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    data = await state.get_data()
    post = data.get("orig_post", {})
    post_id = post.get("id")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞", callback_data=f"post_view:{post_id}")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        "‚ùå **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n"
        "–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    
    await state.clear()
    await callback.answer()

@router.message(EditPost.text)
async def edit_step_text(message: Message, state: FSMContext):
    data = await state.get_data()
    post = data.get("orig_post", {})
    post_id = post.get("id")
    user = data.get("user_settings", {})
    lang = user.get("language", "ru")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
    new_text = message.text or ""
    supabase_db.db.update_post(post_id, {"text": new_text})
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit_menu:{post_id}")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"edit_finish:{post_id}")],
        [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"post_view:{post_id}")]
    ])
    
    await message.answer(
        f"‚úÖ **–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω**\n\n"
        f"–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ—Å—Ç–∞ #{post_id}.",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    
    await state.clear()

async def ask_edit_media(message: Message, state: FSMContext, is_callback: bool = False):
    await state.set_state(EditPost.media)
    data = await state.get_data()
    orig_post = data.get("orig_post", {})
    post_id = orig_post.get("id")
    lang = data.get("user_settings", {}).get("language", "ru")
    
    if orig_post.get("media_id"):
        media_type = orig_post.get("media_type", "–º–µ–¥–∏–∞")
        text = (
            f"üñº **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
            f"**–¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞:** {media_type}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ GIF, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:"
        )
    else:
        text = (
            f"üñº **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –∫ –ø–æ—Å—Ç—É #{post_id}**\n\n"
            f"**–¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞:** –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ GIF, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:"
        )
    
    keyboard = get_edit_navigation_keyboard(lang)
    
    if is_callback:
        await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(EditPost.media, F.photo)
async def edit_step_media_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    post = data.get("orig_post", {})
    post_id = post.get("id")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–¥–∏–∞ –ø–æ—Å—Ç–∞
    supabase_db.db.update_post(post_id, {
        "media_id": message.photo[-1].file_id,
        "media_type": "photo"
    })
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit_menu:{post_id}")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"edit_finish:{post_id}")],
        [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"post_view:{post_id}")]
    ])
    
    await message.answer(
        f"‚úÖ **–§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ**\n\n"
        f"–ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∫ –ø–æ—Å—Ç—É #{post_id}.",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    
    await state.clear()

@router.message(EditPost.media, F.video)
async def edit_step_media_video(message: Message, state: FSMContext):
    data = await state.get_data()
    post = data.get("orig_post", {})
    post_id = post.get("id")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–¥–∏–∞ –ø–æ—Å—Ç–∞
    supabase_db.db.update_post(post_id, {
        "media_id": message.video.file_id,
        "media_type": "video"
    })
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit_menu:{post_id}")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"edit_finish:{post_id}")],
        [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"post_view:{post_id}")]
    ])
    
    await message.answer(
        f"‚úÖ **–í–∏–¥–µ–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ**\n\n"
        f"–ù–æ–≤–æ–µ –≤–∏–¥–µ–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∫ –ø–æ—Å—Ç—É #{post_id}.",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    
    await state.clear()

@router.message(EditPost.media, F.animation)
async def edit_step_media_animation(message: Message, state: FSMContext):
    data = await state.get_data()
    post = data.get("orig_post", {})
    post_id = post.get("id")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–¥–∏–∞ –ø–æ—Å—Ç–∞
    supabase_db.db.update_post(post_id, {
        "media_id": message.animation.file_id,
        "media_type": "animation"
    })
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit_menu:{post_id}")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"edit_finish:{post_id}")],
        [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"post_view:{post_id}")]
    ])
    
    await message.answer(
        f"‚úÖ **GIF –æ–±–Ω–æ–≤–ª–µ–Ω–æ**\n\n"
        f"–ù–æ–≤—ã–π GIF –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ –ø–æ—Å—Ç—É #{post_id}.",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    
    await state.clear()

async def ask_edit_format(message: Message, state: FSMContext, is_callback: bool = False):
    await state.set_state(EditPost.format)
    data = await state.get_data()
    orig_post = data.get("orig_post", {})
    post_id = orig_post.get("id")
    lang = data.get("user_settings", {}).get("language", "ru")
    
    current_format = orig_post.get("parse_mode") or orig_post.get("format") or "none"
    
    text = (
        f"üé® **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
        f"**–¢–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç:** {current_format}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞:"
    )
    
    keyboard = get_format_selection_keyboard(lang)
    
    if is_callback:
        await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data.startswith("format_select:"))
async def handle_format_select(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
    format_type = callback.data.split(":")[1]
    
    data = await state.get_data()
    post = data.get("orig_post", {})
    post_id = post.get("id")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å—Ç–∞
    supabase_db.db.update_post(post_id, {"parse_mode": format_type})
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit_menu:{post_id}")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"edit_finish:{post_id}")],
        [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"post_view:{post_id}")]
    ])
    
    await callback.message.edit_text(
        f"‚úÖ **–§–æ—Ä–º–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω**\n\n"
        f"–ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç ({format_type}) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ—Å—Ç–∞ #{post_id}.",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    
    await state.clear()
    await callback.answer()

@router.message(EditPost.format)
async def edit_step_format(message: Message, state: FSMContext):
    raw = (message.text or "").strip().lower()
    data = await state.get_data()
    post = data.get("orig_post", {})
    post_id = post.get("id")
    
    new_fmt = None
    if raw:
        if raw.startswith("markdown"):
            new_fmt = "markdown"
        elif raw.startswith("html") or raw.startswith("htm"):
            new_fmt = "html"
        elif raw in ("none", "–±–µ–∑", "–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"):
            new_fmt = "none"
    
    if new_fmt is None:
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π
        new_fmt = (data.get("orig_post", {}).get("parse_mode") or data.get("orig_post", {}).get("format") or "none")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å—Ç–∞
    supabase_db.db.update_post(post_id, {"parse_mode": new_fmt})
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit_menu:{post_id}")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"edit_finish:{post_id}")],
        [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"post_view:{post_id}")]
    ])
    
    await message.answer(
        f"‚úÖ **–§–æ—Ä–º–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω**\n\n"
        f"–ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç ({new_fmt}) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ—Å—Ç–∞ #{post_id}.",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    
    await state.clear()

async def ask_edit_buttons(message: Message, state: FSMContext, is_callback: bool = False):
    await state.set_state(EditPost.buttons)
    data = await state.get_data()
    orig_post = data.get("orig_post", {})
    post_id = orig_post.get("id")
    lang = data.get("user_settings", {}).get("language", "ru")
    
    if orig_post.get("buttons"):
        # Present current buttons list
        btns = orig_post.get("buttons")
        if isinstance(btns, str):
            try:
                btns = json.loads(btns)
            except:
                btns = []
        if not isinstance(btns, list):
            btns = []
        if btns:
            buttons_list = "\n".join([f"‚Ä¢ {b.get('text', '')} | {b.get('url', '')}" if isinstance(b, dict) else f"‚Ä¢ {b}" for b in btns])
        else:
            buttons_list = "–Ω–µ –∑–∞–¥–∞–Ω—ã"
        
        text = (
            f"üîò **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
            f"**–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:**\n{buttons_list}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¢–µ–∫—Å—Ç | URL' (–∫–∞–∂–¥–∞—è –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ):"
        )
    else:
        text = (
            f"üîò **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∫ –ø–æ—Å—Ç—É #{post_id}**\n\n"
            f"**–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:** –Ω–µ –∑–∞–¥–∞–Ω—ã\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¢–µ–∫—Å—Ç | URL' (–∫–∞–∂–¥–∞—è –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ):"
        )
    
    keyboard = get_edit_navigation_keyboard(lang)
    
    if is_callback:
        await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(EditPost.buttons)
async def edit_step_buttons(message: Message, state: FSMContext):
    text = message.text or ""
    data = await state.get_data()
    post = data.get("orig_post", {})
    post_id = post.get("id")
    
    if text.strip().lower() in ("–Ω–µ—Ç", "none", ""):
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        supabase_db.db.update_post(post_id, {"buttons": None})
        status_text = "—É–¥–∞–ª–µ–Ω—ã"
    else:
        lines = [line.strip() for line in text.splitlines() if line.strip()]
        new_buttons = []
        for line in lines:
            parts = line.split("|")
            if len(parts) >= 2:
                btn_text = parts[0].strip()
                btn_url = parts[1].strip()
                if btn_text and btn_url:
                    new_buttons.append({"text": btn_text, "url": btn_url})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å—Ç–∞
        supabase_db.db.update_post(post_id, {"buttons": new_buttons})
        status_text = f"–æ–±–Ω–æ–≤–ª–µ–Ω—ã ({len(new_buttons)} –∫–Ω–æ–ø–æ–∫)"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit_menu:{post_id}")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"edit_finish:{post_id}")],
        [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"post_view:{post_id}")]
    ])
    
    await message.answer(
        f"‚úÖ **–ö–Ω–æ–ø–∫–∏ {status_text}**\n\n"
        f"–ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞ #{post_id} {status_text}.",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    
    await state.clear()

async def ask_edit_time(message: Message, state: FSMContext, is_callback: bool = False):
    await state.set_state(EditPost.time)
    data = await state.get_data()
    orig_post = data.get("orig_post", {})
    post_id = orig_post.get("id")
    user = data.get("user_settings", {}) or {}
    lang = user.get("language", "ru")
    
    if orig_post.get("publish_time"):
        # Show current scheduled time
        orig_time = orig_post.get("publish_time")
        try:
            pub_dt = datetime.fromisoformat(orig_time) if isinstance(orig_time, str) else orig_time
        except:
            pub_dt = datetime.strptime(orig_time, "%Y-%m-%dT%H:%M:%S")
            pub_dt = pub_dt.replace(tzinfo=ZoneInfo("UTC"))
        
        tz_name = user.get("timezone", "UTC")
        try:
            tz = ZoneInfo(tz_name)
        except:
            tz = ZoneInfo("UTC")
        
        local_dt = pub_dt.astimezone(tz)
        fmt = format_to_strptime(user.get("date_format", "YYYY-MM-DD"), user.get("time_format", "HH:mm"))
        current_time_str = local_dt.strftime(fmt)
        
        text = (
            f"‚è∞ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
            f"**–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:** {current_time_str} ({tz_name})\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ {user.get('date_format', 'YYYY-MM-DD')} {user.get('time_format', 'HH:MM')}\n"
            f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            f"‚Ä¢ `now` - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å\n"
            f"‚Ä¢ `draft` - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫"
        )
    elif orig_post.get("draft"):
        text = (
            f"‚è∞ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
            f"**–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:** —á–µ—Ä–Ω–æ–≤–∏–∫\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ {user.get('date_format', 'YYYY-MM-DD')} {user.get('time_format', 'HH:MM')}\n"
            f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            f"‚Ä¢ `now` - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å\n"
            f"‚Ä¢ `draft` - –æ—Å—Ç–∞–≤–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º"
        )
    else:
        text = (
            f"‚è∞ **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
            f"**–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:** –≤—Ä–µ–º—è –Ω–µ –∑–∞–¥–∞–Ω–æ\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ {user.get('date_format', 'YYYY-MM-DD')} {user.get('time_format', 'HH:MM')}\n"
            f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            f"‚Ä¢ `now` - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å\n"
            f"‚Ä¢ `draft` - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫"
        )
    
    keyboard = get_edit_navigation_keyboard(lang)
    
    if is_callback:
        await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(EditPost.time)
async def edit_step_time(message: Message, state: FSMContext):
    data = await state.get_data()
    user = data.get("user_settings", {}) or {}
    post = data.get("orig_post", {})
    post_id = post.get("id")
    lang = user.get("language", "ru")
    text = (message.text or "").strip().lower()
    
    if text in ("none", "–Ω–µ—Ç", "skip", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        await show_edit_menu(message, post_id, user, lang)
        await state.clear()
        return
    elif text in ("now", "—Å–µ–π—á–∞—Å"):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Å–µ–π—á–∞—Å
        now = datetime.now(ZoneInfo("UTC"))
        supabase_db.db.update_post(post_id, {
            "publish_time": now.isoformat(),
            "draft": False,
            "notified": False
        })
        status_text = "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ–π—á–∞—Å"
    elif text in ("draft", "—á–µ—Ä–Ω–æ–≤–∏–∫"):
        # –î–µ–ª–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º
        supabase_db.db.update_post(post_id, {
            "publish_time": None,
            "draft": True,
            "notified": False
        })
        status_text = "—Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫"
    else:
        try:
            new_time = parse_time(user, message.text)
        except:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"edit_start:time:{post_id}")],
                [InlineKeyboardButton(text="‚úèÔ∏è –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data=f"edit_menu:{post_id}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"edit_finish:{post_id}")]
            ])
            
            example = format_example(user)
            await message.answer(
                f"‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏**\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: {user.get('date_format', 'YYYY-MM-DD')} {user.get('time_format', 'HH:MM')}\n"
                f"–ü—Ä–∏–º–µ—Ä: {example}\n\n"
                f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `now` / `draft`",
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            return
        
        now = datetime.now(ZoneInfo("UTC"))
        if new_time <= now:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"edit_start:time:{post_id}")],
                [InlineKeyboardButton(text="‚úèÔ∏è –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data=f"edit_menu:{post_id}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"edit_finish:{post_id}")]
            ])
            
            await message.answer(
                f"‚ùå **–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º**\n\n"
                f"–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ.",
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        supabase_db.db.update_post(post_id, {
            "publish_time": new_time.isoformat(),
            "draft": False,
            "notified": False
        })
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        tz_name = user.get("timezone", "UTC")
        try:
            tz = ZoneInfo(tz_name)
            local_time = new_time.astimezone(tz)
            fmt = format_to_strptime(user.get("date_format", "YYYY-MM-DD"), user.get("time_format", "HH:mm"))
            time_str = local_time.strftime(fmt)
            status_text = f"–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {time_str} ({tz_name})"
        except:
            status_text = f"–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {new_time.strftime('%Y-%m-%d %H:%M UTC')}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit_menu:{post_id}")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"edit_finish:{post_id}")],
        [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"post_view:{post_id}")]
    ])
    
    await message.answer(
        f"‚úÖ **–í—Ä–µ–º—è {status_text}**\n\n"
        f"–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ #{post_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ.",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    
    await state.clear()

async def ask_edit_channel(message: Message, state: FSMContext, is_callback: bool = False):
    await state.set_state(EditPost.channel)
    data = await state.get_data()
    orig_post = data.get("orig_post", {})
    post_id = orig_post.get("id")
    lang = data.get("user_settings", {}).get("language", "ru")
    
    # List channels available in current project
    user_settings = data.get("user_settings", {})
    project_id = user_settings.get("current_project")
    channels = supabase_db.db.list_channels(project_id=project_id)
    
    if not channels:
        text = (
            f"üì∫ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
            f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ."
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì∫ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="channels_add")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data=f"edit_menu:{post_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"edit_finish:{post_id}")]
        ])
        
        if is_callback:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        else:
            await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
        return
    
    # Determine current channel name for reference
    current_channel_name = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    chan_id = orig_post.get("channel_id")
    chat_id = orig_post.get("chat_id")
    
    for ch in channels:
        if chan_id and ch.get("id") == chan_id:
            current_channel_name = ch.get("name") or str(ch.get("chat_id"))
            break
        if chat_id and ch.get("chat_id") == chat_id:
            current_channel_name = ch.get("name") or str(ch.get("chat_id"))
            break
    
    text = (
        f"üì∫ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
        f"**–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª:** {current_channel_name}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
    buttons = []
    for i, ch in enumerate(channels, 1):
        admin_status = "‚úÖ" if ch.get('is_admin_verified') else "‚ùì"
        name = ch.get("name") or str(ch.get("chat_id"))
        buttons.append([InlineKeyboardButton(
            text=f"{admin_status} {name}", 
            callback_data=f"edit_channel_select:{ch['id']}:{post_id}"
        )])
    
    buttons.append([InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="edit_skip")])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="edit_cancel")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    if is_callback:
        await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data.startswith("edit_channel_select:"))
async def handle_edit_channel_select(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞"""
    data_parts = callback.data.split(":")
    channel_id = int(data_parts[1])
    post_id = int(data_parts[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    channel = supabase_db.db.get_channel(channel_id)
    if not channel:
        await callback.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –ø–æ—Å—Ç–∞
    supabase_db.db.update_post(post_id, {
        "channel_id": channel_id,
        "chat_id": channel.get("chat_id")
    })
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit_menu:{post_id}")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"edit_finish:{post_id}")],
        [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"post_view:{post_id}")]
    ])
    
    await callback.message.edit_text(
        f"‚úÖ **–ö–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω**\n\n"
        f"–ü–æ—Å—Ç #{post_id} —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ: {channel['name']}",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    
    await state.clear()
    await callback.answer()

@router.message(EditPost.channel)
async def choose_edit_channel(message: Message, state: FSMContext):
    data = await state.get_data()
    channels = data.get("_chan_map", [])
    post = data.get("orig_post", {})
    post_id = post.get("id")
    raw = (message.text or "").strip()
    chosen = None
    
    if raw.isdigit():
        idx = int(raw)
        if 1 <= idx <= len(channels):
            chosen = channels[idx - 1]
    else:
        for ch in channels:
            if str(ch["chat_id"]) == raw or (ch["name"] and ("@" + ch["name"]) == raw):
                chosen = ch
                break
    
    if not chosen:
        lang = data.get("user_settings", {}).get("language", "ru")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"edit_start:channel:{post_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data=f"edit_menu:{post_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"edit_finish:{post_id}")]
        ])
        
        await message.answer(
            f"‚ùå **–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –ø–æ—Å—Ç–∞
    supabase_db.db.update_post(post_id, {
        "channel_id": chosen.get("id"),
        "chat_id": chosen.get("chat_id")
    })
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit_menu:{post_id}")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"edit_finish:{post_id}")],
        [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"post_view:{post_id}")]
    ])
    
    await message.answer(
        f"‚úÖ **–ö–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω**\n\n"
        f"–ü–æ—Å—Ç #{post_id} —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ: {chosen.get('name')}",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("edit_menu:"))
async def handle_edit_menu_return(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    post_id = int(callback.data.split(":")[1])
    
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    await show_edit_menu(callback.message, post_id, user, lang)
    await state.clear()
    await callback.answer()
