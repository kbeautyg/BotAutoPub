import json
import re
from aiogram import Router, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime
from zoneinfo import ZoneInfo
from states import EditPost
import supabase_db
from __init__ import TEXTS

router = Router()

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ò–ò-–∞–≥–µ–Ω—Ç–∞
TEXT_COMMANDS = {
    "skip": ["skip", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "/skip"],
    "cancel": ["cancel", "–æ—Ç–º–µ–Ω–∞", "/cancel", "–æ—Ç–º–µ–Ω–∏—Ç—å"],
    "back": ["back", "–Ω–∞–∑–∞–¥", "/back"],
    "next": ["next", "–¥–∞–ª–µ–µ", "/next"],
    "confirm": ["confirm", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "/confirm", "–¥–∞", "yes"],
    "edit": ["edit", "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "/edit"],
    "draft": ["draft", "—á–µ—Ä–Ω–æ–≤–∏–∫"],
    "now": ["now", "—Å–µ–π—á–∞—Å"]
}

def is_command(text: str, command: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π"""
    if not text:
        return False
    text_lower = text.strip().lower()
    return text_lower in TEXT_COMMANDS.get(command, [])

def get_edit_main_menu_keyboard(post_id: int, lang: str = "ru"):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç", callback_data=f"edit_start:text:{post_id}"),
            InlineKeyboardButton(text="üñº –ú–µ–¥–∏–∞", callback_data=f"edit_start:media:{post_id}")
        ],
        [
            InlineKeyboardButton(text="üé® –§–æ—Ä–º–∞—Ç", callback_data=f"edit_start:format:{post_id}"),
            InlineKeyboardButton(text="üîò –ö–Ω–æ–ø–∫–∏", callback_data=f"edit_start:buttons:{post_id}")
        ],
        [
            InlineKeyboardButton(text="‚è∞ –í—Ä–µ–º—è", callback_data=f"edit_start:time:{post_id}"),
            InlineKeyboardButton(text="üì∫ –ö–∞–Ω–∞–ª", callback_data=f"edit_start:channel:{post_id}")
        ],
        [
            InlineKeyboardButton(text="üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"edit_preview:{post_id}"),
            InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"edit_save:{post_id}")
        ],
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"post_view:{post_id}")
        ]
    ])

def get_edit_step_keyboard(post_id: int, step: str, can_skip: bool = True):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —à–∞–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    buttons = []
    
    nav_row = []
    if can_skip:
        nav_row.append(InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"edit_skip:{step}:{post_id}"))
    nav_row.append(InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é", callback_data=f"edit_menu:{post_id}"))
    
    if nav_row:
        buttons.append(nav_row)
    
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"post_view:{post_id}")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_format_edit_keyboard(post_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù HTML", callback_data=f"edit_format_set:html:{post_id}")],
        [InlineKeyboardButton(text="üìã Markdown", callback_data=f"edit_format_set:markdown:{post_id}")],
        [InlineKeyboardButton(text="üìÑ –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data=f"edit_format_set:none:{post_id}")],
        [InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é", callback_data=f"edit_menu:{post_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"post_view:{post_id}")]
    ])

def get_time_edit_keyboard(post_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"edit_time_set:now:{post_id}")],
        [InlineKeyboardButton(text="üìù –°–¥–µ–ª–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º", callback_data=f"edit_time_set:draft:{post_id}")],
        [InlineKeyboardButton(text="‚è∞ –£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è", callback_data=f"edit_time_input:{post_id}")],
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"edit_skip:time:{post_id}")],
        [InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é", callback_data=f"edit_menu:{post_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"post_view:{post_id}")]
    ])

def get_channels_edit_keyboard(channels: list, post_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    buttons = []
    
    for channel in channels:
        admin_status = "‚úÖ" if channel.get('is_admin_verified') else "‚ùì"
        text = f"{admin_status} {channel['name']}"
        buttons.append([InlineKeyboardButton(
            text=text, 
            callback_data=f"edit_channel_set:{channel['id']}:{post_id}"
        )])
    
    buttons.append([InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"edit_skip:channel:{post_id}")])
    buttons.append([InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é", callback_data=f"edit_menu:{post_id}")])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"post_view:{post_id}")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def format_interval(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–∞"""
    if seconds == 0:
        return "–Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è"
    elif seconds % 86400 == 0:
        days = seconds // 86400
        return f"{days}d"
    elif seconds % 3600 == 0:
        hours = seconds // 3600
        return f"{hours}h"
    elif seconds % 60 == 0:
        minutes = seconds // 60
        return f"{minutes}m"
    else:
        return f"{seconds}s"

def parse_time_for_user(time_str: str, user: dict) -> datetime:
    """–ü–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    formats = ["%Y-%m-%d %H:%M", "%d.%m.%Y %H:%M", "%d/%m/%Y %H:%M"]
    
    for fmt in formats:
        try:
            dt = datetime.strptime(time_str.strip(), fmt)
            break
        except ValueError:
            continue
    else:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tz = ZoneInfo(user.get("timezone", "UTC"))
    local_dt = dt.replace(tzinfo=tz)
    utc_dt = local_dt.astimezone(ZoneInfo("UTC"))
    
    return utc_dt

@router.message(Command("edit"))
async def cmd_edit(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    user_id = message.from_user.id
    args = message.text.split(maxsplit=1)
    
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    if len(args) < 2:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await message.answer(
            "‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã**\n\n"
            "`/edit <ID –ø–æ—Å—Ç–∞>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/edit 123`",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        return
    
    try:
        post_id = int(args[1])
    except:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ—Å—Ç–∞**\n\n"
            "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        return
    
    post = supabase_db.db.get_post(post_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    if not post or not supabase_db.db.is_user_in_project(user_id, post.get("project_id", -1)):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await message.answer(
            f"‚ùå **–ü–æ—Å—Ç #{post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n"
            f"–ü–æ—Å—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        return
    
    if post.get("published"):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞", callback_data=f"post_view:{post_id}")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await message.answer(
            f"‚ùå **–ü–æ—Å—Ç #{post_id} —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω**\n\n"
            f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await show_edit_menu(message, post_id, user, lang)

async def show_edit_menu(message: Message, post_id: int, user: dict, lang: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    post = supabase_db.db.get_post(post_id)
    channel = supabase_db.db.get_channel(post.get("channel_id"))
    
    text = f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
    
    # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–µ
    if post.get("text"):
        preview_text = post["text"][:100]
        if len(post["text"]) > 100:
            preview_text += "..."
        text += f"**–¢–µ–∫—Å—Ç:** {preview_text}\n"
    else:
        text += "**–¢–µ–∫—Å—Ç:** _–Ω–µ —É–∫–∞–∑–∞–Ω_\n"
    
    text += f"**–ú–µ–¥–∏–∞:** {'–µ—Å—Ç—å' if post.get('media_id') else '–Ω–µ—Ç'}\n"
    text += f"**–§–æ—Ä–º–∞—Ç:** {post.get('parse_mode', 'HTML')}\n"
    
    if post.get("buttons"):
        try:
            buttons = json.loads(post["buttons"]) if isinstance(post["buttons"], str) else post["buttons"]
            text += f"**–ö–Ω–æ–ø–∫–∏:** {len(buttons)} —à—Ç.\n"
        except:
            text += "**–ö–Ω–æ–ø–∫–∏:** –µ—Å—Ç—å\n"
    else:
        text += "**–ö–Ω–æ–ø–∫–∏:** –Ω–µ—Ç\n"
    
    if channel:
        text += f"**–ö–∞–Ω–∞–ª:** {channel['name']}\n"
    
    if post.get("publish_time"):
        from view_post import format_time_for_user
        formatted_time = format_time_for_user(post['publish_time'], user)
        text += f"**–í—Ä–µ–º—è:** {formatted_time}\n"
    elif post.get("draft"):
        text += "**–°—Ç–∞—Ç—É—Å:** –ß–µ—Ä–Ω–æ–≤–∏–∫\n"
    else:
        text += "**–°—Ç–∞—Ç—É—Å:** –ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω\n"
    
    text += "\n**–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:**"
    
    keyboard = get_edit_main_menu_keyboard(post_id, lang)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("edit_menu:"))
async def callback_edit_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ callback"""
    post_id = int(callback.data.split(":", 1)[1])
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    post = supabase_db.db.get_post(post_id)
    channel = supabase_db.db.get_channel(post.get("channel_id"))
    
    text = f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
    
    # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–µ
    if post.get("text"):
        preview_text = post["text"][:100]
        if len(post["text"]) > 100:
            preview_text += "..."
        text += f"**–¢–µ–∫—Å—Ç:** {preview_text}\n"
    else:
        text += "**–¢–µ–∫—Å—Ç:** _–Ω–µ —É–∫–∞–∑–∞–Ω_\n"
    
    text += f"**–ú–µ–¥–∏–∞:** {'–µ—Å—Ç—å' if post.get('media_id') else '–Ω–µ—Ç'}\n"
    text += f"**–§–æ—Ä–º–∞—Ç:** {post.get('parse_mode', 'HTML')}\n"
    
    if post.get("buttons"):
        try:
            buttons = json.loads(post["buttons"]) if isinstance(post["buttons"], str) else post["buttons"]
            text += f"**–ö–Ω–æ–ø–∫–∏:** {len(buttons)} —à—Ç.\n"
        except:
            text += "**–ö–Ω–æ–ø–∫–∏:** –µ—Å—Ç—å\n"
    else:
        text += "**–ö–Ω–æ–ø–∫–∏:** –Ω–µ—Ç\n"
    
    if channel:
        text += f"**–ö–∞–Ω–∞–ª:** {channel['name']}\n"
    
    if post.get("publish_time"):
        from view_post import format_time_for_user
        formatted_time = format_time_for_user(post['publish_time'], user)
        text += f"**–í—Ä–µ–º—è:** {formatted_time}\n"
    elif post.get("draft"):
        text += "**–°—Ç–∞—Ç—É—Å:** –ß–µ—Ä–Ω–æ–≤–∏–∫\n"
    else:
        text += "**–°—Ç–∞—Ç—É—Å:** –ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω\n"
    
    text += "\n**–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:**"
    
    keyboard = get_edit_main_menu_keyboard(post_id, lang)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

# –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è
@router.callback_query(F.data.startswith("edit_start:"))
async def callback_edit_start_field(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è"""
    parts = callback.data.split(":", 2)
    field = parts[1]
    post_id = int(parts[2])
    
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    post = supabase_db.db.get_post(post_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.set_data({
        "post_id": post_id,
        "editing_field": field,
        "original_post": post
    })
    
    if field == "text":
        await state.set_state(EditPost.text)
        current_text = post.get("text", "")
        
        text = (
            f"üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
            f"**–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:**\n{current_text}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:"
        )
        
        keyboard = get_edit_step_keyboard(post_id, "text", can_skip=True)
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    
    elif field == "media":
        await state.set_state(EditPost.media)
        has_media = bool(post.get("media_id"))
        media_type = post.get("media_type", "–Ω–µ—Ç")
        
        text = (
            f"üñº **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
            f"**–¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞:** {'–µ—Å—Ç—å (' + media_type + ')' if has_media else '–Ω–µ—Ç'}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/GIF –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:"
        )
        
        keyboard = get_edit_step_keyboard(post_id, "media", can_skip=True)
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    
    elif field == "format":
        current_format = post.get("parse_mode", "HTML")
        
        text = (
            f"üé® **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
            f"**–¢–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç:** {current_format}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç:"
        )
        
        keyboard = get_format_edit_keyboard(post_id)
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    
    elif field == "buttons":
        await state.set_state(EditPost.buttons)
        current_buttons = post.get("buttons")
        
        if current_buttons:
            try:
                buttons = json.loads(current_buttons) if isinstance(current_buttons, str) else current_buttons
                buttons_text = "\n".join([f"‚Ä¢ {b['text']} | {b['url']}" for b in buttons])
            except:
                buttons_text = "–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–Ω–æ–ø–æ–∫"
        else:
            buttons_text = "–ù–µ—Ç –∫–Ω–æ–ø–æ–∫"
        
        text = (
            f"üîò **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
            f"**–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:**\n{buttons_text}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            f"`–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | https://example.com`\n"
            f"–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.\n\n"
            f"–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:"
        )
        
        keyboard = get_edit_step_keyboard(post_id, "buttons", can_skip=True)
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    
    elif field == "time":
        text = (
            f"‚è∞ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"
        )
        
        keyboard = get_time_edit_keyboard(post_id)
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    
    elif field == "channel":
        project_id = post.get("project_id")
        channels = supabase_db.db.list_channels(project_id=project_id)
        
        current_channel = supabase_db.db.get_channel(post.get("channel_id"))
        current_name = current_channel.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π") if current_channel else "–ù–µ –≤—ã–±—Ä–∞–Ω"
        
        text = (
            f"üì∫ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
            f"**–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª:** {current_name}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª:"
        )
        
        keyboard = get_channels_edit_keyboard(channels, post_id)
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
@router.message(EditPost.text)
async def handle_edit_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    data = await state.get_data()
    post_id = data.get("post_id")
    
    if is_command(message.text, "skip"):
        await state.clear()
        await show_edit_menu_after_change(message, post_id, "–¢–µ–∫—Å—Ç –æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        return
    
    if is_command(message.text, "cancel"):
        await state.clear()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÄ –ö –ø–æ—Å—Ç—É", callback_data=f"post_view:{post_id}")]
        ])
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboard)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
    supabase_db.db.update_post(post_id, {"text": message.text})
    await state.clear()
    
    await show_edit_menu_after_change(message, post_id, "–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
@router.message(EditPost.media, F.photo | F.video | F.animation)
async def handle_edit_media_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–¥–∏–∞"""
    data = await state.get_data()
    post_id = data.get("post_id")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ ID –º–µ–¥–∏–∞
    if message.photo:
        media_type = "photo"
        media_id = message.photo[-1].file_id
    elif message.video:
        media_type = "video"
        media_id = message.video.file_id
    elif message.animation:
        media_type = "animation"
        media_id = message.animation.file_id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–¥–∏–∞ –ø–æ—Å—Ç–∞
    supabase_db.db.update_post(post_id, {
        "media_type": media_type,
        "media_id": media_id
    })
    await state.clear()
    
    await show_edit_menu_after_change(message, post_id, f"–ú–µ–¥–∏–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ({media_type})")

@router.message(EditPost.media, F.text)
async def handle_edit_media_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–¥–∏–∞"""
    data = await state.get_data()
    post_id = data.get("post_id")
    
    if is_command(message.text, "skip"):
        await state.clear()
        await show_edit_menu_after_change(message, post_id, "–ú–µ–¥–∏–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        return
    
    if is_command(message.text, "cancel"):
        await state.clear()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÄ –ö –ø–æ—Å—Ç—É", callback_data=f"post_view:{post_id}")]
        ])
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboard)
        return
    
    await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ GIF, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã skip/cancel")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
@router.message(EditPost.buttons, F.text)
async def handle_edit_buttons_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    data = await state.get_data()
    post_id = data.get("post_id")
    
    if is_command(message.text, "skip"):
        await state.clear()
        await show_edit_menu_after_change(message, post_id, "–ö–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        return
    
    if is_command(message.text, "cancel"):
        await state.clear()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÄ –ö –ø–æ—Å—Ç—É", callback_data=f"post_view:{post_id}")]
        ])
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboard)
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–Ω–æ–ø–∫–∏
    try:
        buttons = []
        lines = message.text.strip().split('\n')
        
        for line in lines:
            if '|' in line:
                parts = line.split('|', 1)
                text = parts[0].strip()
                url = parts[1].strip()
                if text and url:
                    buttons.append({"text": text, "url": url})
        
        if not buttons:
            await message.answer(
                "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–æ–∫**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–¢–µ–∫—Å—Ç | URL`\n"
                "–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.",
                parse_mode="Markdown"
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å—Ç–∞
        supabase_db.db.update_post(post_id, {"buttons": buttons})
        await state.clear()
        
        await show_edit_menu_after_change(message, post_id, f"–ö–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ({len(buttons)} —à—Ç.)")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–Ω–æ–ø–æ–∫: {str(e)}")

# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
@router.callback_query(F.data.startswith("edit_format_set:"))
async def callback_set_format(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å—Ç–∞"""
    parts = callback.data.split(":", 2)
    format_type = parts[1]
    post_id = int(parts[2])
    
    format_map = {
        "html": "HTML",
        "markdown": "Markdown",
        "none": None
    }
    
    new_format = format_map.get(format_type, "HTML")
    supabase_db.db.update_post(post_id, {"parse_mode": new_format})
    
    await show_edit_menu_after_callback_change(callback, post_id, f"–§–æ—Ä–º–∞—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_format or '–æ–±—ã—á–Ω—ã–π'}")

@router.callback_query(F.data.startswith("edit_time_set:"))
async def callback_set_time_quick(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    parts = callback.data.split(":", 2)
    time_type = parts[1]
    post_id = int(parts[2])
    
    if time_type == "now":
        now = datetime.now(ZoneInfo("UTC"))
        supabase_db.db.update_post(post_id, {
            "publish_time": now,
            "draft": False
        })
        message = "–ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Å–µ–π—á–∞—Å"
    elif time_type == "draft":
        supabase_db.db.update_post(post_id, {
            "publish_time": None,
            "draft": True
        })
        message = "–ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫"
    
    await show_edit_menu_after_callback_change(callback, post_id, message)

@router.callback_query(F.data.startswith("edit_time_input:"))
async def callback_time_input(callback: CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ä—É—á–Ω—É—é"""
    post_id = int(callback.data.split(":", 1)[1])
    
    user = supabase_db.db.get_user(callback.from_user.id)
    tz_name = user.get("timezone", "UTC")
    
    await state.set_data({"post_id": post_id, "editing_field": "time"})
    await state.set_state(EditPost.time)
    
    text = (
        f"üìÖ **–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏**\n\n"
        f"–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz_name}\n\n"
        f"–§–æ—Ä–º–∞—Ç—ã:\n"
        f"‚Ä¢ `2024-12-25 15:30`\n"
        f"‚Ä¢ `25.12.2024 15:30`\n"
        f"‚Ä¢ `25/12/2024 15:30`\n\n"
        f"–ò–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"‚Ä¢ `skip` - –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è\n"
        f"‚Ä¢ `cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )
    
    keyboard = get_edit_step_keyboard(post_id, "time", can_skip=True)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.message(EditPost.time, F.text)
async def handle_edit_time_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    data = await state.get_data()
    post_id = data.get("post_id")
    user = supabase_db.db.get_user(message.from_user.id)
    
    if is_command(message.text, "skip"):
        await state.clear()
        await show_edit_menu_after_change(message, post_id, "–í—Ä–µ–º—è –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        return
    
    if is_command(message.text, "cancel"):
        await state.clear()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÄ –ö –ø–æ—Å—Ç—É", callback_data=f"post_view:{post_id}")]
        ])
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboard)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è
        utc_time = parse_time_for_user(message.text, user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
        if utc_time <= datetime.now(ZoneInfo("UTC")):
            await message.answer("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        supabase_db.db.update_post(post_id, {
            "publish_time": utc_time,
            "draft": False,
            "notified": False
        })
        await state.clear()
        
        await show_edit_menu_after_change(message, post_id, f"–í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {message.text}")
        
    except ValueError:
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ `2024-12-25 15:30`\n"
            "‚Ä¢ `25.12.2024 15:30`\n"
            "‚Ä¢ `25/12/2024 15:30`",
            parse_mode="Markdown"
        )

@router.callback_query(F.data.startswith("edit_channel_set:"))
async def callback_set_channel(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ—Å—Ç–∞"""
    parts = callback.data.split(":", 2)
    channel_id = int(parts[1])
    post_id = int(parts[2])
    
    channel = supabase_db.db.get_channel(channel_id)
    supabase_db.db.update_post(post_id, {"channel_id": channel_id})
    
    channel_name = channel.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π") if channel else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    await show_edit_menu_after_callback_change(callback, post_id, f"–ö–∞–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {channel_name}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞ –∏ –æ—Ç–º–µ–Ω—ã
@router.callback_query(F.data.startswith("edit_skip:"))
async def callback_edit_skip(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è"""
    parts = callback.data.split(":", 2)
    field = parts[1]
    post_id = int(parts[2])
    
    await state.clear()
    await show_edit_menu_after_callback_change(callback, post_id, f"{field.title()} –æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")

# –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
@router.callback_query(F.data.startswith("edit_preview:"))
async def callback_edit_preview(callback: CallbackQuery):
    """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    post_id = int(callback.data.split(":", 1)[1])
    user = supabase_db.db.get_user(callback.from_user.id)
    
    post = supabase_db.db.get_post(post_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
    from view_post import send_post_preview
    await send_post_preview(callback.message, post)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–µ
    channel = supabase_db.db.get_channel(post.get("channel_id"))
    
    info_text = f"üëÄ **–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
    
    if channel:
        info_text += f"**–ö–∞–Ω–∞–ª:** {channel['name']}\n"
    
    if post.get("published"):
        info_text += "**–°—Ç–∞—Ç—É—Å:** ‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω\n"
    elif post.get("draft"):
        info_text += "**–°—Ç–∞—Ç—É—Å:** üìù –ß–µ—Ä–Ω–æ–≤–∏–∫\n"
    elif post.get("publish_time"):
        from view_post import format_time_for_user
        formatted_time = format_time_for_user(post['publish_time'], user)
        info_text += f"**–°—Ç–∞—Ç—É—Å:** ‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {formatted_time}\n"
    
    parse_mode_value = post.get("parse_mode")
    if parse_mode_value:
        info_text += f"**–§–æ—Ä–º–∞—Ç:** {parse_mode_value}\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"edit_menu:{post_id}")],
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data=f"edit_save:{post_id}")],
        [InlineKeyboardButton(text="üëÄ –ö –ø–æ—Å—Ç—É", callback_data=f"post_view:{post_id}")]
    ])
    
    await callback.message.answer(info_text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("edit_save:"))
async def callback_edit_save(callback: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    post_id = int(callback.data.split(":", 1)[1])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞", callback_data=f"post_view:{post_id}")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        f"‚úÖ **–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã**\n\n"
        f"–ü–æ—Å—Ç #{post_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω.",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback.answer()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def show_edit_menu_after_change(message: Message, post_id: int, change_message: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user = supabase_db.db.get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"edit_menu:{post_id}")],
        [InlineKeyboardButton(text="üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"edit_preview:{post_id}")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"edit_save:{post_id}")]
    ])
    
    await message.answer(
        f"‚úÖ **{change_message}**\n\n"
        f"–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

async def show_edit_menu_after_callback_change(callback: CallbackQuery, post_id: int, change_message: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ callback"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"edit_menu:{post_id}")],
        [InlineKeyboardButton(text="üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"edit_preview:{post_id}")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"edit_save:{post_id}")]
    ])
    
    await callback.message.edit_text(
        f"‚úÖ **{change_message}**\n\n"
        f"–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback.answer()
