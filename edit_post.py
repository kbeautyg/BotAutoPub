import json
import re
from aiogram import Router, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime
from zoneinfo import ZoneInfo
from states import EditPost
import supabase_db
from __init__ import TEXTS

router = Router()

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ò–ò-–∞–≥–µ–Ω—Ç–∞
TEXT_COMMANDS = {
    "skip": ["skip", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "/skip"],
    "cancel": ["cancel", "–æ—Ç–º–µ–Ω–∞", "/cancel", "–æ—Ç–º–µ–Ω–∏—Ç—å"],
    "back": ["back", "–Ω–∞–∑–∞–¥", "/back"],
    "confirm": ["confirm", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "/confirm", "–¥–∞", "yes"],
    "now": ["now", "—Å–µ–π—á–∞—Å"],
    "draft": ["draft", "—á–µ—Ä–Ω–æ–≤–∏–∫"]
}

def is_command(text: str, command: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π"""
    if not text:
        return False
    text_lower = text.strip().lower()
    return text_lower in TEXT_COMMANDS.get(command, [])

def get_edit_main_menu_keyboard(post_id: int, lang: str = "ru"):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç", callback_data=f"edit_single:text:{post_id}"),
            InlineKeyboardButton(text="üñº –ú–µ–¥–∏–∞", callback_data=f"edit_single:media:{post_id}")
        ],
        [
            InlineKeyboardButton(text="üé® –§–æ—Ä–º–∞—Ç", callback_data=f"edit_single:format:{post_id}"),
            InlineKeyboardButton(text="üîò –ö–Ω–æ–ø–∫–∏", callback_data=f"edit_single:buttons:{post_id}")
        ],
        [
            InlineKeyboardButton(text="‚è∞ –í—Ä–µ–º—è", callback_data=f"edit_single:time:{post_id}"),
            InlineKeyboardButton(text="üì∫ –ö–∞–Ω–∞–ª", callback_data=f"edit_single:channel:{post_id}")
        ],
        [
            InlineKeyboardButton(text="üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"edit_preview:{post_id}"),
            InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data=f"edit_recreate:{post_id}")
        ],
        [
            InlineKeyboardButton(text="üìã –ö –ø–æ—Å—Ç—É", callback_data=f"post_full_view:{post_id}"),
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ])

def get_field_edit_keyboard(post_id: int, field: str, can_skip: bool = True):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è"""
    buttons = []
    
    if can_skip:
        buttons.append([InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"edit_skip:{post_id}:{field}")])
    
    buttons.append([
        InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data=f"edit_menu:{post_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"edit_cancel:{post_id}")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_format_edit_keyboard(post_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù HTML", callback_data=f"edit_format_set:{post_id}:HTML")],
        [InlineKeyboardButton(text="üìã Markdown", callback_data=f"edit_format_set:{post_id}:Markdown")],
        [InlineKeyboardButton(text="üìÑ –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data=f"edit_format_set:{post_id}:None")],
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"edit_skip:{post_id}:format")],
        [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data=f"edit_menu:{post_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"edit_cancel:{post_id}")]
    ])

def get_time_edit_keyboard(post_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–ø—Ü–∏–π –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"edit_time_set:{post_id}:now")],
        [InlineKeyboardButton(text="üìù –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫", callback_data=f"edit_time_set:{post_id}:draft")],
        [InlineKeyboardButton(text="‚è∞ –í–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è", callback_data=f"edit_time_input:{post_id}")],
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"edit_skip:{post_id}:time")],
        [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data=f"edit_menu:{post_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"edit_cancel:{post_id}")]
    ])

def get_preview_edit_keyboard(post_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data=f"edit_save:{post_id}")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit_menu:{post_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data=f"edit_cancel:{post_id}")]
    ])

def format_interval(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds == 0:
        return "–Ω–µ—Ç"
    elif seconds % 86400 == 0:
        days = seconds // 86400
        return f"{days}d"
    elif seconds % 3600 == 0:
        hours = seconds // 3600
        return f"{hours}h"
    elif seconds % 60 == 0:
        minutes = seconds // 60
        return f"{minutes}m"
    else:
        return f"{seconds}s"

def parse_time_improved(user: dict, text: str):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    try:
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        formats = ["%Y-%m-%d %H:%M", "%d.%m.%Y %H:%M", "%d/%m/%Y %H:%M"]
        
        dt = None
        for fmt in formats:
            try:
                dt = datetime.strptime(text.strip(), fmt)
                break
            except ValueError:
                continue
        
        if dt is None:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tz_name = user.get("timezone", "UTC")
        try:
            tz = ZoneInfo(tz_name)
        except Exception:
            tz = ZoneInfo("UTC")
        
        local_dt = dt.replace(tzinfo=tz)
        utc_dt = local_dt.astimezone(ZoneInfo("UTC"))
        
        return utc_dt
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")

@router.message(Command("edit"))
async def cmd_edit(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    user_id = message.from_user.id
    args = message.text.split(maxsplit=1)
    
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    if len(args) < 2:
        await message.answer(
            "üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/edit <ID –ø–æ—Å—Ç–∞>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/edit 123`",
            parse_mode="Markdown"
        )
        return
    
    try:
        post_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå ID –ø–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
    post = supabase_db.db.get_post(post_id)
    if not post or not supabase_db.db.is_user_in_project(user_id, post.get("project_id", -1)):
        await message.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    if post.get("published"):
        await message.answer("‚ùå –ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await show_edit_main_menu(message, post_id, post, user, lang)

async def show_edit_main_menu(message: Message, post_id: int, post: dict, user: dict, lang: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    channel = supabase_db.db.get_channel(post.get("channel_id"))
    channel_name = channel["name"] if channel else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
    text = f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
    
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    text += f"üì∫ **–ö–∞–Ω–∞–ª:** {channel_name}\n"
    
    # –°—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
    if post.get("draft"):
        text += "üìù **–°—Ç–∞—Ç—É—Å:** –ß–µ—Ä–Ω–æ–≤–∏–∫\n"
    elif post.get("publish_time"):
        try:
            from view_post import format_time_for_user
            formatted_time = format_time_for_user(post['publish_time'], user)
            text += f"‚è∞ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω:** {formatted_time}\n"
        except:
            text += f"‚è∞ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω:** {post['publish_time']}\n"
    
    # –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
    post_text = post.get("text", "")
    if post_text:
        preview = post_text[:100] + "..." if len(post_text) > 100 else post_text
        text += f"\nüìù **–¢–µ–∫—Å—Ç:** {preview}\n"
    
    # –ú–µ–¥–∏–∞
    if post.get("media_id"):
        media_type = post.get("media_type", "–º–µ–¥–∏–∞")
        text += f"üñº **–ú–µ–¥–∏–∞:** {media_type}\n"
    
    # –§–æ—Ä–º–∞—Ç
    parse_mode = post.get("parse_mode", "HTML")
    text += f"üé® **–§–æ—Ä–º–∞—Ç:** {parse_mode}\n"
    
    # –ö–Ω–æ–ø–∫–∏
    buttons = post.get("buttons")
    if buttons:
        try:
            if isinstance(buttons, str):
                buttons_list = json.loads(buttons)
            else:
                buttons_list = buttons
            if buttons_list:
                text += f"üîò **–ö–Ω–æ–ø–∫–∏:** {len(buttons_list)} —à—Ç.\n"
        except:
            pass
    
    text += "\n**–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:**"
    
    keyboard = get_edit_main_menu_keyboard(post_id, lang)
    
    if hasattr(message, 'edit_text'):
        await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
@router.callback_query(F.data.startswith("edit_single:"))
async def handle_single_field_edit(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è –ø–æ—Å—Ç–∞"""
    parts = callback.data.split(":")
    field = parts[1]
    post_id = int(parts[2])
    
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
    post = supabase_db.db.get_post(post_id)
    if not post or not supabase_db.db.is_user_in_project(user_id, post.get("project_id", -1)):
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.set_data({
        "editing_post_id": post_id,
        "editing_field": field,
        "original_post": post,
        "user_settings": user
    })
    
    if field == "text":
        await edit_text_field(callback, state, post)
    elif field == "media":
        await edit_media_field(callback, state, post)
    elif field == "format":
        await edit_format_field(callback, state, post)
    elif field == "buttons":
        await edit_buttons_field(callback, state, post)
    elif field == "time":
        await edit_time_field(callback, state, post)
    elif field == "channel":
        await edit_channel_field(callback, state, post)
    
    await callback.answer()

async def edit_text_field(callback: CallbackQuery, state: FSMContext, post: dict):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
    await state.set_state(EditPost.text)
    
    current_text = post.get("text", "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞")
    text = (
        f"üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ #{post['id']}**\n\n"
        f"**–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:**\n"
        f"{current_text[:300]}{'...' if len(current_text) > 300 else ''}\n\n"
        f"**–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:**\n\n"
        f"–ö–æ–º–∞–Ω–¥—ã:\n"
        f"‚Ä¢ `skip` - –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç\n"
        f"‚Ä¢ `cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )
    
    keyboard = get_field_edit_keyboard(post['id'], "text")
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(EditPost.text, F.text)
async def handle_text_edit_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    data = await state.get_data()
    post_id = data.get("editing_post_id")
    
    if is_command(message.text, "skip"):
        await finish_field_edit(message, state, post_id, "text", None)
        return
    
    if is_command(message.text, "cancel"):
        await cancel_edit(message, state, post_id)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    await finish_field_edit(message, state, post_id, "text", message.text)

async def edit_media_field(callback: CallbackQuery, state: FSMContext, post: dict):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –ø–æ—Å—Ç–∞"""
    await state.set_state(EditPost.media)
    
    media_info = "–Ω–µ—Ç –º–µ–¥–∏–∞"
    if post.get("media_id"):
        media_type = post.get("media_type", "–º–µ–¥–∏–∞")
        if media_type == "photo":
            media_info = "üì∑ —Ñ–æ—Ç–æ"
        elif media_type == "video":
            media_info = "üé¨ –≤–∏–¥–µ–æ"
        elif media_type == "animation":
            media_info = "üéû GIF"
        else:
            media_info = f"üìé {media_type}"
    
    text = (
        f"üñº **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –ø–æ—Å—Ç–∞ #{post['id']}**\n\n"
        f"**–¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞:** {media_info}\n\n"
        f"**–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –º–µ–¥–∏–∞:**\n"
        f"‚Ä¢ –§–æ—Ç–æ\n"
        f"‚Ä¢ –í–∏–¥–µ–æ\n"
        f"‚Ä¢ GIF/–∞–Ω–∏–º–∞—Ü–∏—è\n\n"
        f"–ö–æ–º–∞–Ω–¥—ã:\n"
        f"‚Ä¢ `skip` - –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞\n"
        f"‚Ä¢ `cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )
    
    keyboard = get_field_edit_keyboard(post['id'], "media")
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(EditPost.media, F.text | F.photo | F.video | F.animation)
async def handle_media_edit_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –º–µ–¥–∏–∞"""
    data = await state.get_data()
    post_id = data.get("editing_post_id")
    
    if message.text and is_command(message.text, "skip"):
        await finish_field_edit(message, state, post_id, "media", None)
        return
    
    if message.text and is_command(message.text, "cancel"):
        await cancel_edit(message, state, post_id)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
    media_data = None
    if message.photo:
        media_data = {"media_type": "photo", "media_id": message.photo[-1].file_id}
    elif message.video:
        media_data = {"media_type": "video", "media_id": message.video.file_id}
    elif message.animation:
        media_data = {"media_type": "animation", "media_id": message.animation.file_id}
    
    if media_data:
        await finish_field_edit(message, state, post_id, "media", media_data)
    else:
        await message.answer(
            "‚ùå **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ `skip` - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å\n"
            "‚Ä¢ `cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å"
        )

async def edit_format_field(callback: CallbackQuery, state: FSMContext, post: dict):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ—Å—Ç–∞"""
    current_format = post.get("parse_mode", "HTML")
    
    text = (
        f"üé® **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ—Å—Ç–∞ #{post['id']}**\n\n"
        f"**–¢–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç:** {current_format}\n\n"
        f"**–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç:**\n"
        f"‚Ä¢ **HTML** - <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <a href='#'>—Å—Å—ã–ª–∫–∏</a>\n"
        f"‚Ä¢ **Markdown** - **–∂–∏—Ä–Ω—ã–π**, *–∫—É—Ä—Å–∏–≤*, [—Å—Å—ã–ª–∫–∏](url)\n"
        f"‚Ä¢ **–û–±—ã—á–Ω—ã–π** - –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    )
    
    keyboard = get_format_edit_keyboard(post['id'])
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data.startswith("edit_format_set:"))
async def handle_format_set(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
    parts = callback.data.split(":")
    post_id = int(parts[1])
    format_value = parts[2]
    
    if format_value == "None":
        format_value = None
    
    await finish_field_edit_callback(callback, state, post_id, "format", format_value)

async def edit_buttons_field(callback: CallbackQuery, state: FSMContext, post: dict):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å—Ç–∞"""
    await state.set_state(EditPost.buttons)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏
    current_buttons = post.get("buttons", [])
    if isinstance(current_buttons, str):
        try:
            current_buttons = json.loads(current_buttons)
        except:
            current_buttons = []
    
    buttons_text = "–Ω–µ—Ç –∫–Ω–æ–ø–æ–∫"
    if current_buttons:
        buttons_list = []
        for btn in current_buttons:
            if isinstance(btn, dict) and btn.get("text") and btn.get("url"):
                buttons_list.append(f"‚Ä¢ {btn['text']} | {btn['url']}")
        if buttons_list:
            buttons_text = "\n".join(buttons_list)
    
    text = (
        f"üîò **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å—Ç–∞ #{post['id']}**\n\n"
        f"**–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:**\n{buttons_text}\n\n"
        f"**–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏:**\n"
        f"–§–æ—Ä–º–∞—Ç: `–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | https://example.com`\n"
        f"–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ\n\n"
        f"–ü—Ä–∏–º–µ—Ä:\n"
        f"```\n"
        f"–ù–∞—à —Å–∞–π—Ç | https://example.com\n"
        f"Telegram | https://t.me/channel\n"
        f"```\n\n"
        f"–ö–æ–º–∞–Ω–¥—ã:\n"
        f"‚Ä¢ `skip` - –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏\n"
        f"‚Ä¢ `cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )
    
    keyboard = get_field_edit_keyboard(post['id'], "buttons")
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(EditPost.buttons, F.text)
async def handle_buttons_edit_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    data = await state.get_data()
    post_id = data.get("editing_post_id")
    
    if is_command(message.text, "skip"):
        await finish_field_edit(message, state, post_id, "buttons", None)
        return
    
    if is_command(message.text, "cancel"):
        await cancel_edit(message, state, post_id)
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–Ω–æ–ø–∫–∏
    try:
        buttons = []
        lines = message.text.strip().split('\n')
        
        for line in lines:
            if '|' in line:
                parts = line.split('|', 1)
                text = parts[0].strip()
                url = parts[1].strip()
                if text and url:
                    buttons.append({"text": text, "url": url})
        
        await finish_field_edit(message, state, post_id, "buttons", buttons)
        
    except Exception as e:
        await message.answer(
            "‚ùå **–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–Ω–æ–ø–æ–∫**\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–¢–µ–∫—Å—Ç | URL`",
            parse_mode="Markdown"
        )

async def edit_time_field(callback: CallbackQuery, state: FSMContext, post: dict):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    data = await state.get_data()
    user_settings = data["user_settings"]
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    current_time_str = "—á–µ—Ä–Ω–æ–≤–∏–∫"
    if post.get("publish_time"):
        try:
            from view_post import format_time_for_user
            current_time_str = format_time_for_user(post['publish_time'], user_settings)
        except:
            current_time_str = str(post.get("publish_time"))
    elif post.get("draft"):
        current_time_str = "—á–µ—Ä–Ω–æ–≤–∏–∫"
    
    timezone = user_settings.get("timezone", "UTC")
    
    text = (
        f"‚è∞ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∞ #{post['id']}**\n\n"
        f"**–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:** {current_time_str}\n"
        f"**–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** {timezone}\n\n"
        f"**–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:**"
    )
    
    keyboard = get_time_edit_keyboard(post['id'])
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data.startswith("edit_time_set:"))
async def handle_time_set(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    parts = callback.data.split(":")
    post_id = int(parts[1])
    time_option = parts[2]
    
    if time_option == "now":
        time_value = {"publish_time": datetime.now(ZoneInfo("UTC")), "draft": False}
    elif time_option == "draft":
        time_value = {"publish_time": None, "draft": True}
    
    await finish_field_edit_callback(callback, state, post_id, "time", time_value)

@router.callback_query(F.data.startswith("edit_time_input:"))
async def handle_time_input_request(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    post_id = int(callback.data.split(":")[1])
    
    await state.set_state(EditPost.time)
    data = await state.get_data()
    user_settings = data["user_settings"]
    tz_name = user_settings.get("timezone", "UTC")
    
    text = (
        f"üìÖ **–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏**\n\n"
        f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz_name}\n\n"
        f"–§–æ—Ä–º–∞—Ç—ã:\n"
        f"‚Ä¢ `2024-12-25 15:30`\n"
        f"‚Ä¢ `25.12.2024 15:30`\n"
        f"‚Ä¢ `25/12/2024 15:30`\n\n"
        f"–ö–æ–º–∞–Ω–¥—ã:\n"
        f"‚Ä¢ `now` - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å\n"
        f"‚Ä¢ `draft` - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫\n"
        f"‚Ä¢ `cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å"
    )
    
    keyboard = get_field_edit_keyboard(post_id, "time", can_skip=False)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.message(EditPost.time, F.text)
async def handle_time_edit_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    data = await state.get_data()
    post_id = data.get("editing_post_id")
    user_settings = data["user_settings"]
    
    if is_command(message.text, "cancel"):
        await cancel_edit(message, state, post_id)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    if is_command(message.text, "now"):
        time_value = {"publish_time": datetime.now(ZoneInfo("UTC")), "draft": False}
    elif is_command(message.text, "draft"):
        time_value = {"publish_time": None, "draft": True}
    else:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É
        try:
            new_time = parse_time_improved(user_settings, message.text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
            if new_time <= datetime.now(ZoneInfo("UTC")):
                await message.answer("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
                return
            
            time_value = {"publish_time": new_time, "draft": False}
            
        except ValueError as e:
            await message.answer(
                f"‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏**\n\n"
                f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.",
                parse_mode="Markdown"
            )
            return
    
    await finish_field_edit(message, state, post_id, "time", time_value)

async def edit_channel_field(callback: CallbackQuery, state: FSMContext, post: dict):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    data = await state.get_data()
    user_settings = data["user_settings"]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª
    current_channel_name = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
    current_channel = supabase_db.db.get_channel(post.get("channel_id"))
    if current_channel:
        current_channel_name = current_channel["name"]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    project_id = user_settings.get("current_project")
    channels = supabase_db.db.list_channels(project_id=project_id)
    
    if not channels:
        await callback.message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞")
        await callback.answer()
        return
    
    text = (
        f"üì∫ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ—Å—Ç–∞ #{post['id']}**\n\n"
        f"**–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª:** {current_channel_name}\n\n"
        f"**–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª:**\n\n"
    )
    
    # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏
    for i, channel in enumerate(channels, 1):
        admin_status = "‚úÖ" if channel.get('is_admin_verified') else "‚ùì"
        text += f"{i}. {admin_status} {channel['name']}\n"
    
    text += (
        f"\n–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"‚Ä¢ –ù–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `1`)\n"
        f"‚Ä¢ @username –∫–∞–Ω–∞–ª–∞\n"
        f"‚Ä¢ `skip` - –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª\n"
        f"‚Ä¢ `cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
    buttons = []
    for i, channel in enumerate(channels):
        admin_status = "‚úÖ" if channel.get('is_admin_verified') else "‚ùì"
        button_text = f"{admin_status} {channel['name']}"
        buttons.append([InlineKeyboardButton(
            text=button_text, 
            callback_data=f"edit_channel_set:{post['id']}:{channel['id']}"
        )])
    
    buttons.append([InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"edit_skip:{post['id']}:channel")])
    buttons.append([InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data=f"edit_menu:{post['id']}")])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"edit_cancel:{post['id']}")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data.startswith("edit_channel_set:"))
async def handle_channel_set(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–∞"""
    parts = callback.data.split(":")
    post_id = int(parts[1])
    channel_id = int(parts[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id
    channel = supabase_db.db.get_channel(channel_id)
    channel_data = {"channel_id": channel_id}
    if channel:
        channel_data["chat_id"] = channel.get("chat_id")
    
    await finish_field_edit_callback(callback, state, post_id, "channel", channel_data)

@router.message(EditPost.channel, F.text)
async def handle_channel_edit_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    data = await state.get_data()
    post_id = data.get("editing_post_id")
    user_settings = data["user_settings"]
    
    if is_command(message.text, "skip"):
        await finish_field_edit(message, state, post_id, "channel", None)
        return
    
    if is_command(message.text, "cancel"):
        await cancel_edit(message, state, post_id)
        return
    
    project_id = user_settings.get("current_project")
    channels = supabase_db.db.list_channels(project_id=project_id)
    
    text = message.text.strip()
    channel = None
    
    # –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–∞ –ø–æ –Ω–æ–º–µ—Ä—É
    if text.isdigit():
        idx = int(text) - 1
        if 0 <= idx < len(channels):
            channel = channels[idx]
    # –ü–æ–∏—Å–∫ –ø–æ username –∏–ª–∏ ID
    else:
        for ch in channels:
            if (ch.get('username') and f"@{ch['username']}" == text) or \
               str(ch['chat_id']) == text or \
               str(ch['id']) == text:
                channel = ch
                break
    
    if not channel:
        available_channels = ", ".join([f"{i+1}" for i in range(len(channels))])
        await message.answer(
            f"‚ùå **–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n"
            f"‚Ä¢ –ù–æ–º–µ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤: {available_channels}\n"
            f"‚Ä¢ @username –∫–∞–Ω–∞–ª–∞\n"
            f"‚Ä¢ `skip` - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
            parse_mode="Markdown"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id
    channel_data = {"channel_id": channel['id']}
    if channel:
        channel_data["chat_id"] = channel.get("chat_id")
    
    await finish_field_edit(message, state, post_id, "channel", channel_data)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("edit_preview:"))
async def handle_edit_preview(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    post_id = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–æ—Å—Ç–∞
    post = supabase_db.db.get_post(post_id)
    if not post:
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
    try:
        from view_post import send_post_preview
        await send_post_preview(callback.message, post)
    except ImportError:
        # Fallback –ø—Ä–µ–≤—å—é
        text = post.get("text", "–ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")[:500]
        await callback.message.answer(f"üëÄ **–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ #{post_id}**\n\n{text}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –∫–Ω–æ–ø–∫–∏
    info_text = f"üëÄ **–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
    
    channel = supabase_db.db.get_channel(post.get("channel_id"))
    if channel:
        info_text += f"üì∫ **–ö–∞–Ω–∞–ª:** {channel['name']}\n"
    
    if post.get("draft"):
        info_text += "üìù **–°—Ç–∞—Ç—É—Å:** –ß–µ—Ä–Ω–æ–≤–∏–∫\n"
    elif post.get("publish_time"):
        info_text += f"‚è∞ **–°—Ç–∞—Ç—É—Å:** –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω\n"
    
    parse_mode_value = post.get("parse_mode")
    if parse_mode_value:
        info_text += f"üé® **–§–æ—Ä–º–∞—Ç:** {parse_mode_value}\n"
    
    keyboard = get_preview_edit_keyboard(post_id)
    await callback.message.answer(info_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data.startswith("edit_save:"))
async def handle_edit_save(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    post_id = int(callback.data.split(":")[1])
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞", callback_data=f"post_full_view:{post_id}")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"post_edit_direct:{post_id}")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        f"‚úÖ **–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã**\n\n"
        f"–ü–æ—Å—Ç #{post_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

@router.callback_query(F.data.startswith("edit_menu:"))
async def handle_edit_menu_return(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    post_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–æ—Å—Ç–∞
    post = supabase_db.db.get_post(post_id)
    if not post:
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_edit_main_menu(callback.message, post_id, post, user, user.get("language", "ru"))
    await callback.answer()

@router.callback_query(F.data.startswith("edit_cancel:"))
async def handle_edit_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    post_id = int(callback.data.split(":")[1])
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞", callback_data=f"post_full_view:{post_id}")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        f"‚ùå **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n"
        f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ—Å—Ç–µ #{post_id} –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

@router.callback_query(F.data.startswith("edit_skip:"))
async def handle_edit_skip(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è"""
    parts = callback.data.split(":")
    post_id = int(parts[1])
    field = parts[2]
    
    await finish_field_edit_callback(callback, state, post_id, field, None)

@router.callback_query(F.data.startswith("edit_recreate:"))
async def handle_edit_recreate(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –Ω—É–ª—è"""
    post_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
    post = supabase_db.db.get_post(post_id)
    if not post or not supabase_db.db.is_user_in_project(user_id, post.get("project_id", -1)):
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    if post.get("published"):
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç!")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å", callback_data=f"edit_recreate_confirm:{post_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_menu:{post_id}")
        ]
    ])
    
    await callback.message.edit_text(
        f"üîÑ **–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç —Å –Ω—É–ª—è?\n"
        f"–≠—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ.\n\n"
        f"‚ö†Ô∏è –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã!",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data.startswith("edit_recreate_confirm:"))
async def handle_edit_recreate_confirm(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    post_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç
    supabase_db.db.delete_post(post_id)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç", callback_data="menu_create_post_direct")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        f"üîÑ **–ü–æ—Å—Ç #{post_id} —É–¥–∞–ª–µ–Ω**\n\n"
        f"–°—Ç–∞—Ä—ã–π –ø–æ—Å—Ç —É–¥–∞–ª–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç —Å –Ω—É–ª—è.",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback.answer("–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def finish_field_edit(message: Message, state: FSMContext, post_id: int, field: str, value):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è (–¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π)"""
    if value is not None:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        updates = {}
        
        if field == "text":
            updates["text"] = value
        elif field == "media":
            if isinstance(value, dict):
                updates.update(value)
        elif field == "format":
            updates["parse_mode"] = value
        elif field == "buttons":
            updates["buttons"] = value
        elif field == "time":
            if isinstance(value, dict):
                updates.update(value)
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤—Ä–µ–º—è
                if "publish_time" in updates:
                    updates["notified"] = False
        elif field == "channel":
            if isinstance(value, dict):
                updates.update(value)
        
        if updates:
            supabase_db.db.update_post(post_id, updates)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
    post = supabase_db.db.get_post(post_id)
    user = supabase_db.db.get_user(message.from_user.id)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await show_edit_main_menu(message, post_id, post, user, user.get("language", "ru"))

async def finish_field_edit_callback(callback: CallbackQuery, state: FSMContext, post_id: int, field: str, value):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è (–¥–ª—è callback)"""
    if value is not None:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        updates = {}
        
        if field == "text":
            updates["text"] = value
        elif field == "media":
            if isinstance(value, dict):
                updates.update(value)
        elif field == "format":
            updates["parse_mode"] = value
        elif field == "buttons":
            updates["buttons"] = value
        elif field == "time":
            if isinstance(value, dict):
                updates.update(value)
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤—Ä–µ–º—è
                if "publish_time" in updates:
                    updates["notified"] = False
        elif field == "channel":
            if isinstance(value, dict):
                updates.update(value)
        
        if updates:
            supabase_db.db.update_post(post_id, updates)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
    post = supabase_db.db.get_post(post_id)
    user = supabase_db.db.get_user(callback.from_user.id)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await show_edit_main_menu(callback.message, post_id, post, user, user.get("language", "ru"))
    await callback.answer()

async def cancel_edit(message: Message, state: FSMContext, post_id: int):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π)"""
    await state.clear()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞", callback_data=f"post_full_view:{post_id}")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await message.answer(
        f"‚ùå **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n"
        f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ—Å—Ç–µ #{post_id} –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å main.py
async def handle_edit_field_callback(callback: CallbackQuery, state: FSMContext):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π (–¥–ª—è main.py)"""
    await handle_single_field_edit(callback, state)

async def handle_edit_confirm_callback(callback: CallbackQuery, state: FSMContext):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–¥–ª—è main.py)"""
    await handle_edit_save(callback, state)

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
__all__ = [
    'show_edit_main_menu',
    'handle_edit_field_callback', 
    'handle_edit_confirm_callback',
    'handle_edit_menu_return',
    'handle_edit_skip',
    'handle_edit_save',
    'handle_edit_cancel',
    'handle_edit_recreate'
]
