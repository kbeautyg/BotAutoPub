from aiogram import Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import supabase_db
from __init__ import TEXTS
import json

router = Router()

@router.message(Command("view"))
async def cmd_view_post(message: Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ –ø–æ ID"""
    user_id = message.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã**\n\n"
            "`/view <ID –ø–æ—Å—Ç–∞>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/view 123`",
            parse_mode="Markdown"
        )
        return
    
    try:
        post_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå ID –ø–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
    post = supabase_db.db.get_post(post_id)
    if not post:
        await message.answer(f"‚ùå –ü–æ—Å—Ç #{post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not supabase_db.db.is_user_in_project(user_id, post.get("project_id", -1)):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    channel = supabase_db.db.get_channel(post.get("channel_id"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞
    await send_post_preview(message, post, channel)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
    info_text = f"üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–µ #{post_id}**\n\n"
    
    if channel:
        info_text += f"**–ö–∞–Ω–∞–ª:** {channel['name']}\n"
    
    if post.get("published"):
        info_text += "**–°—Ç–∞—Ç—É—Å:** ‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω\n"
    elif post.get("draft"):
        info_text += "**–°—Ç–∞—Ç—É—Å:** üìù –ß–µ—Ä–Ω–æ–≤–∏–∫\n"
    elif post.get("publish_time"):
        info_text += f"**–°—Ç–∞—Ç—É—Å:** ‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {post['publish_time']}\n"
    
    if post.get("format"):
        info_text += f"**–§–æ—Ä–º–∞—Ç:** {post['format']}\n"
    
    if post.get("repeat_interval") and post["repeat_interval"] > 0:
        info_text += f"**–ü–æ–≤—Ç–æ—Ä:** –∫–∞–∂–¥—ã–µ {format_interval(post['repeat_interval'])}\n"
    
    info_text += f"\n**–ö–æ–º–∞–Ω–¥—ã:**\n"
    
    if not post.get("published"):
        info_text += f"‚Ä¢ `/edit {post_id}` - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n"
        info_text += f"‚Ä¢ `/publish {post_id}` - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å\n"
        info_text += f"‚Ä¢ `/reschedule {post_id} YYYY-MM-DD HH:MM` - –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏\n"
        info_text += f"‚Ä¢ `/delete {post_id}` - —É–¥–∞–ª–∏—Ç—å\n"
    
    info_text += f"‚Ä¢ `/list` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤"
    
    await message.answer(info_text, parse_mode="Markdown")

async def send_post_preview(message: Message, post: dict, channel: dict = None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞"""
    text = post.get("text", "")
    media_id = post.get("media_id")
    media_type = post.get("media_type")
    format_type = post.get("format")
    buttons = post.get("buttons")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º parse_mode
    parse_mode = None
    if format_type:
        if format_type.lower() == "markdown":
            parse_mode = "Markdown"
        elif format_type.lower() == "html":
            parse_mode = "HTML"
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
    markup = None
    if buttons:
        try:
            if isinstance(buttons, str):
                buttons_list = json.loads(buttons)
            else:
                buttons_list = buttons
            
            if buttons_list:
                kb = []
                for btn in buttons_list:
                    if isinstance(btn, dict) and btn.get("text") and btn.get("url"):
                        kb.append([InlineKeyboardButton(text=btn["text"], url=btn["url"])])
                if kb:
                    markup = InlineKeyboardMarkup(inline_keyboard=kb)
        except:
            pass
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–≤—å—é
    try:
        if media_id and media_type:
            if media_type.lower() == "photo":
                await message.answer_photo(
                    media_id,
                    caption=text or "üìù *–ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞*",
                    parse_mode=parse_mode or "Markdown",
                    reply_markup=markup
                )
            elif media_type.lower() == "video":
                await message.answer_video(
                    media_id,
                    caption=text or "üìù *–ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞*",
                    parse_mode=parse_mode or "Markdown",
                    reply_markup=markup
                )
            elif media_type.lower() == "animation":
                await message.answer_animation(
                    media_id,
                    caption=text or "üìù *–ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞*",
                    parse_mode=parse_mode or "Markdown",
                    reply_markup=markup
                )
        else:
            await message.answer(
                text or "üìù *–ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞*",
                parse_mode=parse_mode or "Markdown",
                reply_markup=markup
            )
    except Exception as e:
        await message.answer(
            f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞**\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é: {str(e)}\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.",
            parse_mode="Markdown"
        )

def format_interval(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds % 86400 == 0:
        days = seconds // 86400
        return f"{days} –¥–Ω." if days != 1 else "–¥–µ–Ω—å"
    elif seconds % 3600 == 0:
        hours = seconds // 3600
        return f"{hours} —á." if hours != 1 else "—á–∞—Å"
    else:
        minutes = seconds // 60
        return f"{minutes} –º–∏–Ω." if minutes != 1 else "–º–∏–Ω—É—Ç—É"

@router.message(Command("publish"))
async def cmd_publish_now(message: Message):
    """–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"""
    user_id = message.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã**\n\n"
            "`/publish <ID –ø–æ—Å—Ç–∞>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/publish 123`",
            parse_mode="Markdown"
        )
        return
    
    try:
        post_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå ID –ø–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
    post = supabase_db.db.get_post(post_id)
    if not post:
        await message.answer(f"‚ùå –ü–æ—Å—Ç #{post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not supabase_db.db.is_user_in_project(user_id, post.get("project_id", -1)):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É")
        return
    
    if post.get("published"):
        await message.answer("‚ùå –ü–æ—Å—Ç —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–µ
    from datetime import datetime
    from zoneinfo import ZoneInfo
    
    now = datetime.now(ZoneInfo("UTC"))
    supabase_db.db.update_post(post_id, {
        "publish_time": now,
        "draft": False
    })
    
    await message.answer(
        f"üöÄ **–ü–æ—Å—Ç #{post_id} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å**\n\n"
        f"–ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        parse_mode="Markdown"
    )

@router.message(Command("reschedule"))
async def cmd_reschedule_post(message: Message):
    """–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–∞"""
    user_id = message.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    parts = message.text.split(maxsplit=3)
    if len(parts) < 4:
        await message.answer(
            "‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã**\n\n"
            "`/reschedule <ID> <YYYY-MM-DD> <HH:MM>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/reschedule 123 2024-12-25 15:30`",
            parse_mode="Markdown"
        )
        return
    
    try:
        post_id = int(parts[1])
        date_str = parts[2]
        time_str = parts[3]
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
    post = supabase_db.db.get_post(post_id)
    if not post:
        await message.answer(f"‚ùå –ü–æ—Å—Ç #{post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not supabase_db.db.is_user_in_project(user_id, post.get("project_id", -1)):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É")
        return
    
    if post.get("published"):
        await message.answer("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç")
        return
    
    # –ü–∞—Ä—Å–∏–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è
    from datetime import datetime
    from zoneinfo import ZoneInfo
    
    try:
        dt = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
        tz = ZoneInfo(user.get("timezone", "UTC"))
        local_dt = dt.replace(tzinfo=tz)
        utc_dt = local_dt.astimezone(ZoneInfo("UTC"))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
        if utc_dt <= datetime.now(ZoneInfo("UTC")):
            await message.answer("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç
        supabase_db.db.update_post(post_id, {
            "publish_time": utc_dt,
            "draft": False,
            "notified": False
        })
        
        await message.answer(
            f"‚úÖ **–ü–æ—Å—Ç #{post_id} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω**\n\n"
            f"–ù–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {date_str} {time_str} ({user.get('timezone', 'UTC')})",
            parse_mode="Markdown"
        )
        
    except ValueError as e:
        await message.answer(
            f"‚ùå **–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏**\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM\n"
            f"–û—à–∏–±–∫–∞: {str(e)}",
            parse_mode="Markdown"
        )
