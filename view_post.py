from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
import supabase_db
from __init__ import TEXTS
import json
from datetime import datetime
from zoneinfo import ZoneInfo
import html
import re

router = Router()

def format_time_for_user(time_str: str, user: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –µ–≥–æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ ISO —Ñ–æ—Ä–º–∞—Ç–∞
        if isinstance(time_str, str):
            if time_str.endswith('Z'):
                time_str = time_str[:-1] + '+00:00'
            utc_time = datetime.fromisoformat(time_str)
        else:
            utc_time = time_str
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_tz_name = user.get('timezone', 'UTC')
        try:
            user_tz = ZoneInfo(user_tz_name)
            local_time = utc_time.astimezone(user_tz)
        except:
            local_time = utc_time
            user_tz_name = 'UTC'
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        date_format = user.get('date_format', 'YYYY-MM-DD')
        time_format = user.get('time_format', 'HH:MM')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç –≤ strftime
        if date_format == 'DD.MM.YYYY':
            date_str = local_time.strftime('%d.%m.%Y')
        elif date_format == 'DD/MM/YYYY':
            date_str = local_time.strftime('%d/%m/%Y')
        elif date_format == 'MM/DD/YYYY':
            date_str = local_time.strftime('%m/%d/%Y')
        else:  # YYYY-MM-DD
            date_str = local_time.strftime('%Y-%m-%d')
        
        if time_format == 'hh:MM AM':
            time_str = local_time.strftime('%I:%M %p')
        else:  # HH:MM
            time_str = local_time.strftime('%H:%M')
        
        return f"{date_str} {time_str} ({user_tz_name})"
    except Exception as e:
        # Fallback –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
        return str(time_str)

def clean_text_for_format(text: str, parse_mode: str) -> str:
    """–û—á–∏—Å—Ç–∏—Ç—å –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
    if not text:
        return text
    
    if parse_mode == "Markdown":
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
        # –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º HTML-—Ç–µ–≥–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        text = re.sub(r'<[^>]+>', '', text)
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown v2
        special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        for char in special_chars:
            text = text.replace(char, '\\' + char)
        
        return text
    
    elif parse_mode == "HTML":
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–≥–æ–≤
        if not re.search(r'<[^>]+>', text):
            text = html.escape(text)
        return text
    
    else:
        # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç - —É–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        text = re.sub(r'<[^>]+>', '', text)
        return text

def get_post_management_keyboard(post_id: int, is_published: bool = False) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–º"""
    buttons = []
    
    if not is_published:
        buttons.append([
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"post_edit_direct:{post_id}"),
            InlineKeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"post_publish_cmd:{post_id}")
        ])
        buttons.append([
            InlineKeyboardButton(text="üìÖ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"post_reschedule_cmd:{post_id}"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"post_delete_cmd:{post_id}")
        ])
    
    buttons.append([
        InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.message(Command("view"))
async def cmd_view_post(message: Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ –ø–æ ID"""
    user_id = message.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer(
            "‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã**\n\n"
            "`/view <ID –ø–æ—Å—Ç–∞>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/view 123`",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        return
    
    try:
        post_id = int(args[1])
    except ValueError:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer("‚ùå ID –ø–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º", reply_markup=keyboard)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
    post = supabase_db.db.get_post(post_id)
    if not post:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer(f"‚ùå –ü–æ—Å—Ç #{post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=keyboard)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª
    if not supabase_db.db.is_channel_admin(post.get("channel_id"), user_id):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É", reply_markup=keyboard)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    channel = supabase_db.db.get_channel(post.get("channel_id"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞
    await send_post_preview(message, post, channel)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
    info_text = f"üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–µ #{post_id}**\n\n"
    
    if channel:
        info_text += f"**–ö–∞–Ω–∞–ª:** {channel['name']}\n"
    
    if post.get("published"):
        info_text += "**–°—Ç–∞—Ç—É—Å:** ‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω\n"
    elif post.get("draft"):
        info_text += "**–°—Ç–∞—Ç—É—Å:** üìù –ß–µ—Ä–Ω–æ–≤–∏–∫\n"
    elif post.get("publish_time"):
        formatted_time = format_time_for_user(post['publish_time'], user)
        info_text += f"**–°—Ç–∞—Ç—É—Å:** ‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {formatted_time}\n"
    
    parse_mode_value = post.get("parse_mode") or post.get("format")
    if parse_mode_value:
        info_text += f"**–§–æ—Ä–º–∞—Ç:** {parse_mode_value}\n"
    
    if post.get("repeat_interval") and post["repeat_interval"] > 0:
        info_text += f"**–ü–æ–≤—Ç–æ—Ä:** –∫–∞–∂–¥—ã–µ {format_interval(post['repeat_interval'])}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = get_post_management_keyboard(post_id, post.get("published", False))
    
    await message.answer(info_text, parse_mode="Markdown", reply_markup=keyboard)

async def send_post_preview(message: Message, post: dict, channel: dict = None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    text = post.get("text", "")
    media_id = post.get("media_id")
    media_type = post.get("media_type")
    format_type = post.get("parse_mode") or post.get("format")
    buttons = post.get("buttons")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º parse_mode
    parse_mode = None
    if format_type:
        if format_type.lower() == "markdown":
            parse_mode = "Markdown"
        elif format_type.lower() == "html":
            parse_mode = "HTML"
    
    # –û—á–∏—â–∞–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞
    if text and parse_mode:
        try:
            cleaned_text = clean_text_for_format(text, parse_mode)
        except Exception as e:
            print(f"Error cleaning text: {e}")
            cleaned_text = text
            parse_mode = None  # –û—Ç–∫–ª—é—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    else:
        cleaned_text = text
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
    markup = None
    if buttons:
        try:
            if isinstance(buttons, str):
                buttons_list = json.loads(buttons)
            else:
                buttons_list = buttons
            
            if buttons_list:
                kb = []
                for btn in buttons_list:
                    if isinstance(btn, dict) and btn.get("text") and btn.get("url"):
                        kb.append([InlineKeyboardButton(text=btn["text"], url=btn["url"])])
                if kb:
                    markup = InlineKeyboardMarkup(inline_keyboard=kb)
        except Exception as e:
            print(f"Error processing buttons: {e}")
            pass
    
    # Fallback text –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É—Å—Ç–æ–π
    final_text = cleaned_text or "üìù *–ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞*"
    fallback_parse_mode = parse_mode or "Markdown"
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–≤—å—é
    try:
        if media_id and media_type:
            if media_type.lower() == "photo":
                await message.answer_photo(
                    media_id,
                    caption=final_text,
                    parse_mode=parse_mode,
                    reply_markup=markup
                )
            elif media_type.lower() == "video":
                await message.answer_video(
                    media_id,
                    caption=final_text,
                    parse_mode=parse_mode,
                    reply_markup=markup
                )
            elif media_type.lower() == "animation":
                await message.answer_animation(
                    media_id,
                    caption=final_text,
                    parse_mode=parse_mode,
                    reply_markup=markup
                )
        else:
            await message.answer(
                final_text,
                parse_mode=parse_mode,
                reply_markup=markup
            )
    except Exception as e:
        print(f"First attempt failed: {e}")
        # –í—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∞ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            safe_text = re.sub(r'<[^>]+>', '', text) if text else "üìù –ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"
            
            if media_id and media_type:
                if media_type.lower() == "photo":
                    await message.answer_photo(
                        media_id,
                        caption=safe_text,
                        reply_markup=markup
                    )
                elif media_type.lower() == "video":
                    await message.answer_video(
                        media_id,
                        caption=safe_text,
                        reply_markup=markup
                    )
                elif media_type.lower() == "animation":
                    await message.answer_animation(
                        media_id,
                        caption=safe_text,
                        reply_markup=markup
                    )
            else:
                await message.answer(
                    safe_text,
                    reply_markup=markup
                )
        except Exception as e2:
            print(f"Second attempt failed: {e2}")
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            error_msg = f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞**\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n**–§–æ—Ä–º–∞—Ç:** {format_type or '–Ω–µ –∑–∞–¥–∞–Ω'}\n**–û—à–∏–±–∫–∞:** {str(e)}"
            
            await message.answer(
                error_msg,
                parse_mode="Markdown",
                reply_markup=keyboard
            )

def format_interval(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds % 86400 == 0:
        days = seconds // 86400
        return f"{days} –¥–Ω." if days != 1 else "–¥–µ–Ω—å"
    elif seconds % 3600 == 0:
        hours = seconds // 3600
        return f"{hours} —á." if hours != 1 else "—á–∞—Å"
    else:
        minutes = seconds // 60
        return f"{minutes} –º–∏–Ω." if minutes != 1 else "–º–∏–Ω—É—Ç—É"

@router.message(Command("publish"))
async def cmd_publish_now(message: Message):
    """–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"""
    user_id = message.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer(
            "‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã**\n\n"
            "`/publish <ID –ø–æ—Å—Ç–∞>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/publish 123`",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        return
    
    try:
        post_id = int(args[1])
    except ValueError:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer("‚ùå ID –ø–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º", reply_markup=keyboard)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
    post = supabase_db.db.get_post(post_id)
    if not post:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer(f"‚ùå –ü–æ—Å—Ç #{post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=keyboard)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª
    if not supabase_db.db.is_channel_admin(post.get("channel_id"), user_id):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É", reply_markup=keyboard)
        return
    
    if post.get("published"):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞", callback_data=f"post_full_view:{post_id}")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")]
        ])
        await message.answer("‚ùå –ü–æ—Å—Ç —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω", reply_markup=keyboard)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–µ
    now = datetime.now(ZoneInfo("UTC"))
    supabase_db.db.update_post(post_id, {
        "publish_time": now,
        "draft": False
    })
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞", callback_data=f"post_full_view:{post_id}")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await message.answer(
        f"üöÄ **–ü–æ—Å—Ç #{post_id} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å**\n\n"
        f"–ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

@router.message(Command("reschedule"))
async def cmd_reschedule_post(message: Message):
    """–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–∞"""
    user_id = message.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    parts = message.text.split(maxsplit=3)
    if len(parts) < 4:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer(
            "‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã**\n\n"
            "`/reschedule <ID> <YYYY-MM-DD> <HH:MM>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/reschedule 123 2024-12-25 15:30`",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        return
    
    try:
        post_id = int(parts[1])
        date_str = parts[2]
        time_str = parts[3]
    except (ValueError, IndexError):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã", reply_markup=keyboard)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
    post = supabase_db.db.get_post(post_id)
    if not post:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer(f"‚ùå –ü–æ—Å—Ç #{post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=keyboard)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª
    if not supabase_db.db.is_channel_admin(post.get("channel_id"), user_id):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É", reply_markup=keyboard)
        return
    
    if post.get("published"):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞", callback_data=f"post_full_view:{post_id}")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")]
        ])
        await message.answer("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç", reply_markup=keyboard)
        return
    
    # –ü–∞—Ä—Å–∏–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è
    try:
        dt = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
        tz = ZoneInfo(user.get("timezone", "UTC"))
        local_dt = dt.replace(tzinfo=tz)
        utc_dt = local_dt.astimezone(ZoneInfo("UTC"))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
        if utc_dt <= datetime.now(ZoneInfo("UTC")):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞", callback_data=f"post_full_view:{post_id}")],
                [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")]
            ])
            await message.answer("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º", reply_markup=keyboard)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç
        supabase_db.db.update_post(post_id, {
            "publish_time": utc_dt,
            "draft": False,
            "notified": False
        })
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞", callback_data=f"post_full_view:{post_id}")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await message.answer(
            f"‚úÖ **–ü–æ—Å—Ç #{post_id} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω**\n\n"
            f"–ù–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {date_str} {time_str} ({user.get('timezone', 'UTC')})",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        
    except ValueError as e:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer(
            f"‚ùå **–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏**\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM\n"
            f"–û—à–∏–±–∫–∞: {str(e)}",
            parse_mode="Markdown",
            reply_markup=keyboard
        )

@router.message(Command("delete"))
async def cmd_delete_post(message: Message):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç"""
    user_id = message.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer(
            "‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã**\n\n"
            "`/delete <ID –ø–æ—Å—Ç–∞>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/delete 123`",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        return
    
    try:
        post_id = int(args[1])
    except ValueError:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer("‚ùå ID –ø–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º", reply_markup=keyboard)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
    post = supabase_db.db.get_post(post_id)
    if not post:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer(f"‚ùå –ü–æ—Å—Ç #{post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=keyboard)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª
    if not supabase_db.db.is_channel_admin(post.get("channel_id"), user_id):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É", reply_markup=keyboard)
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_confirm:{post_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"post_full_view:{post_id}")
        ]
    ])
    
    await message.answer(
        f"üóë **–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç?\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

# Callback –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞
@router.callback_query(F.data.startswith("delete_confirm:"))
async def callback_confirm_delete_post(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ callback"""
    user_id = callback.from_user.id
    post_id = int(callback.data.split(":", 1)[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    post = supabase_db.db.get_post(post_id)
    if not post or not supabase_db.db.is_channel_admin(post.get("channel_id"), user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É!")
        return
    
    if supabase_db.db.delete_post(post_id):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            f"‚úÖ **–ü–æ—Å—Ç #{post_id} —É–¥–∞–ª–µ–Ω**\n\n"
            f"–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await callback.message.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    
    await callback.answer()
