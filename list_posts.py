from aiogram import Router, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
import supabase_db
from datetime import datetime
from zoneinfo import ZoneInfo

router = Router()

def format_post_time(post: dict, user: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø–æ—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if post.get("published"):
        return "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω"
    elif post.get("draft"):
        return "üìù –ß–µ—Ä–Ω–æ–≤–∏–∫"
    elif post.get("publish_time"):
        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            time_str = post["publish_time"]
            if isinstance(time_str, str):
                if time_str.endswith('Z'):
                    time_str = time_str[:-1] + '+00:00'
                utc_time = datetime.fromisoformat(time_str)
            else:
                utc_time = time_str
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_tz = ZoneInfo(user.get('timezone', 'UTC'))
            local_time = utc_time.astimezone(user_tz)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
            return f"‚è∞ {local_time.strftime('%d.%m %H:%M')}"
        except:
            return "‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω"
    else:
        return "‚ùì –ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏"

def get_posts_list_keyboard(has_scheduled: bool = False, has_drafts: bool = False, has_published: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤"""
    buttons = []
    
    if has_scheduled:
        buttons.append([InlineKeyboardButton(text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="posts_scheduled")])
    if has_drafts:
        buttons.append([InlineKeyboardButton(text="üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–∏", callback_data="posts_drafts")])
    if has_published:
        buttons.append([InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ", callback_data="posts_published")])
    
    buttons.append([
        InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="menu_create_post_direct"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.message(Command("list"))
async def cmd_list_posts(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤"""
    user_id = message.from_user.id
    user = supabase_db.db.get_user(user_id)
    project_id = user.get("current_project") if user else None
    
    if not project_id:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ /project")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
    all_posts = supabase_db.db.list_posts(project_id=project_id, only_pending=False)
    
    if not all_posts:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç", callback_data="menu_create_post_direct")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await message.answer(
            "üìã **–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤**\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π!",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        return
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    scheduled_posts = []
    draft_posts = []
    published_posts = []
    
    for post in all_posts:
        if post.get("published"):
            published_posts.append(post)
        elif post.get("draft"):
            draft_posts.append(post)
        elif post.get("publish_time"):
            scheduled_posts.append(post)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º
    scheduled_posts.sort(key=lambda x: x.get("publish_time") or "")
    draft_posts.sort(key=lambda x: x.get("created_at") or "", reverse=True)
    published_posts.sort(key=lambda x: x.get("publish_time") or "", reverse=True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = f"üìã **–í—Å–µ –ø–æ—Å—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞**\n\n"
    text += f"–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(all_posts)}\n"
    
    if scheduled_posts:
        text += f"\n‚è∞ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ({len(scheduled_posts)}):**\n"
        for i, post in enumerate(scheduled_posts[:5], 1):
            channel = supabase_db.db.get_channel(post.get("channel_id"))
            channel_name = channel.get("name", "?") if channel else "?"
            time_str = format_post_time(post, user)
            post_text = post.get("text", "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")[:30]
            text += f"{i}. #{post['id']} ‚Ä¢ {channel_name} ‚Ä¢ {time_str}\n   {post_text}...\n"
        if len(scheduled_posts) > 5:
            text += f"   _...–∏ –µ—â–µ {len(scheduled_posts) - 5} –ø–æ—Å—Ç–æ–≤_\n"
    
    if draft_posts:
        text += f"\nüìù **–ß–µ—Ä–Ω–æ–≤–∏–∫–∏ ({len(draft_posts)}):**\n"
        for i, post in enumerate(draft_posts[:3], 1):
            channel = supabase_db.db.get_channel(post.get("channel_id"))
            channel_name = channel.get("name", "?") if channel else "?"
            post_text = post.get("text", "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")[:30]
            text += f"{i}. #{post['id']} ‚Ä¢ {channel_name}\n   {post_text}...\n"
        if len(draft_posts) > 3:
            text += f"   _...–∏ –µ—â–µ {len(draft_posts) - 3} —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤_\n"
    
    if published_posts:
        text += f"\n‚úÖ **–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ ({len(published_posts)}):**\n"
        text += f"   _–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ {min(3, len(published_posts))} –∏–∑ {len(published_posts)}_\n"
    
    keyboard = get_posts_list_keyboard(
        has_scheduled=bool(scheduled_posts),
        has_drafts=bool(draft_posts),
        has_published=bool(published_posts)
    )
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

# Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –ø–æ—Å—Ç—ã" –∏–∑ –º–µ–Ω—é
@router.callback_query(F.data == "posts_menu")
async def callback_posts_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ callback"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    project_id = user.get("current_project") if user else None
    
    if not project_id:
        await callback.message.edit_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.")
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
    all_posts = supabase_db.db.list_posts(project_id=project_id, only_pending=False)
    
    if not all_posts:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç", callback_data="menu_create_post_direct")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            "üìã **–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤**\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π!",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    scheduled_posts = []
    draft_posts = []
    published_posts = []
    
    for post in all_posts:
        if post.get("published"):
            published_posts.append(post)
        elif post.get("draft"):
            draft_posts.append(post)
        elif post.get("publish_time"):
            scheduled_posts.append(post)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = f"üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏**\n\n"
    
    if scheduled_posts:
        text += f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(scheduled_posts)}\n"
    if draft_posts:
        text += f"üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: {len(draft_posts)}\n"
    if published_posts:
        text += f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: {len(published_posts)}\n"
    
    text += f"\n–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(all_posts)}"
    
    keyboard = get_posts_list_keyboard(
        has_scheduled=bool(scheduled_posts),
        has_drafts=bool(draft_posts),
        has_published=bool(published_posts)
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "posts_scheduled")
async def callback_posts_scheduled(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    project_id = user.get("current_project") if user else None
    
    if not project_id:
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
    posts = supabase_db.db.get_scheduled_posts_by_channel(project_id)
    
    if not posts:
        text = "‚è∞ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã**\n\n‚ùå –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."
    else:
        text = "‚è∞ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã**\n\n"
        
        current_channel = None
        for post in posts:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞–Ω–∞–ª–∞–º
            channel_info = post.get("channels", {})
            channel_name = channel_info.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª")
            
            if channel_name != current_channel:
                if current_channel is not None:
                    text += "\n"
                text += f"**üì∫ {channel_name}:**\n"
                current_channel = channel_name
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            time_str = format_post_time(post, user)
            post_text = post.get("text", "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")[:50]
            
            text += f"‚Ä¢ #{post['id']} {time_str}\n  {post_text}...\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø–æ—Å—Ç–∞–º
    buttons = []
    if posts:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø–æ—Å—Ç–æ–≤ –∫–∞–∫ –∫–Ω–æ–ø–∫–∏
        for post in posts[:5]:
            channel_info = post.get("channels", {})
            channel_name = channel_info.get("name", "?")[:10]
            buttons.append([InlineKeyboardButton(
                text=f"#{post['id']} ‚Ä¢ {channel_name}",
                callback_data=f"post_view:{post['id']}"
            )])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="posts_menu")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "posts_drafts")
async def callback_posts_drafts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫–∏"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    project_id = user.get("current_project") if user else None
    
    if not project_id:
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫–∏
    posts = supabase_db.db.get_draft_posts_by_channel(project_id)
    
    if not posts:
        text = "üìù **–ß–µ—Ä–Ω–æ–≤–∏–∫–∏**\n\n‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤."
    else:
        text = "üìù **–ß–µ—Ä–Ω–æ–≤–∏–∫–∏**\n\n"
        
        for i, post in enumerate(posts, 1):
            channel_info = post.get("channels", {})
            channel_name = channel_info.get("name", "–ö–∞–Ω–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
            post_text = post.get("text", "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")[:50]
            
            created_at = post.get("created_at", "")
            if created_at:
                try:
                    dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                    date_str = dt.strftime("%d.%m.%Y")
                except:
                    date_str = ""
            else:
                date_str = ""
            
            text += f"{i}. **#{post['id']}** ‚Ä¢ {channel_name}\n"
            if date_str:
                text += f"   üìÖ {date_str}\n"
            text += f"   {post_text}...\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons = []
    if posts:
        for post in posts[:5]:
            buttons.append([InlineKeyboardButton(
                text=f"#{post['id']} ‚Ä¢ –û—Ç–∫—Ä—ã—Ç—å",
                callback_data=f"post_view:{post['id']}"
            )])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="posts_menu")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "posts_published")
async def callback_posts_published(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    project_id = user.get("current_project") if user else None
    
    if not project_id:
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ
    all_posts = supabase_db.db.list_posts(project_id=project_id, only_pending=False)
    posts = [p for p in all_posts if p.get("published")]
    posts.sort(key=lambda x: x.get("publish_time") or "", reverse=True)
    
    if not posts:
        text = "‚úÖ **–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã**\n\n‚ùå –ù–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."
    else:
        text = f"‚úÖ **–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã**\n\n–í—Å–µ–≥–æ: {len(posts)}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
        for i, post in enumerate(posts[:10], 1):
            channel = supabase_db.db.get_channel(post.get("channel_id"))
            channel_name = channel.get("name", "?") if channel else "?"
            post_text = post.get("text", "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")[:50]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            pub_time = post.get("publish_time")
            if pub_time:
                try:
                    dt = datetime.fromisoformat(pub_time.replace('Z', '+00:00'))
                    date_str = dt.strftime("%d.%m.%Y %H:%M")
                except:
                    date_str = "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
            else:
                date_str = "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
            
            text += f"{i}. **#{post['id']}** ‚Ä¢ {channel_name}\n"
            text += f"   üìÖ {date_str}\n"
            text += f"   {post_text}...\n\n"
        
        if len(posts) > 10:
            text += f"_...–∏ –µ—â–µ {len(posts) - 10} –ø–æ—Å—Ç–æ–≤_"
    
    buttons = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="posts_menu")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞ –ø–æ callback
@router.callback_query(F.data.startswith("post_view:"))
async def callback_view_post(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ callback"""
    post_id = int(callback.data.split(":")[-1])
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    
    post = supabase_db.db.get_post(post_id)
    if not post:
        await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not supabase_db.db.is_user_in_project(user_id, post.get("project_id", -1)):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Å—Ç—É")
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ view_post –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    from view_post import send_post_preview, format_time_for_user, get_post_management_keyboard
    
    channel = supabase_db.db.get_channel(post.get("channel_id"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
    await send_post_preview(callback.message, post, channel)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–µ
    info_text = f"üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–µ #{post_id}**\n\n"
    
    if channel:
        info_text += f"**–ö–∞–Ω–∞–ª:** {channel['name']}\n"
    
    if post.get("published"):
        info_text += "**–°—Ç–∞—Ç—É—Å:** ‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω\n"
    elif post.get("draft"):
        info_text += "**–°—Ç–∞—Ç—É—Å:** üìù –ß–µ—Ä–Ω–æ–≤–∏–∫\n"
    elif post.get("publish_time"):
        formatted_time = format_time_for_user(post['publish_time'], user)
        info_text += f"**–°—Ç–∞—Ç—É—Å:** ‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {formatted_time}\n"
    
    parse_mode_value = post.get("parse_mode") or post.get("format")
    if parse_mode_value:
        info_text += f"**–§–æ—Ä–º–∞—Ç:** {parse_mode_value}\n"
    
    if post.get("repeat_interval") and post["repeat_interval"] > 0:
        from edit_post_improved import format_interval
        info_text += f"**–ü–æ–≤—Ç–æ—Ä:** –∫–∞–∂–¥—ã–µ {format_interval(post['repeat_interval'])}\n"
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = get_post_management_keyboard(post_id, post.get("published", False))
    
    await callback.message.answer(info_text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()
