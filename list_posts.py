from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
import supabase_db
from datetime import datetime
from zoneinfo import ZoneInfo

router = Router()

def format_time_for_user_simple(time_str: str, user: dict) -> str:
    """–ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤"""
    try:
        if isinstance(time_str, str):
            if time_str.endswith('Z'):
                time_str = time_str[:-1] + '+00:00'
            utc_time = datetime.fromisoformat(time_str)
        else:
            utc_time = time_str
        
        user_tz_name = user.get('timezone', 'UTC')
        try:
            user_tz = ZoneInfo(user_tz_name)
            local_time = utc_time.astimezone(user_tz)
        except:
            local_time = utc_time
        
        return local_time.strftime('%m-%d %H:%M')
    except:
        return str(time_str)[:16]

def get_posts_main_menu_keyboard(lang: str = "ru"):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="posts_scheduled"),
            InlineKeyboardButton(text="üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–∏", callback_data="posts_drafts")
        ],
        [
            InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ", callback_data="posts_published"),
            InlineKeyboardButton(text="üìã –í—Å–µ –ø–æ—Å—Ç—ã", callback_data="posts_all")
        ],
        [
            InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="menu_create_post_direct"),
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ])

def get_post_list_keyboard(posts: list, page: int = 0, posts_per_page: int = 5, list_type: str = "all"):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ—Å—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    buttons = []
    
    start_idx = page * posts_per_page
    end_idx = min(start_idx + posts_per_page, len(posts))
    
    # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å—Ç–æ–≤
    for i in range(start_idx, end_idx):
        post = posts[i]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
        if post.get('published'):
            status = "‚úÖ"
        elif post.get('draft'):
            status = "üìù"
        elif post.get('publish_time'):
            status = "‚è∞"
        else:
            status = "‚ùì"
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        channel_name = "–ö–∞–Ω–∞–ª"
        if post.get('channels') and isinstance(post['channels'], dict):
            channel_name = post['channels'].get('name', '–ö–∞–Ω–∞–ª')[:10]
        
        # –ö—Ä–∞—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        post_text = post.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')[:15]
        
        button_text = f"{status} #{post['id']} {channel_name} - {post_text}..."
        buttons.append([InlineKeyboardButton(
            text=button_text, 
            callback_data=f"post_view:{post['id']}"
        )])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
            callback_data=f"posts_page:{list_type}:{page-1}"
        ))
    
    if end_idx < len(posts):
        nav_buttons.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", 
            callback_data=f"posts_page:{list_type}:{page+1}"
        ))
    
    if nav_buttons:
        buttons.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    if len(posts) > posts_per_page:
        total_pages = (len(posts) + posts_per_page - 1) // posts_per_page
        page_info_text = f"üìÑ {page + 1}/{total_pages}"
        
        page_buttons = []
        if page > 0:
            page_buttons.append(InlineKeyboardButton(text="‚è™ –ü–µ—Ä–≤–∞—è", callback_data=f"posts_page:{list_type}:0"))
        if page < total_pages - 1:
            page_buttons.append(InlineKeyboardButton(text="‚è© –ü–æ—Å–ª–µ–¥–Ω—è—è", callback_data=f"posts_page:{list_type}:{total_pages-1}"))
        
        if page_buttons:
            buttons.append(page_buttons)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        buttons.append([InlineKeyboardButton(text=page_info_text, callback_data="page_info")])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.append([InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.message(Command("list"))
async def cmd_list_posts(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤"""
    user_id = message.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    await show_posts_menu(message, user, lang)

async def show_posts_menu(message, user, lang):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å—Ç–æ–≤"""
    user_id = user.get("user_id")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    try:
        all_posts = supabase_db.db.list_posts(user_id=user_id, only_pending=False) or []
        scheduled = [p for p in all_posts if not p.get('published') and not p.get('draft') and p.get('publish_time')]
        drafts = [p for p in all_posts if p.get('draft')]
        published = [p for p in all_posts if p.get('published')]
        
        text = (
            "üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏**\n\n"
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(scheduled)}\n"
            f"üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: {len(drafts)}\n"
            f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: {len(published)}\n"
            f"üìã –í—Å–µ–≥–æ: {len(all_posts)}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        )
    except Exception as e:
        print(f"Error getting posts stats: {e}")
        text = "üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    
    keyboard = get_posts_main_menu_keyboard(lang)
    
    if hasattr(message, 'edit_text'):
        await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data == "posts_menu")
async def callback_posts_menu(callback: CallbackQuery):
    """Callback –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ—Å—Ç–æ–≤"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    if not user:
        user = supabase_db.db.ensure_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    await show_posts_menu(callback.message, user, lang)
    await callback.answer()

@router.callback_query(F.data == "posts_scheduled")
async def callback_posts_scheduled(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    
    try:
        posts = supabase_db.db.get_scheduled_posts_by_channel(user_id) or []
        
        if not posts:
            text = "‚è∞ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã**\n\n‚ùå –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="menu_create_post_direct")],
                [InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")]
            ])
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        else:
            text = f"‚è∞ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã** ({len(posts)})\n\n"
            keyboard = get_post_list_keyboard(posts, 0, 5, "scheduled")
            
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
            
    except Exception as e:
        print(f"Error getting scheduled posts: {e}")
        text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    await callback.answer()

@router.callback_query(F.data == "posts_drafts")
async def callback_posts_drafts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    
    try:
        posts = supabase_db.db.get_draft_posts_by_channel(user_id) or []
        
        if not posts:
            text = "üìù **–ß–µ—Ä–Ω–æ–≤–∏–∫–∏**\n\n‚ùå –ù–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="menu_create_post_direct")],
                [InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")]
            ])
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        else:
            text = f"üìù **–ß–µ—Ä–Ω–æ–≤–∏–∫–∏** ({len(posts)})\n\n"
            keyboard = get_post_list_keyboard(posts, 0, 5, "drafts")
            
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
            
    except Exception as e:
        print(f"Error getting draft posts: {e}")
        text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    await callback.answer()

@router.callback_query(F.data == "posts_published")
async def callback_posts_published(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    
    try:
        all_posts = supabase_db.db.list_posts(user_id=user_id, only_pending=False) or []
        published_posts = [p for p in all_posts if p.get('published')]
        
        if not published_posts:
            text = "‚úÖ **–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã**\n\n‚ùå –ù–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="menu_create_post_direct")],
                [InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")]
            ])
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        else:
            text = f"‚úÖ **–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã** ({len(published_posts)})\n\n"
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            published_posts.sort(key=lambda x: x.get('created_at', ''), reverse=True)
            keyboard = get_post_list_keyboard(published_posts, 0, 5, "published")
            
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
            
    except Exception as e:
        print(f"Error getting published posts: {e}")
        text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    await callback.answer()

@router.callback_query(F.data == "posts_all")
async def callback_posts_all(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    
    try:
        posts = supabase_db.db.list_posts(user_id=user_id, only_pending=False) or []
        
        if not posts:
            text = "üìã **–í—Å–µ –ø–æ—Å—Ç—ã**\n\n‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="menu_create_post_direct")],
                [InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")]
            ])
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        else:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º —á–µ—Ä–Ω–æ–≤–∏–∫–∏, –ø–æ—Ç–æ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ
            scheduled = [p for p in posts if not p.get('published') and not p.get('draft') and p.get('publish_time')]
            drafts = [p for p in posts if p.get('draft')]
            published = [p for p in posts if p.get('published')]
            published.sort(key=lambda x: x.get('created_at', ''), reverse=True)
            
            sorted_posts = scheduled + drafts + published
            
            text = f"üìã **–í—Å–µ –ø–æ—Å—Ç—ã** ({len(posts)})\n\n"
            keyboard = get_post_list_keyboard(sorted_posts, 0, 5, "all")
            
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
            
    except Exception as e:
        print(f"Error getting all posts: {e}")
        text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    await callback.answer()

@router.callback_query(F.data.startswith("posts_page:"))
async def callback_posts_page(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤"""
    parts = callback.data.split(":")
    list_type = parts[1]
    page = int(parts[2])
    
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    
    try:
        if list_type == "scheduled":
            posts = supabase_db.db.get_scheduled_posts_by_channel(user_id) or []
            title = "‚è∞ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã**"
        elif list_type == "drafts":
            posts = supabase_db.db.get_draft_posts_by_channel(user_id) or []
            title = "üìù **–ß–µ—Ä–Ω–æ–≤–∏–∫–∏**"
        elif list_type == "published":
            all_posts = supabase_db.db.list_posts(user_id=user_id, only_pending=False) or []
            posts = [p for p in all_posts if p.get('published')]
            posts.sort(key=lambda x: x.get('created_at', ''), reverse=True)
            title = "‚úÖ **–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã**"
        else:  # all
            posts = supabase_db.db.list_posts(user_id=user_id, only_pending=False) or []
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º
            scheduled = [p for p in posts if not p.get('published') and not p.get('draft') and p.get('publish_time')]
            drafts = [p for p in posts if p.get('draft')]
            published = [p for p in posts if p.get('published')]
            published.sort(key=lambda x: x.get('created_at', ''), reverse=True)
            posts = scheduled + drafts + published
            title = "üìã **–í—Å–µ –ø–æ—Å—Ç—ã**"
        
        text = f"{title} ({len(posts)})\n\n"
        keyboard = get_post_list_keyboard(posts, page, 5, list_type)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        print(f"Error in posts pagination: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    
    await callback.answer()

@router.callback_query(F.data == "page_info")
async def callback_page_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)"""
    await callback.answer()

@router.callback_query(F.data.startswith("post_view:"))
async def callback_post_view(callback: CallbackQuery):
    """–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)"""
    post_id = int(callback.data.split(":", 1)[1])
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
    post = supabase_db.db.get_post(post_id)
    if not post:
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª
    if not supabase_db.db.is_channel_admin(post.get("channel_id"), user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    user = supabase_db.db.get_user(user_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ view_post
        from view_post import send_post_preview_safe, format_time_for_user
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞ –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await send_post_preview_safe(callback.message, post)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞–∫ –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        channel = supabase_db.db.get_channel(post['channel_id'])
        channel_name = channel['name'] if channel else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª'
        
        info_text = f"üëÄ **–ü–æ—Å—Ç #{post_id}**\n\n"
        info_text += f"üì∫ **–ö–∞–Ω–∞–ª:** {channel_name}\n"
        
        if post.get('published'):
            info_text += "‚úÖ **–°—Ç–∞—Ç—É—Å:** –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω\n"
        elif post.get('draft'):
            info_text += "üìù **–°—Ç–∞—Ç—É—Å:** –ß–µ—Ä–Ω–æ–≤–∏–∫\n"
        elif post.get('publish_time'):
            if user:
                formatted_time = format_time_for_user(post['publish_time'], user)
                info_text += f"‚è∞ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:** {formatted_time}\n"
            else:
                info_text += f"‚è∞ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:** {post['publish_time']}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π
        buttons = []
        
        if not post.get('published'):
            buttons.append([
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"post_edit_direct:{post_id}"),
                InlineKeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"post_publish_cmd:{post_id}")
            ])
            buttons.append([
                InlineKeyboardButton(text="üìÖ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"post_reschedule_cmd:{post_id}"),
                InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"post_delete_cmd:{post_id}")
            ])
        
        buttons.append([
            InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É", callback_data="posts_menu"),
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(info_text, parse_mode="Markdown", reply_markup=keyboard)
        await callback.answer()
        
    except ImportError:
        # Fallback –µ—Å–ª–∏ –º–æ–¥—É–ª—å view_post –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        info_text = f"üëÄ **–ü–æ—Å—Ç #{post_id}**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/view {post_id}` –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É", callback_data="posts_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await callback.message.answer(info_text, parse_mode="Markdown", reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        print(f"Error in post view: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞")

async def send_post_preview_safe(message: Message, post: dict):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞"""
    try:
        from view_post import send_post_preview
        await send_post_preview(message, post)
    except Exception as e:
        print(f"Error sending post preview: {e}")
        # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–æ–º
        text = f"üìù **–ü—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞ #{post['id']}**\n\n"
        
        if post.get('text'):
            text += f"**–¢–µ–∫—Å—Ç:** {post['text'][:200]}{'...' if len(post['text']) > 200 else ''}\n"
        
        if post.get('media_type'):
            text += f"**–ú–µ–¥–∏–∞:** {post['media_type']}\n"
        
        if post.get('parse_mode'):
            text += f"**–§–æ—Ä–º–∞—Ç:** {post['parse_mode']}\n"
        
        await message.answer(text, parse_mode="Markdown")
