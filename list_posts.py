from aiogram import Router, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
import supabase_db
from datetime import datetime
from zoneinfo import ZoneInfo

router = Router()

def format_post_time(post: dict, user: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø–æ—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if post.get("published"):
        return "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω"
    elif post.get("draft"):
        return "üìù –ß–µ—Ä–Ω–æ–≤–∏–∫"
    elif post.get("publish_time"):
        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            time_str = post["publish_time"]
            if isinstance(time_str, str):
                if time_str.endswith('Z'):
                    time_str = time_str[:-1] + '+00:00'
                utc_time = datetime.fromisoformat(time_str)
            else:
                utc_time = time_str
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_tz = ZoneInfo(user.get('timezone', 'UTC'))
            local_time = utc_time.astimezone(user_tz)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
            return f"‚è∞ {local_time.strftime('%d.%m %H:%M')}"
        except:
            return "‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω"
    else:
        return "‚ùì –ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏"

def get_posts_list_keyboard(has_scheduled: bool = False, has_drafts: bool = False, has_published: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤"""
    buttons = []
    
    if has_scheduled:
        buttons.append([InlineKeyboardButton(text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="posts_scheduled")])
    if has_drafts:
        buttons.append([InlineKeyboardButton(text="üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–∏", callback_data="posts_drafts")])
    if has_published:
        buttons.append([InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ", callback_data="posts_published")])
    
    buttons.append([
        InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="menu_create_post_direct"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.message(Command("list"))
async def cmd_list_posts(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤"""
    try:
        user_id = message.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        user = supabase_db.db.get_user(user_id)
        if not user:
            user = supabase_db.db.ensure_user(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ user –Ω–µ None –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_channels = supabase_db.db.get_user_channels(user_id)
        
        if not user_channels:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì∫ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="channels_add")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await message.answer(
                "‚ùå **–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤**\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ /channels –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–º–∏.",
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            all_posts = supabase_db.db.list_posts(user_id=user_id, only_pending=False)
            if all_posts is None:
                all_posts = []
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {e}")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="posts_menu")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await message.answer(
                "‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            return
        
        if not all_posts:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç", callback_data="menu_create_post_direct")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await message.answer(
                "üìã **–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤**\n\n"
                "üÜï –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π!",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            return
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        scheduled_posts = []
        draft_posts = []
        published_posts = []
        
        for post in all_posts:
            if post.get("published"):
                published_posts.append(post)
            elif post.get("draft"):
                draft_posts.append(post)
            elif post.get("publish_time"):
                scheduled_posts.append(post)
            else:
                # –ü–æ—Å—Ç—ã –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –Ω–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏ - —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
                scheduled_posts.append(post)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º
        scheduled_posts.sort(key=lambda x: x.get("publish_time") or "")
        draft_posts.sort(key=lambda x: x.get("created_at") or "", reverse=True)
        published_posts.sort(key=lambda x: x.get("publish_time") or "", reverse=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"üìã **–í—Å–µ –ø–æ—Å—Ç—ã –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤**\n\n"
        text += f"üìä –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(all_posts)}\n\n"
        
        if scheduled_posts:
            text += f"‚è∞ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ({len(scheduled_posts)}):**\n"
            for i, post in enumerate(scheduled_posts[:5], 1):
                try:
                    channel = supabase_db.db.get_channel(post.get("channel_id"))
                    channel_name = channel.get("name", "?") if channel else "?"
                    time_str = format_post_time(post, user)
                    post_text = post.get("text", "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")[:30]
                    text += f"{i}. #{post['id']} ‚Ä¢ {channel_name} ‚Ä¢ {time_str}\n   üìù {post_text}...\n"
                except Exception as e:
                    print(f"Error formatting post {post.get('id')}: {e}")
                    text += f"{i}. #{post.get('id', '?')} ‚Ä¢ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏\n"
            if len(scheduled_posts) > 5:
                text += f"   _...–∏ –µ—â–µ {len(scheduled_posts) - 5} –ø–æ—Å—Ç–æ–≤_\n"
            text += "\n"
        
        if draft_posts:
            text += f"üìù **–ß–µ—Ä–Ω–æ–≤–∏–∫–∏ ({len(draft_posts)}):**\n"
            for i, post in enumerate(draft_posts[:3], 1):
                try:
                    channel = supabase_db.db.get_channel(post.get("channel_id"))
                    channel_name = channel.get("name", "?") if channel else "?"
                    post_text = post.get("text", "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")[:30]
                    text += f"{i}. #{post['id']} ‚Ä¢ {channel_name}\n   üìù {post_text}...\n"
                except Exception as e:
                    print(f"Error formatting draft post {post.get('id')}: {e}")
                    text += f"{i}. #{post.get('id', '?')} ‚Ä¢ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏\n"
            if len(draft_posts) > 3:
                text += f"   _...–∏ –µ—â–µ {len(draft_posts) - 3} —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤_\n"
            text += "\n"
        
        if published_posts:
            text += f"‚úÖ **–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ ({len(published_posts)}):**\n"
            text += f"   _–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ {min(3, len(published_posts))} –∏–∑ {len(published_posts)}_\n"
            for i, post in enumerate(published_posts[:3], 1):
                try:
                    channel = supabase_db.db.get_channel(post.get("channel_id"))
                    channel_name = channel.get("name", "?") if channel else "?"
                    post_text = post.get("text", "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")[:30]
                    text += f"{i}. #{post['id']} ‚Ä¢ {channel_name}\n   üìù {post_text}...\n"
                except Exception as e:
                    print(f"Error formatting published post {post.get('id')}: {e}")
                    text += f"{i}. #{post.get('id', '?')} ‚Ä¢ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        text += (
            f"\nüí° **–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            f"‚Ä¢ `/view <ID>` - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞\n"
            f"‚Ä¢ `/edit <ID>` - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç\n"
            f"‚Ä¢ `/delete <ID>` - —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç"
        )
        
        keyboard = get_posts_list_keyboard(
            has_scheduled=bool(scheduled_posts),
            has_drafts=bool(draft_posts),
            has_published=bool(published_posts)
        )
        
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        print(f"Error in cmd_list_posts: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –ø–æ—Å—Ç—ã" –∏–∑ –º–µ–Ω—é
@router.callback_query(F.data == "posts_menu")
async def callback_posts_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ callback"""
    try:
        user_id = callback.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        user = supabase_db.db.get_user(user_id)
        if not user:
            user = supabase_db.db.ensure_user(user_id)
        
        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_channels = supabase_db.db.get_user_channels(user_id)
        
        if not user_channels:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì∫ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="channels_add")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await callback.message.edit_text(
                "‚ùå **–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤**\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ /channels –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–º–∏.",
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            all_posts = supabase_db.db.list_posts(user_id=user_id, only_pending=False)
            if all_posts is None:
                all_posts = []
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {e}")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="posts_menu")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await callback.message.edit_text(
                "‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            await callback.answer()
            return
        
        if not all_posts:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç", callback_data="menu_create_post_direct")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await callback.message.edit_text(
                "üìã **–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤**\n\n"
                "üÜï –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π!",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            await callback.answer()
            return
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        scheduled_posts = []
        draft_posts = []
        published_posts = []
        
        for post in all_posts:
            if post.get("published"):
                published_posts.append(post)
            elif post.get("draft"):
                draft_posts.append(post)
            elif post.get("publish_time"):
                scheduled_posts.append(post)
            else:
                # –ü–æ—Å—Ç—ã –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –Ω–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏
                scheduled_posts.append(post)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏**\n\n"
        text += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        
        if scheduled_posts:
            text += f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(scheduled_posts)}\n"
        if draft_posts:
            text += f"üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: {len(draft_posts)}\n"
        if published_posts:
            text += f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: {len(published_posts)}\n"
        
        text += f"\nüî¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(all_posts)}"
        
        keyboard = get_posts_list_keyboard(
            has_scheduled=bool(scheduled_posts),
            has_drafts=bool(draft_posts),
            has_published=bool(published_posts)
        )
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
        
    except Exception as e:
        print(f"Error in callback_posts_menu: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "posts_scheduled")
async def callback_posts_scheduled(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    try:
        user_id = callback.from_user.id
        user = supabase_db.db.get_user(user_id)
        if not user:
            user = supabase_db.db.ensure_user(user_id)
        
        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_channels = supabase_db.db.get_user_channels(user_id)
        
        if not user_channels:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="posts_menu")]
            ])
            await callback.message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", reply_markup=keyboard)
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            all_posts = supabase_db.db.list_posts(user_id=user_id, only_pending=False)
            if all_posts is None:
                all_posts = []
            posts = [p for p in all_posts if not p.get("published") and not p.get("draft") and (p.get("publish_time") or not p.get("draft"))]
            posts.sort(key=lambda x: x.get("publish_time") or "")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {e}")
            posts = []
        
        if not posts:
            text = "‚è∞ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã**\n\n‚ùå –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="menu_create_post_direct")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="posts_menu")]
            ])
        else:
            text = "‚è∞ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã**\n\n"
            
            current_channel = None
            for post in posts:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                    channel = supabase_db.db.get_channel(post.get("channel_id"))
                    channel_name = channel.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª") if channel else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
                    
                    if channel_name != current_channel:
                        if current_channel is not None:
                            text += "\n"
                        text += f"**üì∫ {channel_name}:**\n"
                        current_channel = channel_name
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                    time_str = format_post_time(post, user)
                    post_text = post.get("text", "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")[:50]
                    
                    text += f"‚Ä¢ #{post['id']} {time_str}\n  üìù {post_text}...\n"
                except Exception as e:
                    print(f"Error formatting scheduled post {post.get('id')}: {e}")
                    text += f"‚Ä¢ #{post.get('id', '?')} –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø–æ—Å—Ç–∞–º
            buttons = []
            if posts:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø–æ—Å—Ç–æ–≤ –∫–∞–∫ –∫–Ω–æ–ø–∫–∏
                for post in posts[:5]:
                    try:
                        channel = supabase_db.db.get_channel(post.get("channel_id"))
                        channel_name = channel.get("name", "?")[:10] if channel else "?"
                        buttons.append([InlineKeyboardButton(
                            text=f"#{post['id']} ‚Ä¢ {channel_name}",
                            callback_data=f"post_view:{post['id']}"
                        )])
                    except Exception as e:
                        print(f"Error creating button for post {post.get('id')}: {e}")
            
            buttons.append([InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="menu_create_post_direct")])
            buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="posts_menu")])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
        
    except Exception as e:
        print(f"Error in callback_posts_scheduled: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "posts_drafts")
async def callback_posts_drafts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫–∏"""
    try:
        user_id = callback.from_user.id
        user = supabase_db.db.get_user(user_id)
        if not user:
            user = supabase_db.db.ensure_user(user_id)
        
        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_channels = supabase_db.db.get_user_channels(user_id)
        
        if not user_channels:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="posts_menu")]
            ])
            await callback.message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", reply_markup=keyboard)
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            all_posts = supabase_db.db.list_posts(user_id=user_id, only_pending=False)
            if all_posts is None:
                all_posts = []
            posts = [p for p in all_posts if p.get("draft")]
            posts.sort(key=lambda x: x.get("created_at") or "", reverse=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: {e}")
            posts = []
        
        if not posts:
            text = "üìù **–ß–µ—Ä–Ω–æ–≤–∏–∫–∏**\n\n‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="menu_create_post_direct")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="posts_menu")]
            ])
        else:
            text = "üìù **–ß–µ—Ä–Ω–æ–≤–∏–∫–∏**\n\n"
            
            for i, post in enumerate(posts, 1):
                try:
                    channel = supabase_db.db.get_channel(post.get("channel_id"))
                    channel_name = channel.get("name", "–ö–∞–Ω–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω") if channel else "–ö–∞–Ω–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"
                    post_text = post.get("text", "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")[:50]
                    
                    created_at = post.get("created_at", "")
                    if created_at:
                        try:
                            dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                            date_str = dt.strftime("%d.%m.%Y")
                        except:
                            date_str = ""
                    else:
                        date_str = ""
                    
                    text += f"{i}. **#{post['id']}** ‚Ä¢ {channel_name}\n"
                    if date_str:
                        text += f"   üìÖ {date_str}\n"
                    text += f"   üìù {post_text}...\n\n"
                except Exception as e:
                    print(f"Error formatting draft post {post.get('id')}: {e}")
                    text += f"{i}. **#{post.get('id', '?')}** ‚Ä¢ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            buttons = []
            if posts:
                for post in posts[:5]:
                    try:
                        buttons.append([InlineKeyboardButton(
                            text=f"#{post['id']} ‚Ä¢ –û—Ç–∫—Ä—ã—Ç—å",
                            callback_data=f"post_view:{post['id']}"
                        )])
                    except Exception as e:
                        print(f"Error creating button for draft post {post.get('id')}: {e}")
            
            buttons.append([InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="menu_create_post_direct")])
            buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="posts_menu")])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
        
    except Exception as e:
        print(f"Error in callback_posts_drafts: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "posts_published")
async def callback_posts_published(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    try:
        user_id = callback.from_user.id
        user = supabase_db.db.get_user(user_id)
        if not user:
            user = supabase_db.db.ensure_user(user_id)
        
        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_channels = supabase_db.db.get_user_channels(user_id)
        
        if not user_channels:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="posts_menu")]
            ])
            await callback.message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", reply_markup=keyboard)
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ
        try:
            all_posts = supabase_db.db.list_posts(user_id=user_id, only_pending=False)
            if all_posts is None:
                all_posts = []
            posts = [p for p in all_posts if p.get("published")]
            posts.sort(key=lambda x: x.get("publish_time") or "", reverse=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {e}")
            posts = []
        
        if not posts:
            text = "‚úÖ **–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã**\n\n‚ùå –ù–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="menu_create_post_direct")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="posts_menu")]
            ])
        else:
            text = f"‚úÖ **–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã**\n\n–í—Å–µ–≥–æ: {len(posts)}\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            for i, post in enumerate(posts[:10], 1):
                try:
                    channel = supabase_db.db.get_channel(post.get("channel_id"))
                    channel_name = channel.get("name", "?") if channel else "?"
                    post_text = post.get("text", "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")[:50]
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    pub_time = post.get("publish_time")
                    if pub_time:
                        try:
                            dt = datetime.fromisoformat(pub_time.replace('Z', '+00:00'))
                            date_str = dt.strftime("%d.%m.%Y %H:%M")
                        except:
                            date_str = "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
                    else:
                        date_str = "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
                    
                    text += f"{i}. **#{post['id']}** ‚Ä¢ {channel_name}\n"
                    text += f"   üìÖ {date_str}\n"
                    text += f"   üìù {post_text}...\n\n"
                except Exception as e:
                    print(f"Error formatting published post {post.get('id')}: {e}")
                    text += f"{i}. **#{post.get('id', '?')}** ‚Ä¢ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏\n\n"
            
            if len(posts) > 10:
                text += f"_...–∏ –µ—â–µ {len(posts) - 10} –ø–æ—Å—Ç–æ–≤_"
            
            buttons = []
            buttons.append([InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="menu_create_post_direct")])
            buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="posts_menu")])
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
        
    except Exception as e:
        print(f"Error in callback_posts_published: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞ –ø–æ callback
@router.callback_query(F.data.startswith("post_view:"))
async def callback_view_post(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ callback"""
    try:
        post_id = int(callback.data.split(":")[-1])
        user_id = callback.from_user.id
        user = supabase_db.db.get_user(user_id)
        if not user:
            user = supabase_db.db.ensure_user(user_id)
        
        if not user:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        post = supabase_db.db.get_post(post_id)
        if not post:
            await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª
        if not supabase_db.db.is_channel_admin(post.get("channel_id"), user_id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
        try:
            from view_post import send_post_preview, format_time_for_user
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞
            await send_post_preview(callback.message, post)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
            channel = supabase_db.db.get_channel(post['channel_id'])
            channel_name = channel['name'] if channel else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª'
            
            info_text = f"üëÄ **–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
            info_text += f"üì∫ **–ö–∞–Ω–∞–ª:** {channel_name}\n"
            
            if post.get('published'):
                info_text += "‚úÖ **–°—Ç–∞—Ç—É—Å:** –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω\n"
            elif post.get('draft'):
                info_text += "üìù **–°—Ç–∞—Ç—É—Å:** –ß–µ—Ä–Ω–æ–≤–∏–∫\n"
            elif post.get('publish_time'):
                formatted_time = format_time_for_user(post['publish_time'], user)
                info_text += f"‚è∞ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:** {formatted_time}\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π
            buttons = []
            
            if not post.get('published'):
                buttons.append([
                    InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"post_edit_direct:{post_id}"),
                    InlineKeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"post_publish_cmd:{post_id}")
                ])
                buttons.append([
                    InlineKeyboardButton(text="üìÖ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"post_reschedule_cmd:{post_id}"),
                    InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"post_delete_cmd:{post_id}")
                ])
            
            buttons.append([
                InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu"),
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await callback.message.answer(info_text, parse_mode="Markdown", reply_markup=keyboard)
            await callback.answer()
            
        except ImportError:
            # Fallback –µ—Å–ª–∏ –º–æ–¥—É–ª—å view_post –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            info_text = f"üëÄ **–ü–æ—Å—Ç #{post_id}**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/view {post_id}` –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="posts_menu")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await callback.message.answer(info_text, parse_mode="Markdown", reply_markup=keyboard)
            await callback.answer()
            
    except Exception as e:
        print(f"Error in callback_view_post: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
