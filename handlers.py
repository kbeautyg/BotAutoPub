import logging
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from telegram.error import TelegramError
from database import db
from utils import (
    create_main_menu_keyboard, create_back_button, create_cancel_button,
    TimeZoneManager, TextFormatter, ButtonManager, DateTimeParser,
    truncate_text, validate_url
)
from scheduler import post_scheduler, channel_manager
from config import Config
import re
from datetime import datetime

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(WAITING_FOR_TEXT, WAITING_FOR_MEDIA, WAITING_FOR_BUTTONS, 
 WAITING_FOR_SCHEDULE, WAITING_FOR_CHANNEL_ID, WAITING_FOR_CHANNEL_TITLE,
 CONFIRM_POST, EDIT_POST) = range(8)

class BotHandlers:
    """–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞"""
    
    @staticmethod
    async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        db_user = await db.get_user(user.id)
        
        if not db_user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            is_admin = user.id == Config.ADMIN_TELEGRAM_ID
            await db.create_user(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
                is_admin=is_admin
            )
            
            welcome_text = (
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
                "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –∫–∞–Ω–∞–ª–∞–º–∏.\n"
            )
            
            if is_admin:
                welcome_text += (
                    "üîë –í—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.\n"
                    "–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏ –∏ –ø–æ—Å—Ç–∞–º–∏."
                )
            else:
                welcome_text += (
                    "‚ÑπÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞."
                )
        else:
            welcome_text = f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!"
        
        is_admin = await db.is_admin(user.id)
        keyboard = create_main_menu_keyboard(is_admin)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await db.log_action(user.id, 'start_command')
    
    @staticmethod
    async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        user = update.effective_user
        is_admin = await db.is_admin(user.id)
        
        help_text = (
            "ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n\n"
            "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
        )
        
        if is_admin:
            help_text += (
                "<b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
                "/post - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç\n"
                "/channels - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n"
                "/scheduled - –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã\n"
                "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
                
                "<b>–§—É–Ω–∫—Ü–∏–∏:</b>\n"
                "üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º, –º–µ–¥–∏–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏\n"
                "‚è∞ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è\n"
                "üì∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n"
                "üåç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞\n"
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n\n"
                
                "<b>–§–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n"
                "‚Ä¢ 15:30 - —Å–µ–≥–æ–¥–Ω—è –≤ 15:30 (–∏–ª–∏ –∑–∞–≤—Ç—Ä–∞, –µ—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ)\n"
                "‚Ä¢ 25.12 15:30 - 25 –¥–µ–∫–∞–±—Ä—è –≤ 15:30\n"
                "‚Ä¢ 25.12.2024 15:30 - –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞\n"
                "‚Ä¢ —á–µ—Ä–µ–∑ 30 –º–∏–Ω - —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç\n"
                "‚Ä¢ —á–µ—Ä–µ–∑ 2 —á–∞—Å - —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\n"
                "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00 - –∑–∞–≤—Ç—Ä–∞ –≤ 10:00\n\n"
                
                "<b>–§–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–æ–∫:</b>\n"
                "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ - https://example.com\n"
                "–ö–Ω–æ–ø–∫–∞ 1 | –ö–Ω–æ–ø–∫–∞ 2 - https://example.com\n"
                "(–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ = –Ω–æ–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫)"
            )
        else:
            help_text += (
                "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n"
                "üåç –ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞\n"
                "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"
            )
        
        await update.message.reply_text(help_text, parse_mode='HTML')
    
    @staticmethod
    async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
        user = update.effective_user
        is_admin = await db.is_admin(user.id)
        keyboard = create_main_menu_keyboard(is_admin)
        
        await update.message.reply_text(
            "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=keyboard
        )
    
    @staticmethod
    async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
        user = update.effective_user
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.clear_user_state(user.id)
        
        is_admin = await db.is_admin(user.id)
        keyboard = create_main_menu_keyboard(is_admin)
        
        await update.message.reply_text(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=keyboard
        )
        
        return ConversationHandler.END

class CallbackHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    @staticmethod
    async def main_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        is_admin = await db.is_admin(user.id)
        keyboard = create_main_menu_keyboard(is_admin)
        
        await query.edit_message_text(
            "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=keyboard
        )
    
    @staticmethod
    async def settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        db_user = await db.get_user(user.id)
        
        keyboard = [
            [InlineKeyboardButton("üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="change_timezone")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        settings_text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name}\n"
            f"üÜî <b>ID:</b> <code>{user.id}</code>\n"
            f"üåç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {db_user.get('timezone', 'UTC') if db_user else 'UTC'}\n"
            f"üîë <b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if await db.is_admin(user.id) else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}"
        )
        
        await query.edit_message_text(
            settings_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
    @staticmethod
    async def change_timezone_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith('tz_'):
            # –í—ã–±—Ä–∞–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
            timezone = query.data[3:]
            user_id = query.from_user.id
            
            success = await db.update_user_timezone(user_id, timezone)
            
            if success:
                # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                tz_name = None
                for name, tz in TimeZoneManager.COMMON_TIMEZONES.items():
                    if tz == timezone:
                        tz_name = name
                        break
                
                await query.edit_message_text(
                    f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {tz_name or timezone}",
                    reply_markup=create_back_button("settings")
                )
                
                await db.log_action(user_id, 'timezone_changed', {'timezone': timezone})
            else:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞",
                    reply_markup=create_back_button("settings")
                )
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
            keyboard = TimeZoneManager.get_timezone_keyboard()
            
            await query.edit_message_text(
                "üåç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
                reply_markup=keyboard
            )
    
    @staticmethod
    async def back_to_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
        await CallbackHandlers.settings_callback(update, context)

class ChannelHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    
    @staticmethod
    async def manage_channels_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        if not await db.is_admin(user.id):
            await query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏",
                reply_markup=create_back_button()
            )
            return
        
        channels = await db.get_channels()
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")],
        ]
        
        if channels:
            keyboard.append([InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data="list_channels")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        text = f"üì∫ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}"
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
    @staticmethod
    async def list_channels_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        channels = await db.get_channels()
        
        if not channels:
            await query.edit_message_text(
                "üì∫ –ö–∞–Ω–∞–ª—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã",
                reply_markup=create_back_button("manage_channels")
            )
            return
        
        text = "üì∫ <b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:</b>\n\n"
        keyboard = []
        
        for channel in channels:
            title = truncate_text(channel['title'], 30)
            text += f"‚Ä¢ {title}\n"
            text += f"  ID: <code>{channel['telegram_id']}</code>\n"
            if channel.get('username'):
                text += f"  @{channel['username']}\n"
            text += "\n"
            
            keyboard.append([
                InlineKeyboardButton(
                    f"‚öôÔ∏è {title}", 
                    callback_data=f"channel_settings_{channel['telegram_id']}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_channels")])
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
    @staticmethod
    async def add_channel_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await db.set_user_state(user.id, 'waiting_channel_id')
        
        text = (
            "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.\n\n"
            "üí° <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞:</b>\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "2. –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890)\n"
            "   –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞\n\n"
            "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
        )
        
        await query.edit_message_text(
            text,
            reply_markup=create_cancel_button(),
            parse_mode='HTML'
        )
        
        return WAITING_FOR_CHANNEL_ID

class PostHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤"""
    
    @staticmethod
    async def create_post_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        if not await db.is_admin(user.id):
            await query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤",
                reply_markup=create_back_button()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–Ω–∞–ª–æ–≤
        channels = await db.get_channels()
        if not channels:
            await query.edit_message_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª",
                reply_markup=create_back_button("manage_channels")
            )
            return
        
        # –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞
        keyboard = []
        for channel in channels:
            title = truncate_text(channel['title'], 30)
            keyboard.append([
                InlineKeyboardButton(
                    title, 
                    callback_data=f"select_channel_{channel['telegram_id']}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        await query.edit_message_text(
            "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
    @staticmethod
    async def select_channel_for_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ—Å—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        channel_id = int(query.data.split('_')[2])
        user = query.from_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await db.set_user_state(user.id, 'creating_post', {
            'channel_id': channel_id,
            'step': 'text'
        })
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channels = await db.get_channels()
        channel = next((c for c in channels if c['telegram_id'] == channel_id), None)
        
        if not channel:
            await query.edit_message_text(
                "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=create_back_button("create_post")
            )
            return
        
        keyboard = [
            [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="skip_text")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
        ]
        
        text = (
            f"üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞:</b>\n"
            f"üì∫ {channel['title']}\n\n"
            "1Ô∏è‚É£ <b>–®–∞–≥ 1: –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç'.\n\n"
            "üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
            "‚Ä¢ <code>&lt;b&gt;–∂–∏—Ä–Ω—ã–π&lt;/b&gt;</code>\n"
            "‚Ä¢ <code>&lt;i&gt;–∫—É—Ä—Å–∏–≤&lt;/i&gt;</code>\n"
            "‚Ä¢ <code>&lt;u&gt;–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π&lt;/u&gt;</code>\n"
            "‚Ä¢ <code>&lt;code&gt;–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π&lt;/code&gt;</code>\n"
            "‚Ä¢ <code>&lt;a href=\"url\"&gt;—Å—Å—ã–ª–∫–∞&lt;/a&gt;</code>"
        )
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        return WAITING_FOR_TEXT

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–∞–π–ª–µ...