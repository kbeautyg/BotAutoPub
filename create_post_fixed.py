from aiogram import Router, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime
from zoneinfo import ZoneInfo
from states import PostCreationFlow
import supabase_db
from __init__ import TEXTS
import re
import json

router = Router()

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ò–ò-–∞–≥–µ–Ω—Ç–∞
TEXT_COMMANDS = {
    "skip": ["skip", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "/skip"],
    "cancel": ["cancel", "–æ—Ç–º–µ–Ω–∞", "/cancel", "–æ—Ç–º–µ–Ω–∏—Ç—å"],
    "back": ["back", "–Ω–∞–∑–∞–¥", "/back"],
    "next": ["next", "–¥–∞–ª–µ–µ", "/next"],
    "confirm": ["confirm", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "/confirm", "–¥–∞", "yes"],
    "edit": ["edit", "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "/edit"],
}

def is_command(text: str, command: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π"""
    if not text:
        return False
    text_lower = text.strip().lower()
    return text_lower in TEXT_COMMANDS.get(command, [])

def get_navigation_keyboard(current_step: str, lang: str = "ru", can_skip: bool = True):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞"""
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_row = []
    if current_step != "step_text":  # –ù–µ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ
        nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="post_nav_back"))
    
    if can_skip:
        nav_row.append(InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="post_nav_skip"))
    
    if nav_row:
        buttons.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="post_nav_cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_format_keyboard(lang: str = "ru"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù HTML", callback_data="format_html")],
        [InlineKeyboardButton(text="üìã Markdown", callback_data="format_markdown")],
        [InlineKeyboardButton(text="üìÑ –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="format_none")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="post_nav_back")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="post_nav_cancel")]
    ])

def get_time_options_keyboard(lang: str = "ru"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–ø—Ü–∏–π –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="time_now")],
        [InlineKeyboardButton(text="üìù –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫", callback_data="time_draft")],
        [InlineKeyboardButton(text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è", callback_data="time_schedule")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="post_nav_back")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="post_nav_cancel")]
    ])

def get_channels_keyboard(channels: list, lang: str = "ru"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞"""
    buttons = []
    
    for i, channel in enumerate(channels):
        admin_status = "‚úÖ" if channel.get('is_admin_verified') else "‚ùì"
        text = f"{admin_status} {channel['name']}"
        buttons.append([InlineKeyboardButton(
            text=text, 
            callback_data=f"channel_select:{channel['id']}"
        )])
    
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="post_nav_back")])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="post_nav_cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_preview_keyboard(lang: str = "ru"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="post_confirm")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="post_edit_menu")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="post_nav_cancel")]
    ])

def get_edit_menu_keyboard(lang: str = "ru"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_field:text")],
        [InlineKeyboardButton(text="üñº –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞", callback_data="edit_field:media")],
        [InlineKeyboardButton(text="üé® –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç", callback_data="edit_field:format")],
        [InlineKeyboardButton(text="üîò –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫–∏", callback_data="edit_field:buttons")],
        [InlineKeyboardButton(text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="edit_field:time")],
        [InlineKeyboardButton(text="üì∫ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="edit_field:channel")],
        [InlineKeyboardButton(text="üîô –ö –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É", callback_data="post_preview")]
    ])

@router.message(Command("create"))
async def cmd_create_post(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    user_id = message.from_user.id
    user = supabase_db.db.ensure_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    project_id = user.get("current_project")
    if not project_id:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ /project")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–Ω–∞–ª–æ–≤
    channels = supabase_db.db.list_channels(project_id=project_id)
    if not channels:
        await message.answer(
            "‚ùå **–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤**\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ /channels",
            parse_mode="Markdown"
        )
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
    await state.set_data({
        "user_id": user_id,
        "project_id": project_id,
        "text": None,
        "media_type": None,
        "media_file_id": None,
        "parse_mode": "HTML",
        "buttons": None,
        "publish_time": None,
        "repeat_interval": None,
        "channel_id": None,
        "draft": False,
        "step_history": [],
        "current_step": "step_text"
    })
    
    await start_text_step(message, state, lang)

# –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
@router.message(Command("quickpost"))
async def cmd_quick_post(message: Message, state: FSMContext):
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞: /quickpost <–∫–∞–Ω–∞–ª> <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>"""
    user_id = message.from_user.id
    user = supabase_db.db.ensure_user(user_id)
    project_id = user.get("current_project")
    
    if not project_id:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parts = message.text.split(maxsplit=3)
    if len(parts) < 4:
        await message.answer(
            "üìù **–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞**\n\n"
            "–§–æ—Ä–º–∞—Ç: `/quickpost <–∫–∞–Ω–∞–ª> <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>`\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `/quickpost @channel now –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞`\n"
            "‚Ä¢ `/quickpost 1 draft –ß–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ—Å—Ç–∞`\n"
            "‚Ä¢ `/quickpost 2 2024-12-25_15:30 –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç`\n\n"
            "–ö–∞–Ω–∞–ª: @username, ID –∏–ª–∏ –Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ\n"
            "–í—Ä–µ–º—è: now, draft –∏–ª–∏ YYYY-MM-DD_HH:MM",
            parse_mode="Markdown"
        )
        return
    
    channel_ref = parts[1]
    time_ref = parts[2]
    text = parts[3]
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–∞–ª
    channels = supabase_db.db.list_channels(project_id=project_id)
    channel = None
    
    if channel_ref.isdigit():
        idx = int(channel_ref) - 1
        if 0 <= idx < len(channels):
            channel = channels[idx]
    else:
        for ch in channels:
            if (ch.get('username') and f"@{ch['username']}" == channel_ref) or \
               str(ch['chat_id']) == channel_ref or \
               str(ch['id']) == channel_ref:
                channel = ch
                break
    
    if not channel:
        await message.answer(f"‚ùå –ö–∞–Ω–∞–ª '{channel_ref}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
    publish_time = None
    draft = False
    
    if time_ref.lower() == "now":
        publish_time = datetime.now(ZoneInfo("UTC"))
    elif time_ref.lower() == "draft":
        draft = True
    else:
        try:
            dt = datetime.strptime(time_ref, "%Y-%m-%d_%H:%M")
            tz = ZoneInfo(user.get("timezone", "UTC"))
            local_dt = dt.replace(tzinfo=tz)
            publish_time = local_dt.astimezone(ZoneInfo("UTC"))
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: YYYY-MM-DD_HH:MM")
            return
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
    post_data = {
        "user_id": user_id,
        "project_id": project_id,
        "channel_id": channel['id'],
        "text": text,
        "parse_mode": "HTML",
        "publish_time": publish_time.isoformat() if publish_time else None,
        "draft": draft,
        "published": False
    }
    
    post = supabase_db.db.add_post(post_data)
    
    if post:
        status = "üìù —á–µ—Ä–Ω–æ–≤–∏–∫" if draft else "‚è∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω" if publish_time else "—Å–æ–∑–¥–∞–Ω"
        await message.answer(
            f"‚úÖ **–ü–æ—Å—Ç #{post['id']} {status}**\n\n"
            f"–ö–∞–Ω–∞–ª: {channel['name']}\n"
            f"–¢–µ–∫—Å—Ç: {text[:50]}...",
            parse_mode="Markdown"
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞")

async def start_text_step(message: Message, state: FSMContext, lang: str):
    """–®–∞–≥ 1: –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
    await state.set_state(PostCreationFlow.step_text)
    
    text = (
        "üìù **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ - –®–∞–≥ 1/7**\n\n"
        "**–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞**\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å `skip` –∏–ª–∏ `–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å` –¥–ª—è –ø–æ—Å—Ç–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å `cancel` –∏–ª–∏ `–æ—Ç–º–µ–Ω–∞` –¥–ª—è –æ—Ç–º–µ–Ω—ã\n\n"
        "üí° *–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ*"
    )
    
    keyboard = get_navigation_keyboard("step_text", lang, can_skip=True)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(PostCreationFlow.step_text)
async def handle_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞"""
    user = supabase_db.db.get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if is_command(message.text, "skip"):
        data = await state.get_data()
        data["text"] = None
        data["step_history"].append("step_text")
        await state.set_data(data)
        await start_media_step(message, state, lang)
        return
    
    if is_command(message.text, "cancel"):
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    data = await state.get_data()
    data["text"] = message.text
    data["step_history"].append("step_text")
    await state.set_data(data)
    
    await start_media_step(message, state, lang)

async def start_media_step(message: Message, state: FSMContext, lang: str):
    """–®–∞–≥ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞"""
    await state.set_state(PostCreationFlow.step_media)
    
    text = (
        "üñº **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ - –®–∞–≥ 2/7**\n\n"
        "**–î–æ–±–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –∫ –ø–æ—Å—Ç—É**\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ GIF\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å `skip` –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å `back` –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞\n\n"
        "üí° *–ú–µ–¥–∏–∞ –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∫ —Ç–µ–∫—Å—Ç—É –ø–æ—Å—Ç–∞*"
    )
    
    keyboard = get_navigation_keyboard("step_media", lang, can_skip=True)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(PostCreationFlow.step_media)
async def handle_media_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥"""
    user = supabase_db.db.get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if message.text and is_command(message.text, "skip"):
        data = await state.get_data()
        data["step_history"].append("step_media")
        await state.set_data(data)
        await start_format_step(message, state, lang)
        return
    
    if message.text and is_command(message.text, "back"):
        await go_back_step(message, state, lang)
        return
    
    if message.text and is_command(message.text, "cancel"):
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
    media_handled = False
    data = await state.get_data()
    
    if message.photo:
        data["media_type"] = "photo"
        data["media_file_id"] = message.photo[-1].file_id
        media_handled = True
    elif message.video:
        data["media_type"] = "video"
        data["media_file_id"] = message.video.file_id
        media_handled = True
    elif message.animation:
        data["media_type"] = "animation"
        data["media_file_id"] = message.animation.file_id
        media_handled = True
    
    if media_handled:
        data["step_history"].append("step_media")
        await state.set_data(data)
        await start_format_step(message, state, lang)
    else:
        await message.answer(
            "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/GIF) –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É:\n"
            "‚Ä¢ `skip` - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å\n"
            "‚Ä¢ `back` - –Ω–∞–∑–∞–¥\n"
            "‚Ä¢ `cancel` - –æ—Ç–º–µ–Ω–∞",
            parse_mode="Markdown"
        )

async def start_format_step(message: Message, state: FSMContext, lang: str):
    """–®–∞–≥ 3: –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞"""
    await state.set_state(PostCreationFlow.step_format)
    
    text = (
        "üé® **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ - –®–∞–≥ 3/7**\n\n"
        "**–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞**\n\n"
        "‚Ä¢ **HTML** - <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <a href='#'>—Å—Å—ã–ª–∫–∏</a>\n"
        "‚Ä¢ **Markdown** - **–∂–∏—Ä–Ω—ã–π**, *–∫—É—Ä—Å–∏–≤*, [—Å—Å—ã–ª–∫–∏](url)\n"
        "‚Ä¢ **–û–±—ã—á–Ω—ã–π** - –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ: `html`, `markdown`, `none` –∏–ª–∏ `skip`"
    )
    
    keyboard = get_format_keyboard(lang)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(PostCreationFlow.step_format)
async def handle_format_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
    user = supabase_db.db.get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    text_lower = message.text.lower().strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if is_command(message.text, "skip"):
        data = await state.get_data()
        data["step_history"].append("step_format")
        await state.set_data(data)
        await start_buttons_step(message, state, lang)
        return
    
    if is_command(message.text, "back"):
        await go_back_step(message, state, lang)
        return
    
    if is_command(message.text, "cancel"):
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    # –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
    format_map = {
        "html": "HTML",
        "markdown": "Markdown",
        "md": "Markdown",
        "none": None,
        "–æ–±—ã—á–Ω—ã–π": None,
        "–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è": None
    }
    
    if text_lower in format_map:
        data = await state.get_data()
        data["parse_mode"] = format_map[text_lower]
        data["step_history"].append("step_format")
        await state.set_data(data)
        await start_buttons_step(message, state, lang)
    else:
        await message.answer(
            "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "‚Ä¢ `html` - HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ `markdown` - Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ `none` - –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ `skip` - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å (HTML –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)",
            parse_mode="Markdown"
        )

@router.callback_query(F.data.startswith("format_"))
async def handle_format_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"""
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    format_map = {
        "format_html": "HTML",
        "format_markdown": "Markdown",
        "format_none": None
    }
    
    data = await state.get_data()
    data["parse_mode"] = format_map.get(callback.data, "HTML")
    data["step_history"].append("step_format")
    await state.set_data(data)
    
    await callback.answer()
    await start_buttons_step(callback.message, state, lang)

async def start_buttons_step(message: Message, state: FSMContext, lang: str):
    """–®–∞–≥ 4: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫"""
    await state.set_state(PostCreationFlow.step_buttons)
    
    text = (
        "üîò **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ - –®–∞–≥ 4/7**\n\n"
        "**–î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –∫ –ø–æ—Å—Ç—É**\n\n"
        "–§–æ—Ä–º–∞—Ç: `–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | https://example.com`\n"
        "–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "```\n"
        "–ù–∞—à —Å–∞–π—Ç | https://example.com\n"
        "Telegram | https://t.me/channel\n"
        "```\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ `skip` –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞"
    )
    
    keyboard = get_navigation_keyboard("step_buttons", lang, can_skip=True)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(PostCreationFlow.step_buttons)
async def handle_buttons_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–Ω–æ–ø–æ–∫"""
    user = supabase_db.db.get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    if is_command(message.text, "skip"):
        data = await state.get_data()
        data["buttons"] = None
        data["step_history"].append("step_buttons")
        await state.set_data(data)
        await start_time_step(message, state, lang)
        return
    
    if is_command(message.text, "back"):
        await go_back_step(message, state, lang)
        return
    
    if is_command(message.text, "cancel"):
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–Ω–æ–ø–∫–∏
    try:
        buttons = []
        lines = message.text.strip().split('\n')
        
        for line in lines:
            if '|' in line:
                parts = line.split('|', 1)
                text = parts[0].strip()
                url = parts[1].strip()
                if text and url:
                    buttons.append({"text": text, "url": url})
        
        if not buttons:
            await message.answer(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–¢–µ–∫—Å—Ç | URL`",
                parse_mode="Markdown"
            )
            return
        
        data = await state.get_data()
        data["buttons"] = buttons
        data["step_history"].append("step_buttons")
        await state.set_data(data)
        
        await start_time_step(message, state, lang)
        
    except Exception as e:
        await message.answer(
            "‚ùå **–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–Ω–æ–ø–æ–∫**\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–¢–µ–∫—Å—Ç | URL`",
            parse_mode="Markdown"
        )

async def start_time_step(message: Message, state: FSMContext, lang: str):
    """–®–∞–≥ 5: –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    await state.set_state(PostCreationFlow.step_time)
    
    text = (
        "‚è∞ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ - –®–∞–≥ 5/7**\n\n"
        "**–ö–æ–≥–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç?**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "‚Ä¢ `now` - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å\n"
        "‚Ä¢ `draft` - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫\n"
        "‚Ä¢ –î–∞—Ç—É –∏ –≤—Ä–µ–º—è: `2024-12-25 15:30`\n\n"
        "–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: " + state.get_data().get('timezone', 'UTC')
    )
    
    keyboard = get_time_options_keyboard(lang)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(PostCreationFlow.step_time)
async def handle_time_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    user = supabase_db.db.get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    text_lower = message.text.lower().strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    if is_command(message.text, "back"):
        await go_back_step(message, state, lang)
        return
    
    if is_command(message.text, "cancel"):
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    data = await state.get_data()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    if text_lower in ["now", "—Å–µ–π—á–∞—Å"]:
        data["publish_time"] = datetime.now(ZoneInfo("UTC"))
        data["draft"] = False
    elif text_lower in ["draft", "—á–µ—Ä–Ω–æ–≤–∏–∫"]:
        data["publish_time"] = None
        data["draft"] = True
    else:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É
        try:
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            for fmt in ["%Y-%m-%d %H:%M", "%d.%m.%Y %H:%M", "%d/%m/%Y %H:%M"]:
                try:
                    dt = datetime.strptime(message.text.strip(), fmt)
                    break
                except ValueError:
                    continue
            else:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç")
            
            tz = ZoneInfo(user.get("timezone", "UTC"))
            local_dt = dt.replace(tzinfo=tz)
            utc_dt = local_dt.astimezone(ZoneInfo("UTC"))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
            if utc_dt <= datetime.now(ZoneInfo("UTC")):
                await message.answer("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
                return
            
            data["publish_time"] = utc_dt
            data["draft"] = False
            
        except ValueError:
            await message.answer(
                "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                "‚Ä¢ `2024-12-25 15:30`\n"
                "‚Ä¢ `25.12.2024 15:30`\n"
                "‚Ä¢ `25/12/2024 15:30`\n"
                "‚Ä¢ `now` - —Å–µ–π—á–∞—Å\n"
                "‚Ä¢ `draft` - —á–µ—Ä–Ω–æ–≤–∏–∫",
                parse_mode="Markdown"
            )
            return
    
    data["step_history"].append("step_time")
    await state.set_data(data)
    await start_channel_step(message, state, lang)

@router.callback_query(F.data == "time_now")
async def handle_time_now(callback: CallbackQuery, state: FSMContext):
    """–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å"""
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    data = await state.get_data()
    data["publish_time"] = datetime.now(ZoneInfo("UTC"))
    data["draft"] = False
    data["step_history"].append("step_time")
    await state.set_data(data)
    
    await callback.answer()
    await start_channel_step(callback.message, state, lang)

@router.callback_query(F.data == "time_draft")
async def handle_time_draft(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫"""
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    data = await state.get_data()
    data["publish_time"] = None
    data["draft"] = True
    data["step_history"].append("step_time")
    await state.set_data(data)
    
    await callback.answer()
    await start_channel_step(callback.message, state, lang)

@router.callback_query(F.data == "time_schedule")
async def handle_time_schedule(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è"""
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
    await state.set_state(PostCreationFlow.step_time)
    
    user = supabase_db.db.get_user(callback.from_user.id)
    tz_name = user.get("timezone", "UTC")
    
    text = (
        f"üìÖ **–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏**\n\n"
        f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz_name}\n\n"
        f"–§–æ—Ä–º–∞—Ç—ã:\n"
        f"‚Ä¢ `2024-12-25 15:30`\n"
        f"‚Ä¢ `25.12.2024 15:30`\n"
        f"‚Ä¢ `25/12/2024 15:30`\n\n"
        f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        f"‚Ä¢ `now` - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å\n"
        f"‚Ä¢ `draft` - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫\n"
        f"‚Ä¢ `back` - –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
    )
    
    await callback.message.edit_text(text, parse_mode="Markdown")
    await callback.answer()

async def start_channel_step(message: Message, state: FSMContext, lang: str):
    """–®–∞–≥ 6: –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞"""
    await state.set_state(PostCreationFlow.step_channel)
    
    data = await state.get_data()
    project_id = data["project_id"]
    
    channels = supabase_db.db.list_channels(project_id=project_id)
    
    text = (
        "üì∫ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ - –®–∞–≥ 6/7**\n\n"
        "**–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏**\n\n"
    )
    
    # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏
    for i, channel in enumerate(channels, 1):
        admin_status = "‚úÖ" if channel.get('is_admin_verified') else "‚ùì"
        text += f"{i}. {admin_status} {channel['name']}\n"
    
    text += "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –µ–≥–æ @username"
    
    keyboard = get_channels_keyboard(channels, lang)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(PostCreationFlow.step_channel)
async def handle_channel_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞"""
    user = supabase_db.db.get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    if is_command(message.text, "back"):
        await go_back_step(message, state, lang)
        return
    
    if is_command(message.text, "cancel"):
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    data = await state.get_data()
    project_id = data["project_id"]
    channels = supabase_db.db.list_channels(project_id=project_id)
    
    text = message.text.strip()
    channel = None
    
    # –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–∞ –ø–æ –Ω–æ–º–µ—Ä—É
    if text.isdigit():
        idx = int(text) - 1
        if 0 <= idx < len(channels):
            channel = channels[idx]
    # –ü–æ–∏—Å–∫ –ø–æ username –∏–ª–∏ ID
    else:
        for ch in channels:
            if (ch.get('username') and f"@{ch['username']}" == text) or \
               str(ch['chat_id']) == text or \
               str(ch['id']) == text:
                channel = ch
                break
    
    if not channel:
        await message.answer(
            f"‚ùå –ö–∞–Ω–∞–ª '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ @username",
            parse_mode="Markdown"
        )
        return
    
    data["channel_id"] = channel['id']
    data["step_history"].append("step_channel")
    await state.set_data(data)
    
    await start_preview_step(message, state, lang)

@router.callback_query(F.data.startswith("channel_select:"))
async def handle_channel_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    channel_id = int(callback.data.split(":", 1)[1])
    
    data = await state.get_data()
    data["channel_id"] = channel_id
    data["step_history"].append("step_channel")
    await state.set_data(data)
    
    await callback.answer()
    await start_preview_step(callback.message, state, lang)

async def start_preview_step(message: Message, state: FSMContext, lang: str):
    """–®–∞–≥ 7: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"""
    await state.set_state(PostCreationFlow.step_preview)
    
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    channel = supabase_db.db.get_channel(data["channel_id"])
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é —Å–∞–º–æ–≥–æ –ø–æ—Å—Ç–∞
    await send_post_preview(message, data)
    
    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    info_text = "üëÄ **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä**\n\n"
    info_text += f"**–ö–∞–Ω–∞–ª:** {channel['name']}\n"
    
    if data.get("publish_time"):
        if isinstance(data["publish_time"], datetime):
            time_str = data["publish_time"].strftime('%Y-%m-%d %H:%M UTC')
        else:
            time_str = str(data["publish_time"])
        info_text += f"**–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:** {time_str}\n"
    elif data.get("draft"):
        info_text += "**–°—Ç–∞—Ç—É—Å:** –ß–µ—Ä–Ω–æ–≤–∏–∫\n"
    else:
        info_text += "**–°—Ç–∞—Ç—É—Å:** –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å\n"
    
    if data.get("parse_mode"):
        info_text += f"**–§–æ—Ä–º–∞—Ç:** {data['parse_mode']}\n"
    
    info_text += "\n‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ."
    
    keyboard = get_preview_keyboard(lang)
    await message.answer(info_text, reply_markup=keyboard, parse_mode="Markdown")

async def send_post_preview(message: Message, data: dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞ –∫–∞–∫ –æ–Ω –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ –∫–∞–Ω–∞–ª–µ"""
    text = data.get("text", "")
    media_id = data.get("media_file_id")
    media_type = data.get("media_type")
    parse_mode = data.get("parse_mode")
    buttons = data.get("buttons")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
    markup = None
    if buttons:
        kb = []
        for btn in buttons:
            if isinstance(btn, dict) and btn.get("text") and btn.get("url"):
                kb.append([InlineKeyboardButton(text=btn["text"], url=btn["url"])])
        if kb:
            markup = InlineKeyboardMarkup(inline_keyboard=kb)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º parse_mode
    if parse_mode == "HTML":
        pm = "HTML"
    elif parse_mode == "Markdown":
        pm = "Markdown"
    else:
        pm = None
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–≤—å—é
    try:
        if media_id and media_type:
            if media_type == "photo":
                await message.answer_photo(
                    media_id,
                    caption=text or None,
                    parse_mode=pm,
                    reply_markup=markup
                )
            elif media_type == "video":
                await message.answer_video(
                    media_id,
                    caption=text or None,
                    parse_mode=pm,
                    reply_markup=markup
                )
            elif media_type == "animation":
                await message.answer_animation(
                    media_id,
                    caption=text or None,
                    parse_mode=pm,
                    reply_markup=markup
                )
        else:
            await message.answer(
                text or "üìù *[–ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞]*",
                parse_mode=pm or "Markdown",
                reply_markup=markup
            )
    except Exception as e:
        await message.answer(
            f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞**\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é: {str(e)}\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.",
            parse_mode="Markdown"
        )

@router.callback_query(F.data == "post_confirm")
async def handle_post_confirmation(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    data = await state.get_data()
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    post_data = {
        "user_id": data["user_id"],
        "project_id": data["project_id"],
        "channel_id": data["channel_id"],
        "text": data.get("text"),
        "media_type": data.get("media_type"),
        "media_id": data.get("media_file_id"),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: media_id –≤–º–µ—Å—Ç–æ media_file_id
        "format": data.get("parse_mode"),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: format –≤–º–µ—Å—Ç–æ parse_mode
        "buttons": data.get("buttons"),
        "publish_time": data.get("publish_time").isoformat() if isinstance(data.get("publish_time"), datetime) else data.get("publish_time"),
        "repeat_interval": data.get("repeat_interval"),
        "draft": data.get("draft", False),
        "published": False
    }
    
    post = supabase_db.db.add_post(post_data)
    
    if post:
        if data.get("draft"):
            status_text = "üìù **–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω**"
        elif data.get("publish_time"):
            status_text = "‚è∞ **–ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω**"
        else:
            status_text = "üöÄ **–ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω**"
        
        await callback.message.edit_text(
            f"{status_text}\n\n"
            f"**ID –ø–æ—Å—Ç–∞:** #{post['id']}\n\n"
            f"‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
            f"‚Ä¢ `/view {post['id']}` - –ø—Ä–æ—Å–º–æ—Ç—Ä\n"
            f"‚Ä¢ `/edit {post['id']}` - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n"
            f"‚Ä¢ `/delete {post['id']}` - —É–¥–∞–ª–∏—Ç—å",
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞**\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="Markdown"
        )
    
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "post_edit_menu")
async def handle_edit_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    text = (
        "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞**\n\n"
        "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
    )
    
    keyboard = get_edit_menu_keyboard()
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data.startswith("edit_field:"))
async def handle_edit_field(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è"""
    field = callback.data.split(":", 1)[1]
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    data = await state.get_data()
    data["editing_field"] = field
    await state.set_data(data)
    
    if field == "text":
        await state.set_state(PostCreationFlow.step_text)
        current_text = data.get("text", "")
        await callback.message.edit_text(
            f"üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞**\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n{current_text[:200]}...\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ `cancel` –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            parse_mode="Markdown"
        )
    elif field == "media":
        await state.set_state(PostCreationFlow.step_media)
        await callback.message.edit_text(
            "üñº **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ `cancel` –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            parse_mode="Markdown"
        )
    elif field == "format":
        await callback.message.edit_text(
            "üé® **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç:",
            reply_markup=get_format_keyboard(lang),
            parse_mode="Markdown"
        )
    elif field == "buttons":
        await state.set_state(PostCreationFlow.step_buttons)
        current_buttons = data.get("buttons", [])
        buttons_text = "\n".join([f"{b['text']} | {b['url']}" for b in current_buttons]) if current_buttons else "–ù–µ—Ç –∫–Ω–æ–ø–æ–∫"
        await callback.message.edit_text(
            f"üîò **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫**\n\n"
            f"–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:\n{buttons_text}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ `cancel` –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            parse_mode="Markdown"
        )
    elif field == "time":
        await callback.message.edit_text(
            "‚è∞ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏**\n\n"
            "–ö–æ–≥–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç?",
            reply_markup=get_time_options_keyboard(lang),
            parse_mode="Markdown"
        )
    elif field == "channel":
        channels = supabase_db.db.list_channels(project_id=data["project_id"])
        await callback.message.edit_text(
            "üì∫ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª:",
            reply_markup=get_channels_keyboard(channels, lang),
            parse_mode="Markdown"
        )
    
    await callback.answer()

@router.callback_query(F.data == "post_preview")
async def handle_back_to_preview(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    data = await state.get_data()
    if "editing_field" in data:
        del data["editing_field"]
    await state.set_data(data)
    
    await start_preview_step(callback.message, state, lang)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@router.callback_query(F.data == "post_nav_back")
async def handle_nav_back(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É"""
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    await go_back_step(callback.message, state, lang)
    await callback.answer()

async def go_back_step(message: Message, state: FSMContext, lang: str):
    """–õ–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É"""
    data = await state.get_data()
    history = data.get("step_history", [])
    
    if not history:
        await message.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥!")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    history.pop()
    data["step_history"] = history
    await state.set_data(data)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
    if not history:
        await start_text_step(message, state, lang)
    else:
        prev_step = history[-1]
        
        step_functions = {
            "step_text": start_text_step,
            "step_media": start_media_step,
            "step_format": start_format_step,
            "step_buttons": start_buttons_step,
            "step_time": start_time_step,
            "step_channel": start_channel_step,
        }
        
        if prev_step in step_functions:
            # –£–¥–∞–ª—è–µ–º —ç—Ç–æ—Ç —à–∞–≥ —Ç–æ–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–º—É –∑–∞–Ω–æ–≤–æ
            history.pop()
            data["step_history"] = history
            await state.set_data(data)
            
            await step_functions[prev_step](message, state, lang)

@router.callback_query(F.data == "post_nav_skip")
async def handle_nav_skip(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥"""
    current_state = await state.get_state()
    data = await state.get_data()
    
    user = supabase_db.db.get_user(callback.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    if current_state == PostCreationFlow.step_text:
        data["step_history"].append("step_text")
        await state.set_data(data)
        await start_media_step(callback.message, state, lang)
    elif current_state == PostCreationFlow.step_media:
        data["step_history"].append("step_media")
        await state.set_data(data)
        await start_format_step(callback.message, state, lang)
    elif current_state == PostCreationFlow.step_buttons:
        data["step_history"].append("step_buttons")
        await state.set_data(data)
        await start_time_step(callback.message, state, lang)
    
    await callback.answer()

@router.callback_query(F.data == "post_nav_cancel")
async def handle_nav_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n"
        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.",
        parse_mode="Markdown"
    )
    await callback.answer()