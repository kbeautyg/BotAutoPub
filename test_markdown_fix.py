#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2
"""

import sys
sys.path.append('/app')

from view_post import clean_text_for_format

def test_markdown_escaping():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô MARKDOWNV2")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    test_text = """üéâ –ù–û–í–û–°–¢–¨: –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã KBeautyGuide!

–î—Ä—É–∑—å—è, –º—ã –¥–æ–ª–≥–æ –∂–¥–∞–ª–∏ —ç—Ç–æ—Ç –¥–µ–Ω—å ‚Äî —Ç–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å —à–∞–Ω—Å –Ω–µ —Ç–æ–ª—å–∫–æ —ç–∫–æ–Ω–æ–º–∏—Ç—å –Ω–∞ –ª—é–±–∏–º–æ–π –∫–æ—Ä–µ–π—Å–∫–æ–π –∫–æ—Å–º–µ—Ç–∏–∫–µ, –Ω–æ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å –Ω–∞—à–∏–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º! üòç

üíé –î–ª—è –∫–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞?
- –î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Ç–µ—Ö, –∫—Ç–æ –ª—é–±–∏—Ç –¥–µ–ª–∏—Ç—å—Å—è –Ω–∞—Ö–æ–¥–∫–∞–º–∏
- –ï—Å–ª–∏ —Ç—ã —á–∞—Å—Ç–æ –∑–∞–∫–∞–∑—ã–≤–∞–µ—à—å –¥–ª—è —Å–µ–±—è/–¥—Ä—É–∑–µ–π ‚Äî —Ç–µ–±–µ —Ç–æ—á–Ω–æ –∫ –Ω–∞–º!

‚ú® –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–∞:
üë• –£—á–∞—Å—Ç–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —á–ª–µ–Ω–æ–≤ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ ‚Äî –æ—â—É—â–∞–π —Å–µ–±—è –≤ –∫–ª—É–±–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö  
üí∞ –ë–æ–Ω—É—Å—ã –∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –æ–ø—Ç–æ–≤—ã–µ –∑–∞–∫—É–ø–∫–∏  
üåè 100% –æ—Ä–∏–≥–∏–Ω–∞–ª –∏–∑ –ö–æ—Ä–µ–∏ ‚Äî –ª–∏—á–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –°–µ—É–ª–µ  
üî• –í—ã–≥–æ–¥–Ω–æ –∏ –Ω–∞–¥—ë–∂–Ω–æ ‚Äî –Ω–æ–ª—å –ø–µ—Ä–µ–ø–ª–∞—Ç –∏ —Ä–∏—Å–∫–æ–≤  
üöÄ –°–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–∏–Ω–∫–∏ –∏ —Ç—Ä–µ–Ω–¥—ã –¥–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤

üìå –£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è –ø—Ä–æ—Å—Ç—ã–µ, –∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ ‚Äî –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–µ! –°—Ç–∞–Ω—å —á–∞—Å—Ç—å—é –∫–æ–º–∞–Ω–¥—ã –∏ —Ä–∞–∑–≤–∏–≤–∞–π KBeautyGuide –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ –∑–∞–∫—É–ø–∞–µ—Ç—Å—è ¬´–Ω–∞ —Ç—Ä–æ–∏—Ö¬ª –∏–ª–∏ —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å –±—å—é—Ç–∏-—É–≤–ª–µ—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –¥–æ—Ö–æ–¥–∞.

üëâ –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –¥–µ—Ç–∞–ª–∏? –ü–∏—à–∏ –≤ –ª–∏—á–∫—É ‚Äî —Ä–∞—Å—Å–∫–∞–∂—É –≤—Å—ë, –ø–æ–¥—Å–∫–∞–∂—É –∏ –ø–æ–º–æ–≥—É —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å!

#KGG_–ü–∞—Ä—Ç–Ω–µ—Ä—ã #KGG_–°–æ–æ–±—â–µ—Å—Ç–≤–æ #–ü–æ–ª–µ–∑–Ω–æ–µ–û—ÇKBG"""

    print("üìù –ò–°–•–û–î–ù–´–ô –¢–ï–ö–°–¢:")
    print(test_text[:200] + "..." if len(test_text) > 200 else test_text)
    print("\n" + "-" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    formats = [
        ("HTML", "HTML"),
        ("Markdown", "MarkdownV2"),
        (None, "–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç")
    ]
    
    for format_name, description in formats:
        print(f"\nüîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–û–†–ú–ê–¢–ê: {description}")
        
        try:
            cleaned_text = clean_text_for_format(test_text, format_name)
            
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞ –¥–ª—è {description}")
            print(f"üìè –î–ª–∏–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {len(cleaned_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            preview = cleaned_text[:200] + "..." if len(cleaned_text) > 200 else cleaned_text
            print(f"üëÄ –ü—Ä–µ–≤—å—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
            print(preview)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
            if format_name == "Markdown":
                problem_chars = ['.', '-', '!', '(', ')', '_', '*']
                unescaped_found = []
                
                for char in problem_chars:
                    # –ò—â–µ–º –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–Ω–µ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç \)
                    import re
                    unescaped = re.findall(f'[^\\\\]{re.escape(char)}', cleaned_text)
                    if unescaped:
                        unescaped_found.append(char)
                
                if unescaped_found:
                    print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {unescaped_found}")
                else:
                    print("‚úÖ –í—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {description}: {e}")
        
        print("-" * 30)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Å–ª—É—á–∞—è–º–∏
    print(f"\nüéØ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–ï–°–¢–´:")
    
    problem_cases = [
        "–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Å —Ç–æ—á–∫–æ–π.",
        "–¢–µ–∫—Å—Ç —Å –¥–µ—Ñ–∏—Å–æ–º - –∏ —Å–∫–æ–±–∫–∞–º–∏ (—Ç–µ—Å—Ç)!",
        "–°–∏–º–≤–æ–ª—ã: _–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ_ *–∂–∏—Ä–Ω—ã–π* [—Å—Å—ã–ª–∫–∞]",
        "–≠–º–æ–¥–∑–∏ üéâ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã: #—Ö–µ—à—Ç–µ–≥ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
        "[b]–ñ–∏—Ä–Ω—ã–π[/b] –∏ [i]–∫—É—Ä—Å–∏–≤[/i] —Å [url=https://example.com]—Å—Å—ã–ª–∫–æ–π[/url]"
    ]
    
    for i, test_case in enumerate(problem_cases, 1):
        print(f"\nüìã –¢–µ—Å—Ç {i}: {test_case}")
        try:
            result = clean_text_for_format(test_case, "Markdown")
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print(f"\n" + "=" * 50)
    print("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")

if __name__ == "__main__":
    test_markdown_escaping()