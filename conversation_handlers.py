import logging
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.ext import ContextTypes, ConversationHandler
from telegram.error import TelegramError
from database import db
from utils import (
    create_main_menu_keyboard, create_back_button, create_cancel_button,
    TimeZoneManager, TextFormatter, ButtonManager, DateTimeParser,
    truncate_text, validate_url
)
from scheduler import post_scheduler, channel_manager
from config import Config
import re
from datetime import datetime

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(WAITING_FOR_TEXT, WAITING_FOR_MEDIA, WAITING_FOR_BUTTONS, 
 WAITING_FOR_SCHEDULE, WAITING_FOR_CHANNEL_ID, WAITING_FOR_CHANNEL_TITLE,
 CONFIRM_POST, EDIT_POST) = range(8)

class PostConversationHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    
    @staticmethod
    async def handle_post_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
        user = update.effective_user
        message = update.message
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state = await db.get_user_state(user.id)
        if not state or state.get('state') != 'creating_post':
            await message.reply_text(
                "‚ùå –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=create_main_menu_keyboard(await db.is_admin(user.id))
            )
            return ConversationHandler.END
        
        post_data = state.get('data', {})
        text = message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        if len(text) > Config.MAX_TEXT_LENGTH:
            await message.reply_text(
                f"‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º {Config.MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.\n"
                f"–í–∞—à —Ç–µ–∫—Å—Ç: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return WAITING_FOR_TEXT
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
        post_data['text'] = text
        post_data['step'] = 'media'
        
        await db.set_user_state(user.id, 'creating_post', post_data)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        keyboard = [
            [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞", callback_data="skip_media")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–µ–∫—Å—Ç—É", callback_data="back_to_text")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
        ]
        
        await message.reply_text(
            "2Ô∏è‚É£ <b>–®–∞–≥ 2: –ú–µ–¥–∏–∞</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –¥—Ä—É–≥–æ–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –¥–ª—è –ø–æ—Å—Ç–∞.\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞.",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        return WAITING_FOR_MEDIA
    
    @staticmethod
    async def skip_text_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        state = await db.get_user_state(user.id)
        
        if not state or state.get('state') != 'creating_post':
            await query.edit_message_text(
                "‚ùå –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=create_main_menu_keyboard(await db.is_admin(user.id))
            )
            return ConversationHandler.END
        
        post_data = state.get('data', {})
        post_data['step'] = 'media'
        
        await db.set_user_state(user.id, 'creating_post', post_data)
        
        keyboard = [
            [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞", callback_data="skip_media")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–µ–∫—Å—Ç—É", callback_data="back_to_text")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
        ]
        
        await query.edit_message_text(
            "2Ô∏è‚É£ <b>–®–∞–≥ 2: –ú–µ–¥–∏–∞</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –¥—Ä—É–≥–æ–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –¥–ª—è –ø–æ—Å—Ç–∞.\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞.",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        return WAITING_FOR_MEDIA
    
    @staticmethod
    async def handle_post_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –¥–ª—è –ø–æ—Å—Ç–∞"""
        user = update.effective_user
        message = update.message
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state = await db.get_user_state(user.id)
        if not state or state.get('state') != 'creating_post':
            await message.reply_text(
                "‚ùå –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=create_main_menu_keyboard(await db.is_admin(user.id))
            )
            return ConversationHandler.END
        
        post_data = state.get('data', {})
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∏ file_id
        media_type = None
        file_id = None
        caption = None
        
        if message.photo:
            media_type = 'photo'
            file_id = message.photo[-1].file_id
            caption = message.caption
        elif message.video:
            media_type = 'video'
            file_id = message.video.file_id
            caption = message.caption
        elif message.document:
            media_type = 'document'
            file_id = message.document.file_id
            caption = message.caption
        elif message.audio:
            media_type = 'audio'
            file_id = message.audio.file_id
            caption = message.caption
        elif message.voice:
            media_type = 'voice'
            file_id = message.voice.file_id
            caption = message.caption
        elif message.animation:
            media_type = 'animation'
            file_id = message.animation.file_id
            caption = message.caption
        else:
            await message.reply_text(
                "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return WAITING_FOR_MEDIA
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–æ–¥–ø–∏—Å–∏
        if caption and len(caption) > Config.MAX_CAPTION_LENGTH:
            await message.reply_text(
                f"‚ùå –ü–æ–¥–ø–∏—Å—å –∫ –º–µ–¥–∏–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º {Config.MAX_CAPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.\n"
                f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å—å: {len(caption)} —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return WAITING_FOR_MEDIA
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞
        post_data['media_type'] = media_type
        post_data['media_file_id'] = file_id
        post_data['media_caption'] = caption
        post_data['step'] = 'buttons'
        
        await db.set_user_state(user.id, 'creating_post', post_data)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        keyboard = [
            [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–Ω–æ–ø–∫–∏", callback_data="skip_buttons")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–¥–∏–∞", callback_data="back_to_media")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
        ]
        
        await message.reply_text(
            "3Ô∏è‚É£ <b>–®–∞–≥ 3: –ö–Ω–æ–ø–∫–∏</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "<code>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ - https://example.com</code>\n"
            "<code>–ö–Ω–æ–ø–∫–∞ 1 | –ö–Ω–æ–ø–∫–∞ 2 - https://example.com</code>\n\n"
            "–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ = –Ω–æ–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫\n"
            "–°–∏–º–≤–æ–ª | —Ä–∞–∑–¥–µ–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–Ω–æ–ø–∫–∏'.",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        return WAITING_FOR_BUTTONS
    
    @staticmethod
    async def skip_media_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        state = await db.get_user_state(user.id)
        
        if not state or state.get('state') != 'creating_post':
            await query.edit_message_text(
                "‚ùå –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=create_main_menu_keyboard(await db.is_admin(user.id))
            )
            return ConversationHandler.END
        
        post_data = state.get('data', {})
        post_data['step'] = 'buttons'
        
        await db.set_user_state(user.id, 'creating_post', post_data)
        
        keyboard = [
            [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–Ω–æ–ø–∫–∏", callback_data="skip_buttons")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–¥–∏–∞", callback_data="back_to_media")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
        ]
        
        await query.edit_message_text(
            "3Ô∏è‚É£ <b>–®–∞–≥ 3: –ö–Ω–æ–ø–∫–∏</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "<code>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ - https://example.com</code>\n"
            "<code>–ö–Ω–æ–ø–∫–∞ 1 | –ö–Ω–æ–ø–∫–∞ 2 - https://example.com</code>\n\n"
            "–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ = –Ω–æ–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫\n"
            "–°–∏–º–≤–æ–ª | —Ä–∞–∑–¥–µ–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–Ω–æ–ø–∫–∏'.",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        return WAITING_FOR_BUTTONS
    
    @staticmethod
    async def handle_post_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ—Å—Ç–∞"""
        user = update.effective_user
        message = update.message
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state = await db.get_user_state(user.id)
        if not state or state.get('state') != 'creating_post':
            await message.reply_text(
                "‚ùå –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=create_main_menu_keyboard(await db.is_admin(user.id))
            )
            return ConversationHandler.END
        
        post_data = state.get('data', {})
        buttons_text = message.text
        
        # –ü–∞—Ä—Å–∏–º –∫–Ω–æ–ø–∫–∏
        try:
            buttons = ButtonManager.parse_buttons_text(buttons_text)
            
            if not buttons:
                await message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–Ω–æ–ø–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n\n"
                    "<code>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ - https://example.com</code>\n"
                    "<code>–ö–Ω–æ–ø–∫–∞ 1 | –ö–Ω–æ–ø–∫–∞ 2 - https://example.com</code>",
                    parse_mode='HTML'
                )
                return WAITING_FOR_BUTTONS
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –≤ –∫–Ω–æ–ø–∫–∞—Ö
            for row in buttons:
                for button in row:
                    url = button.get('url', '')
                    if url and url != '#' and not validate_url(url):
                        await message.reply_text(
                            f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –≤ –∫–Ω–æ–ø–∫–µ '{button.get('text', '')}': {url}\n"
                            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏."
                        )
                        return WAITING_FOR_BUTTONS
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏
            post_data['buttons'] = buttons
            post_data['step'] = 'schedule'
            
            await db.set_user_state(user.id, 'creating_post', post_data)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            keyboard = [
                [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="publish_now")],
                [InlineKeyboardButton("‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data="schedule_post")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–Ω–æ–ø–∫–∞–º", callback_data="back_to_buttons")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
            ]
            
            await message.reply_text(
                "4Ô∏è‚É£ <b>–®–∞–≥ 4: –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            
            return WAITING_FOR_SCHEDULE
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–Ω–æ–ø–æ–∫: {e}")
            await message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return WAITING_FOR_BUTTONS
    
    @staticmethod
    async def skip_buttons_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        state = await db.get_user_state(user.id)
        
        if not state or state.get('state') != 'creating_post':
            await query.edit_message_text(
                "‚ùå –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=create_main_menu_keyboard(await db.is_admin(user.id))
            )
            return ConversationHandler.END
        
        post_data = state.get('data', {})
        post_data['step'] = 'schedule'
        
        await db.set_user_state(user.id, 'creating_post', post_data)
        
        keyboard = [
            [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="publish_now")],
            [InlineKeyboardButton("‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data="schedule_post")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–Ω–æ–ø–∫–∞–º", callback_data="back_to_buttons")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
        ]
        
        await query.edit_message_text(
            "4Ô∏è‚É£ <b>–®–∞–≥ 4: –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        return WAITING_FOR_SCHEDULE
    
    @staticmethod
    async def publish_now_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        state = await db.get_user_state(user.id)
        
        if not state or state.get('state') != 'creating_post':
            await query.edit_message_text(
                "‚ùå –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=create_main_menu_keyboard(await db.is_admin(user.id))
            )
            return ConversationHandler.END
        
        post_data = state.get('data', {})
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await PostConversationHandlers.show_post_preview(query, post_data, immediate=True)
        
        return CONFIRM_POST
    
    @staticmethod
    async def schedule_post_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ª–æ–∂–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        db_user = await db.get_user(user.id)
        user_timezone = db_user.get('timezone', 'UTC') if db_user else 'UTC'
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_schedule")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
        ]
        
        await query.edit_message_text(
            "‚è∞ <b>–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è</b>\n\n"
            f"–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user_timezone}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
            "‚Ä¢ <code>15:30</code> - —Å–µ–≥–æ–¥–Ω—è –≤ 15:30\n"
            "‚Ä¢ <code>25.12 15:30</code> - 25 –¥–µ–∫–∞–±—Ä—è –≤ 15:30\n"
            "‚Ä¢ <code>25.12.2024 15:30</code> - –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞\n"
            "‚Ä¢ <code>—á–µ—Ä–µ–∑ 30 –º–∏–Ω</code> - —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ <code>—á–µ—Ä–µ–∑ 2 —á–∞—Å</code> - —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\n"
            "‚Ä¢ <code>–∑–∞–≤—Ç—Ä–∞ –≤ 10:00</code> - –∑–∞–≤—Ç—Ä–∞ –≤ 10:00",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        return WAITING_FOR_SCHEDULE
    
    @staticmethod
    async def handle_schedule_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        user = update.effective_user
        message = update.message
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state = await db.get_user_state(user.id)
        if not state or state.get('state') != 'creating_post':
            await message.reply_text(
                "‚ùå –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=create_main_menu_keyboard(await db.is_admin(user.id))
            )
            return ConversationHandler.END
        
        post_data = state.get('data', {})
        time_text = message.text
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = await db.get_user(user.id)
        user_timezone = db_user.get('timezone', 'UTC') if db_user else 'UTC'
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        scheduled_time = DateTimeParser.parse_datetime_input(time_text, user_timezone)
        
        if not scheduled_time:
            await message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
                "‚Ä¢ 15:30\n"
                "‚Ä¢ 25.12 15:30\n"
                "‚Ä¢ —á–µ—Ä–µ–∑ 30 –º–∏–Ω\n"
                "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00"
            )
            return WAITING_FOR_SCHEDULE
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
        if scheduled_time <= datetime.utcnow():
            await message.reply_text(
                "‚ùå –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return WAITING_FOR_SCHEDULE
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
        post_data['scheduled_time'] = scheduled_time
        await db.set_user_state(user.id, 'creating_post', post_data)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
        await PostConversationHandlers.show_post_preview(message, post_data, immediate=False)
        
        return CONFIRM_POST
    
    @staticmethod
    async def show_post_preview(update_or_message, post_data: Dict, immediate: bool = True):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channels = await db.get_channels()
        channel = next((c for c in channels if c['telegram_id'] == post_data['channel_id']), None)
        
        if not channel:
            text = "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
            keyboard = create_main_menu_keyboard(True)
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
            preview_text = f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel['title']}\n\n"
            
            if post_data.get('text'):
                preview_text += f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{post_data['text'][:500]}"
                if len(post_data['text']) > 500:
                    preview_text += "..."
                preview_text += "\n\n"
            
            if post_data.get('media_type'):
                media_icons = {
                    'photo': 'üñºÔ∏è', 'video': 'üé•', 'document': 'üìÑ',
                    'audio': 'üéµ', 'voice': 'üé§', 'animation': 'üé¨'
                }
                icon = media_icons.get(post_data['media_type'], 'üìé')
                preview_text += f"{icon} <b>–ú–µ–¥–∏–∞:</b> {post_data['media_type']}\n"
                
                if post_data.get('media_caption'):
                    preview_text += f"üìù <b>–ü–æ–¥–ø–∏—Å—å:</b> {post_data['media_caption'][:200]}"
                    if len(post_data['media_caption']) > 200:
                        preview_text += "..."
                    preview_text += "\n"
                preview_text += "\n"
            
            if post_data.get('buttons'):
                preview_text += "üîò <b>–ö–Ω–æ–ø–∫–∏:</b>\n"
                for row in post_data['buttons']:
                    row_text = " | ".join([btn.get('text', '–ö–Ω–æ–ø–∫–∞') for btn in row])
                    preview_text += f"‚Ä¢ {row_text}\n"
                preview_text += "\n"
            
            if immediate:
                preview_text += "‚è∞ <b>–ü—É–±–ª–∏–∫–∞—Ü–∏—è:</b> –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ"
            else:
                scheduled_time = post_data.get('scheduled_time')
                if scheduled_time:
                    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    user_id = update_or_message.from_user.id if hasattr(update_or_message, 'from_user') else update_or_message.chat.id
                    db_user = await db.get_user(user_id)
                    user_timezone = db_user.get('timezone', 'UTC') if db_user else 'UTC'
                    
                    formatted_time = DateTimeParser.format_datetime(scheduled_time, user_timezone)
                    preview_text += f"‚è∞ <b>–ü—É–±–ª–∏–∫–∞—Ü–∏—è:</b> {formatted_time}"
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_post")],
                [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_post")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
            ]
        
        if hasattr(update_or_message, 'edit_message_text'):
            # –≠—Ç–æ callback query
            await update_or_message.edit_message_text(
                preview_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
        else:
            # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update_or_message.reply_text(
                preview_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
    
    @staticmethod
    async def confirm_post_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        state = await db.get_user_state(user.id)
        
        if not state or state.get('state') != 'creating_post':
            await query.edit_message_text(
                "‚ùå –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=create_main_menu_keyboard(await db.is_admin(user.id))
            )
            return ConversationHandler.END
        
        post_data = state.get('data', {})
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            post_id = await db.create_post(
                channel_id=post_data['channel_id'],
                created_by=user.id,
                text_content=post_data.get('text'),
                media_type=post_data.get('media_type'),
                media_file_id=post_data.get('media_file_id'),
                media_caption=post_data.get('media_caption'),
                parse_mode='HTML',
                reply_markup=post_data.get('buttons'),
                scheduled_time=post_data.get('scheduled_time')
            )
            
            if not post_id:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞",
                    reply_markup=create_main_menu_keyboard(True)
                )
                return ConversationHandler.END
            
            # –ï—Å–ª–∏ –ø–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            if not post_data.get('scheduled_time'):
                success = await post_scheduler.publish_post_now(post_id)
                if success:
                    message_text = "‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!"
                else:
                    message_text = "‚ö†Ô∏è –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ."
            else:
                # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                db_user = await db.get_user(user.id)
                user_timezone = db_user.get('timezone', 'UTC') if db_user else 'UTC'
                
                formatted_time = DateTimeParser.format_datetime(post_data['scheduled_time'], user_timezone)
                message_text = f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {formatted_time}"
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await db.clear_user_state(user.id)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await db.log_action(user.id, 'post_created', {
                'post_id': post_id,
                'channel_id': post_data['channel_id'],
                'scheduled': bool(post_data.get('scheduled_time'))
            })
            
            await query.edit_message_text(
                message_text,
                reply_markup=create_main_menu_keyboard(True)
            )
            
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=create_main_menu_keyboard(True)
            )
            return ConversationHandler.END

class ChannelConversationHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    
    @staticmethod
    async def handle_channel_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∫–∞–Ω–∞–ª–∞"""
        user = update.effective_user
        message = update.message
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state = await db.get_user_state(user.id)
        if not state or state.get('state') != 'waiting_channel_id':
            await message.reply_text(
                "‚ùå –°–µ—Å—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=create_main_menu_keyboard(await db.is_admin(user.id))
            )
            return ConversationHandler.END
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞
        channel_id = None
        
        if message.forward_from_chat:
            # –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞
            channel_id = message.forward_from_chat.id
        elif message.text:
            # –í–≤–µ–¥–µ–Ω ID –≤—Ä—É—á–Ω—É—é
            text = message.text.strip()
            try:
                # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
                if text.startswith('@'):
                    text = text[1:]
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
                if text.lstrip('-').isdigit():
                    channel_id = int(text)
                else:
                    # –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ username –∫–∞–Ω–∞–ª–∞
                    try:
                        chat = await context.bot.get_chat(f"@{text}")
                        channel_id = chat.id
                    except TelegramError:
                        pass
            except ValueError:
                pass
        
        if not channel_id:
            await message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞\n"
                "‚Ä¢ –í–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ–≤–æ–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890)\n"
                "‚Ä¢ –í–≤–µ—Å—Ç–∏ username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @mychannel)"
            )
            return WAITING_FOR_CHANNEL_ID
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
        try:
            access_ok, access_message = await channel_manager.validate_channel_access(channel_id)
            
            if not access_ok:
                await message.reply_text(
                    f"‚ùå {access_message}\n\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                    "‚Ä¢ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                    "‚Ä¢ –£ –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                    "‚Ä¢ ID –∫–∞–Ω–∞–ª–∞ —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
                )
                return WAITING_FOR_CHANNEL_ID
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            channel_info = await channel_manager.get_channel_info(channel_id)
            
            if not channel_info:
                await message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"
                )
                return WAITING_FOR_CHANNEL_ID
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ –∫–∞–Ω–∞–ª —É–∂–µ
            existing_channels = await db.get_channels()
            if any(ch['telegram_id'] == channel_id for ch in existing_channels):
                await message.reply_text(
                    "‚ùå –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–æ—Ç–∞"
                )
                return WAITING_FOR_CHANNEL_ID
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            success = await db.add_channel(
                telegram_id=channel_id,
                title=channel_info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª'),
                username=channel_info.get('username'),
                description=channel_info.get('description'),
                added_by=user.id
            )
            
            if success:
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await db.clear_user_state(user.id)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                await db.log_action(user.id, 'channel_added', {
                    'channel_id': channel_id,
                    'title': channel_info.get('title')
                })
                
                await message.reply_text(
                    f"‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                    f"üì∫ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {channel_info.get('title')}\n"
                    f"üÜî <b>ID:</b> <code>{channel_id}</code>\n"
                    f"üë• <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> {channel_info.get('member_count', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                    reply_markup=create_main_menu_keyboard(True),
                    parse_mode='HTML'
                )
                
                return ConversationHandler.END
            else:
                await message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
                )
                return WAITING_FOR_CHANNEL_ID
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
            await message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return WAITING_FOR_CHANNEL_ID

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–º–µ–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
class NavigationHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    
    @staticmethod
    async def cancel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.clear_user_state(user.id)
        
        is_admin = await db.is_admin(user.id)
        keyboard = create_main_menu_keyboard(is_admin)
        
        await query.edit_message_text(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=keyboard
        )
        
        return ConversationHandler.END
    
    @staticmethod
    async def back_to_text_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        state = await db.get_user_state(user.id)
        
        if state and state.get('state') == 'creating_post':
            post_data = state.get('data', {})
            post_data['step'] = 'text'
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –±—ã–ª
            if 'text' in post_data:
                del post_data['text']
            
            await db.set_user_state(user.id, 'creating_post', post_data)
            
            keyboard = [
                [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="skip_text")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
            ]
            
            await query.edit_message_text(
                "1Ô∏è‚É£ <b>–®–∞–≥ 1: –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç'.",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            
            return WAITING_FOR_TEXT
        
        return ConversationHandler.END