from aiogram import Router, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import supabase_db
from __init__ import TEXTS
from datetime import datetime
from zoneinfo import ZoneInfo
import json

router = Router()

def format_time_for_user(time_str: str, user: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –µ–≥–æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ ISO —Ñ–æ—Ä–º–∞—Ç–∞
        if isinstance(time_str, str):
            if time_str.endswith('Z'):
                time_str = time_str[:-1] + '+00:00'
            utc_time = datetime.fromisoformat(time_str)
        else:
            utc_time = time_str
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_tz_name = user.get('timezone', 'UTC')
        try:
            user_tz = ZoneInfo(user_tz_name)
            local_time = utc_time.astimezone(user_tz)
        except:
            local_time = utc_time
            user_tz_name = 'UTC'
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        date_format = user.get('date_format', 'YYYY-MM-DD')
        time_format = user.get('time_format', 'HH:MM')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç –≤ strftime
        if date_format == 'DD.MM.YYYY':
            date_str = local_time.strftime('%d.%m.%Y')
        elif date_format == 'DD/MM/YYYY':
            date_str = local_time.strftime('%d/%m/%Y')
        elif date_format == 'MM/DD/YYYY':
            date_str = local_time.strftime('%m/%d/%Y')
        else:  # YYYY-MM-DD
            date_str = local_time.strftime('%Y-%m-%d')
        
        if time_format == 'hh:MM AM':
            time_str = local_time.strftime('%I:%M %p')
        else:  # HH:MM
            time_str = local_time.strftime('%H:%M')
        
        return f"{date_str} {time_str}"
    except Exception as e:
        # Fallback –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
        return str(time_str)

def get_posts_main_menu(lang: str = "ru"):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="posts_scheduled")],
        [InlineKeyboardButton(text="üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–∏", callback_data="posts_drafts")],
        [InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ", callback_data="posts_published")],
        [InlineKeyboardButton(text="üì∫ –ü–æ –∫–∞–Ω–∞–ª–∞–º", callback_data="posts_by_channels")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def get_channel_filter_keyboard(channels: list, lang: str = "ru"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º"""
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ "–í—Å–µ –∫–∞–Ω–∞–ª—ã"
    buttons.append([InlineKeyboardButton(text="üì∫ –í—Å–µ –∫–∞–Ω–∞–ª—ã", callback_data="filter_all_channels")])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    for channel in channels:
        admin_status = "‚úÖ" if channel.get('is_admin_verified') else "‚ùì"
        text = f"{admin_status} {channel['name']}"
        buttons.append([InlineKeyboardButton(
            text=text, 
            callback_data=f"filter_channel:{channel['id']}"
        )])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="posts_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_post_actions_keyboard(post_id: int, is_published: bool = False, lang: str = "ru"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ—Å—Ç–æ–º"""
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
    buttons.append([InlineKeyboardButton(text="üëÄ –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"post_full_view:{post_id}")])
    
    if not is_published:
        buttons.append([
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"post_edit_cmd:{post_id}"),
            InlineKeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"post_publish_cmd:{post_id}")
        ])
        buttons.append([
            InlineKeyboardButton(text="üìÖ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"post_reschedule_cmd:{post_id}"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"post_delete_cmd:{post_id}")
        ])
    else:
        buttons.append([InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"post_stats:{post_id}")])
    
    buttons.append([InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="posts_back")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def format_post_preview(post: dict, user: dict = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞"""
    text = f"üìã **–ü–æ—Å—Ç #{post['id']}**\n\n"
    
    # –°—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
    if post.get('published'):
        text += "‚úÖ **–°—Ç–∞—Ç—É—Å:** –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω\n"
    elif post.get('draft'):
        text += "üìù **–°—Ç–∞—Ç—É—Å:** –ß–µ—Ä–Ω–æ–≤–∏–∫\n"
    elif post.get('publish_time'):
        formatted_time = format_time_for_user(post['publish_time'], user or {})
        user_tz = user.get('timezone', 'UTC') if user else 'UTC'
        text += f"‚è∞ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:** {formatted_time} ({user_tz})\n"
    else:
        text += "‚ùì **–°—Ç–∞—Ç—É—Å:** –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω\n"
    
    # –ö–∞–Ω–∞–ª
    if post.get('channels'):
        text += f"üì∫ **–ö–∞–Ω–∞–ª:** {post['channels']['name']}\n"
    
    # –§–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞
    fmt = post.get('parse_mode') or post.get('format')
    if fmt:
        text += f"üé® **–§–æ—Ä–º–∞—Ç:** {fmt}\n"
    
    text += "\n" + "‚îÄ" * 30 + "\n\n"
    
    # –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
    if post.get('text'):
        preview_text = post['text']
        if len(preview_text) > 200:
            preview_text = preview_text[:200] + "..."
        text += preview_text
    else:
        text += "*[–ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞]*"
    
    # –ú–µ–¥–∏–∞
    if post.get('media_type'):
        text += f"\n\nüìé **–ú–µ–¥–∏–∞:** {post['media_type']}"
    
    # –ö–Ω–æ–ø–∫–∏
    if post.get('buttons'):
        try:
            buttons = json.loads(post['buttons']) if isinstance(post['buttons'], str) else post['buttons']
            text += f"\nüîò **–ö–Ω–æ–ø–æ–∫:** {len(buttons)}"
        except:
            text += f"\nüîò **–ö–Ω–æ–ø–∫–∏:** –µ—Å—Ç—å"
    
    return text

async def send_full_post_preview(callback: CallbackQuery, post: dict, user: dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞ –∫–∞–∫ –æ–Ω –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ –∫–∞–Ω–∞–ª–µ"""
    text = post.get("text", "")
    media_id = post.get("media_id")
    media_type = post.get("media_type")
    parse_mode = post.get("parse_mode") or post.get("format")
    buttons = post.get("buttons")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
    markup = None
    if buttons:
        try:
            if isinstance(buttons, str):
                buttons_list = json.loads(buttons)
            else:
                buttons_list = buttons
            
            if buttons_list:
                kb = []
                for btn in buttons_list:
                    if isinstance(btn, dict) and btn.get("text") and btn.get("url"):
                        kb.append([InlineKeyboardButton(text=btn["text"], url=btn["url"])])
                if kb:
                    markup = InlineKeyboardMarkup(inline_keyboard=kb)
        except:
            pass
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º parse_mode
    if parse_mode == "HTML":
        pm = "HTML"
    elif parse_mode == "Markdown":
        pm = "Markdown"
    else:
        pm = None
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–≤—å—é
    try:
        if media_id and media_type:
            if media_type == "photo":
                await callback.message.answer_photo(
                    media_id,
                    caption=text or None,
                    parse_mode=pm,
                    reply_markup=markup
                )
            elif media_type == "video":
                await callback.message.answer_video(
                    media_id,
                    caption=text or None,
                    parse_mode=pm,
                    reply_markup=markup
                )
            elif media_type == "animation":
                await callback.message.answer_animation(
                    media_id,
                    caption=text or None,
                    parse_mode=pm,
                    reply_markup=markup
                )
        else:
            await callback.message.answer(
                text or "üìù *[–ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞]*",
                parse_mode=pm or "Markdown",
                reply_markup=markup
            )
    except Exception as e:
        await callback.message.answer(
            f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞**\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é: {str(e)}\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.",
            parse_mode="Markdown"
        )

@router.message(Command("list"))
async def cmd_list_posts(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤"""
    user_id = message.from_user.id
    user = supabase_db.db.ensure_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    await show_posts_menu(message, user, lang)

async def show_posts_menu(message: Message, user: dict, lang: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å—Ç–æ–≤"""
    text = "üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    keyboard = get_posts_main_menu(lang)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data == "posts_menu")
async def callback_posts_menu(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å—Ç–æ–≤"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    text = "üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    keyboard = get_posts_main_menu(lang)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "posts_scheduled")
async def callback_scheduled_posts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    project_id = user.get("current_project")
    
    if not project_id:
        text = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="posts_menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        return
    
    posts = supabase_db.db.get_scheduled_posts_by_channel(project_id)
    
    if not posts:
        text = "‚è∞ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã**\n\n‚ùå –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="create_post")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="posts_menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º
    channels_posts = {}
    for post in posts:
        channel_name = post.get('channels', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
        if channel_name not in channels_posts:
            channels_posts[channel_name] = []
        channels_posts[channel_name].append(post)
    
    text = "‚è∞ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã**\n\n"
    buttons = []
    
    for channel_name, channel_posts in channels_posts.items():
        text += f"üì∫ **{channel_name}** ({len(channel_posts)} –ø–æ—Å—Ç–æ–≤)\n"
        for post in channel_posts[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
            try:
                formatted_time = format_time_for_user(post['publish_time'], user)
                time_str = formatted_time.split()[1] if ' ' in formatted_time else formatted_time[:5]  # –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è
                
                post_text = post.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')[:30]
                text += f"  ‚Ä¢ {time_str} - {post_text}...\n"
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
                buttons.append([InlineKeyboardButton(
                    text=f"üìã –ü–æ—Å—Ç #{post['id']} ({time_str})",
                    callback_data=f"post_view:{post['id']}"
                )])
            except:
                text += f"  ‚Ä¢ –ü–æ—Å—Ç #{post['id']}\n"
                buttons.append([InlineKeyboardButton(
                    text=f"üìã –ü–æ—Å—Ç #{post['id']}",
                    callback_data=f"post_view:{post['id']}"
                )])
        
        if len(channel_posts) > 3:
            text += f"  ... –∏ –µ—â–µ {len(channel_posts) - 3} –ø–æ—Å—Ç–æ–≤\n"
        text += "\n"
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="posts_menu")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "posts_drafts")
async def callback_draft_posts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫–∏"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    project_id = user.get("current_project")
    
    if not project_id:
        text = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="posts_menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        return
    
    posts = supabase_db.db.get_draft_posts_by_channel(project_id)
    
    if not posts:
        text = "üìù **–ß–µ—Ä–Ω–æ–≤–∏–∫–∏**\n\n‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="create_post")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="posts_menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
        return
    
    text = "üìù **–ß–µ—Ä–Ω–æ–≤–∏–∫–∏**\n\n"
    buttons = []
    
    for i, post in enumerate(posts[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        channel_name = post.get('channels', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
        post_text = post.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')[:30]
        
        text += f"{i}. **{channel_name}**\n"
        text += f"   {post_text}...\n\n"
        
        buttons.append([InlineKeyboardButton(
            text=f"üìù –ß–µ—Ä–Ω–æ–≤–∏–∫ #{post['id']}",
            callback_data=f"post_view:{post['id']}"
        )])
    
    if len(posts) > 10:
        text += f"... –∏ –µ—â–µ {len(posts) - 10} —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤"
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="posts_menu")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "posts_published")
async def callback_published_posts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    project_id = user.get("current_project")
    
    if not project_id:
        text = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="posts_menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
    all_posts = supabase_db.db.list_posts(project_id=project_id, only_pending=False)
    published_posts = [p for p in all_posts if p.get('published')]
    
    if not published_posts:
        text = "‚úÖ **–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã**\n\n‚ùå –ù–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="create_post")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="posts_menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
        return
    
    text = "‚úÖ **–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã**\n\n"
    buttons = []
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    published_posts.sort(key=lambda x: x.get('created_at', ''), reverse=True)
    
    for i, post in enumerate(published_posts[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channel = supabase_db.db.get_channel(post.get('channel_id'))
        channel_name = channel['name'] if channel else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª'
        
        post_text = post.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')[:30]
        
        text += f"{i}. **{channel_name}**\n"
        text += f"   {post_text}...\n\n"
        
        buttons.append([InlineKeyboardButton(
            text=f"‚úÖ –ü–æ—Å—Ç #{post['id']}",
            callback_data=f"post_view:{post['id']}"
        )])
    
    if len(published_posts) > 10:
        text += f"... –∏ –µ—â–µ {len(published_posts) - 10} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="posts_menu")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "posts_by_channels")
async def callback_posts_by_channels(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    project_id = user.get("current_project")
    
    if not project_id:
        text = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="posts_menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        return
    
    channels = supabase_db.db.list_channels(project_id=project_id)
    
    if not channels:
        text = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="channels_add")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="posts_menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        return
    
    text = "üì∫ **–ü–æ—Å—Ç—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:"
    keyboard = get_channel_filter_keyboard(channels, lang)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data.startswith("filter_channel:"))
async def callback_filter_by_channel(callback: CallbackQuery):
    """–§–∏–ª—å—Ç—Ä –ø–æ—Å—Ç–æ–≤ –ø–æ –∫–∞–Ω–∞–ª—É"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    channel_id = int(callback.data.split(":", 1)[1])
    channel = supabase_db.db.get_channel(channel_id)
    
    if not channel:
        await callback.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–∞
    posts = supabase_db.db.list_posts_by_channel(channel_id, only_pending=False)
    
    if not posts:
        text = f"üì∫ **–ö–∞–Ω–∞–ª: {channel['name']}**\n\n‚ùå –ü–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="create_post")],
            [InlineKeyboardButton(text="üîô –ö –∫–∞–Ω–∞–ª–∞–º", callback_data="posts_by_channels")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
    scheduled = [p for p in posts if not p.get('published') and not p.get('draft') and p.get('publish_time')]
    drafts = [p for p in posts if p.get('draft')]
    published = [p for p in posts if p.get('published')]
    
    text = f"üì∫ **–ö–∞–Ω–∞–ª: {channel['name']}**\n\n"
    text += f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(scheduled)}\n"
    text += f"üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: {len(drafts)}\n"
    text += f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: {len(published)}\n\n"
    
    buttons = []
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã
    recent_posts = sorted(posts, key=lambda x: x.get('created_at', ''), reverse=True)[:5]
    
    if recent_posts:
        text += "**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã:**\n"
        for post in recent_posts:
            status = "‚úÖ" if post.get('published') else "‚è∞" if post.get('publish_time') else "üìù"
            post_text = post.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')[:25]
            text += f"{status} {post_text}...\n"
            
            buttons.append([InlineKeyboardButton(
                text=f"{status} –ü–æ—Å—Ç #{post['id']}",
                callback_data=f"post_view:{post['id']}"
            )])
    
    buttons.append([InlineKeyboardButton(text="üîô –ö –∫–∞–Ω–∞–ª–∞–º", callback_data="posts_by_channels")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data.startswith("post_view:"))
async def callback_view_post(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    post_id = int(callback.data.split(":", 1)[1])
    post = supabase_db.db.get_post(post_id)
    
    if not post:
        await callback.message.edit_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    channel = supabase_db.db.get_channel(post['channel_id'])
    if channel:
        post['channels'] = channel
    
    text = format_post_preview(post, user)
    keyboard = get_post_actions_keyboard(post_id, post.get('published', False), lang)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data.startswith("post_full_view:"))
async def callback_full_view_post(callback: CallbackQuery):
    """–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ (–∫–∞–∫ –æ–Ω –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ –∫–∞–Ω–∞–ª–µ)"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    
    post_id = int(callback.data.split(":", 1)[1])
    post = supabase_db.db.get_post(post_id)
    
    if not post:
        await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞
    await send_full_post_preview(callback, post, user)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    channel = supabase_db.db.get_channel(post['channel_id'])
    channel_name = channel['name'] if channel else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª'
    
    info_text = f"üëÄ **–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
    info_text += f"üì∫ **–ö–∞–Ω–∞–ª:** {channel_name}\n"
    
    if post.get('published'):
        info_text += "‚úÖ **–°—Ç–∞—Ç—É—Å:** –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω\n"
    elif post.get('draft'):
        info_text += "üìù **–°—Ç–∞—Ç—É—Å:** –ß–µ—Ä–Ω–æ–≤–∏–∫\n"
    elif post.get('publish_time'):
        formatted_time = format_time_for_user(post['publish_time'], user)
        user_tz = user.get('timezone', 'UTC')
        info_text += f"‚è∞ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:** {formatted_time} ({user_tz})\n"
    
    keyboard = get_post_actions_keyboard(post_id, post.get('published', False))
    
    await callback.message.answer(info_text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
@router.callback_query(F.data.startswith("post_edit_cmd:"))
async def callback_edit_post_cmd(callback: CallbackQuery):
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    post_id = int(callback.data.split(":", 1)[1])
    await callback.message.answer(f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/edit {post_id}` –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞.")
    await callback.answer()

@router.callback_query(F.data.startswith("post_publish_cmd:"))
async def callback_publish_post_cmd(callback: CallbackQuery):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    user_id = callback.from_user.id
    post_id = int(callback.data.split(":", 1)[1])
    
    post = supabase_db.db.get_post(post_id)
    if not post:
        await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if post.get('published'):
        await callback.answer("–ü–æ—Å—Ç —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–µ
    now = datetime.now(ZoneInfo("UTC"))
    supabase_db.db.update_post(post_id, {
        "publish_time": now,
        "draft": False
    })
    
    await callback.message.edit_text(
        f"üöÄ **–ü–æ—Å—Ç #{post_id} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é**\n\n"
        f"–ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        parse_mode="Markdown"
    )
    await callback.answer("–ü–æ—Å—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é!")

@router.callback_query(F.data.startswith("post_reschedule_cmd:"))
async def callback_reschedule_post_cmd(callback: CallbackQuery):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    post_id = int(callback.data.split(":", 1)[1])
    await callback.message.answer(f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/reschedule {post_id} YYYY-MM-DD HH:MM` –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–æ—Å—Ç–∞.")
    await callback.answer()

@router.callback_query(F.data.startswith("post_delete_cmd:"))
async def callback_delete_post_cmd(callback: CallbackQuery):
    """–ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    post_id = int(callback.data.split(":", 1)[1])
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"post_delete_confirm:{post_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"post_view:{post_id}")
        ]
    ])
    
    await callback.message.edit_text(
        f"üóë **–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç?\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("post_delete_confirm:"))
async def callback_confirm_delete_post(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    post_id = int(callback.data.split(":", 1)[1])
    
    try:
        supabase_db.db.delete_post(post_id)
        await callback.message.edit_text(
            f"‚úÖ **–ü–æ—Å—Ç #{post_id} —É–¥–∞–ª–µ–Ω**\n\n"
            f"–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç: {str(e)}",
            parse_mode="Markdown"
        )
    
    await callback.answer()

@router.callback_query(F.data == "posts_back")
async def callback_posts_back(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤"""
    await callback_posts_menu(callback)

@router.callback_query(F.data == "create_post")
async def callback_create_post(callback: CallbackQuery):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç"""
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
    await callback.message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞.")
    await callback.answer()
