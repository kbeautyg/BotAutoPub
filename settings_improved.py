from aiogram import Router, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import supabase_db
from __init__ import TEXTS
from zoneinfo import ZoneInfo
from datetime import datetime

router = Router()

# –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞
POPULAR_TIMEZONES = [
    ("UTC", "UTC (–í—Å–µ–º–∏—Ä–Ω–æ–µ –≤—Ä–µ–º—è)"),
    ("Europe/Moscow", "–ú–æ—Å–∫–≤–∞ (UTC+3)"),
    ("Europe/Kiev", "–ö–∏–µ–≤ (UTC+2)"),
    ("Europe/Minsk", "–ú–∏–Ω—Å–∫ (UTC+3)"),
    ("Asia/Almaty", "–ê–ª–º–∞—Ç—ã (UTC+6)"),
    ("Asia/Tashkent", "–¢–∞—à–∫–µ–Ω—Ç (UTC+5)"),
    ("Asia/Yekaterinburg", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (UTC+5)"),
    ("Asia/Novosibirsk", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ (UTC+7)"),
    ("Asia/Krasnoyarsk", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫ (UTC+7)"),
    ("Asia/Irkutsk", "–ò—Ä–∫—É—Ç—Å–∫ (UTC+8)"),
    ("Asia/Vladivostok", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ (UTC+10)"),
    ("Europe/London", "–õ–æ–Ω–¥–æ–Ω (UTC+0)"),
    ("Europe/Berlin", "–ë–µ—Ä–ª–∏–Ω (UTC+1)"),
    ("Europe/Paris", "–ü–∞—Ä–∏–∂ (UTC+1)"),
    ("America/New_York", "–ù—å—é-–ô–æ—Ä–∫ (UTC-5)"),
    ("America/Los_Angeles", "–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å (UTC-8)"),
    ("Asia/Tokyo", "–¢–æ–∫–∏–æ (UTC+9)"),
    ("Asia/Shanghai", "–®–∞–Ω—Ö–∞–π (UTC+8)"),
    ("Asia/Dubai", "–î—É–±–∞–π (UTC+4)"),
    ("Australia/Sydney", "–°–∏–¥–Ω–µ–π (UTC+11)")
]

def get_settings_main_menu(lang: str = "ru"):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="settings_timezone")],
        [InlineKeyboardButton(text="üåê –Ø–∑—ã–∫", callback_data="settings_language")],
        [InlineKeyboardButton(text="üìÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã", callback_data="settings_date_format")],
        [InlineKeyboardButton(text="‚è∞ –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏", callback_data="settings_time_format")],
        [InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="settings_stats")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def get_timezone_menu(lang: str = "ru"):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    buttons = []
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞
    for tz_id, tz_name in POPULAR_TIMEZONES[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        buttons.append([InlineKeyboardButton(
            text=tz_name, 
            callback_data=f"tz_set:{tz_id}"
        )])
    
    buttons.append([InlineKeyboardButton(text="üåç –ë–æ–ª—å—à–µ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤", callback_data="tz_more")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_more_timezones_menu(lang: str = "ru"):
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞"""
    buttons = []
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞
    for tz_id, tz_name in POPULAR_TIMEZONES[10:]:
        buttons.append([InlineKeyboardButton(
            text=tz_name, 
            callback_data=f"tz_set:{tz_id}"
        )])
    
    buttons.append([InlineKeyboardButton(text="üîô –ö –æ—Å–Ω–æ–≤–Ω—ã–º", callback_data="settings_timezone")])
    buttons.append([InlineKeyboardButton(text="üè† –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_language_menu(lang: str = "ru"):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_set:ru")],
        [InlineKeyboardButton(text="üá∫üá∏ English", callback_data="lang_set:en")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_menu")]
    ])

def get_date_format_menu(lang: str = "ru"):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="YYYY-MM-DD (2024-12-25)", callback_data="date_fmt:YYYY-MM-DD")],
        [InlineKeyboardButton(text="DD.MM.YYYY (25.12.2024)", callback_data="date_fmt:DD.MM.YYYY")],
        [InlineKeyboardButton(text="DD/MM/YYYY (25/12/2024)", callback_data="date_fmt:DD/MM/YYYY")],
        [InlineKeyboardButton(text="MM/DD/YYYY (12/25/2024)", callback_data="date_fmt:MM/DD/YYYY")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_menu")]
    ])

def get_time_format_menu(lang: str = "ru"):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="24-—á–∞—Å–æ–≤–æ–π (15:30)", callback_data="time_fmt:HH:MM")],
        [InlineKeyboardButton(text="12-—á–∞—Å–æ–≤–æ–π (3:30 PM)", callback_data="time_fmt:hh:MM AM")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_menu")]
    ])

def get_notifications_menu(user: dict, lang: str = "ru"):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notifications = supabase_db.db.get_notification_settings(user['user_id'])
    
    post_published = notifications.get('post_published', True) if notifications else True
    post_failed = notifications.get('post_failed', True) if notifications else True
    daily_summary = notifications.get('daily_summary', False) if notifications else False
    
    buttons = []
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    pub_status = "‚úÖ" if post_published else "‚ùå"
    buttons.append([InlineKeyboardButton(
        text=f"{pub_status} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", 
        callback_data="notif_toggle:post_published"
    )])
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
    fail_status = "‚úÖ" if post_failed else "‚ùå"
    buttons.append([InlineKeyboardButton(
        text=f"{fail_status} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö", 
        callback_data="notif_toggle:post_failed"
    )])
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞
    daily_status = "‚úÖ" if daily_summary else "‚ùå"
    buttons.append([InlineKeyboardButton(
        text=f"{daily_status} –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞", 
        callback_data="notif_toggle:daily_summary"
    )])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def format_user_settings(user: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    text = "‚öôÔ∏è **–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
    
    # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    tz_name = user.get('timezone', 'UTC')
    try:
        tz = ZoneInfo(tz_name)
        current_time = datetime.now(tz)
        time_str = current_time.strftime('%H:%M')
        text += f"üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** {tz_name}\n"
        text += f"   –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {time_str}\n\n"
    except:
        text += f"üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** {tz_name}\n\n"
    
    # –Ø–∑—ã–∫
    lang_name = "–†—É—Å—Å–∫–∏–π" if user.get('language') == 'ru' else "English"
    text += f"üåê **–Ø–∑—ã–∫:** {lang_name}\n\n"
    
    # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    text += f"üìÖ **–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã:** {user.get('date_format', 'YYYY-MM-DD')}\n"
    text += f"‚è∞ **–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏:** {user.get('time_format', 'HH:MM')}\n\n"
    
    # –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        now = datetime.now(ZoneInfo(tz_name))
        if user.get('date_format') == 'DD.MM.YYYY':
            date_example = now.strftime('%d.%m.%Y')
        elif user.get('date_format') == 'DD/MM/YYYY':
            date_example = now.strftime('%d/%m/%Y')
        elif user.get('date_format') == 'MM/DD/YYYY':
            date_example = now.strftime('%m/%d/%Y')
        else:
            date_example = now.strftime('%Y-%m-%d')
        
        if user.get('time_format') == 'hh:MM AM':
            time_example = now.strftime('%I:%M %p')
        else:
            time_example = now.strftime('%H:%M')
        
        text += f"üìù **–ü—Ä–∏–º–µ—Ä:** {date_example} {time_example}\n\n"
    except:
        pass
    
    # –¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç
    if user.get('current_project'):
        project = supabase_db.db.get_project(user['current_project'])
        if project:
            text += f"üìÅ **–¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç:** {project['name']}\n"
    
    return text

@router.message(Command("settings"))
async def cmd_settings(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user = supabase_db.db.ensure_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    await show_settings_menu(message, user, lang)

async def show_settings_menu(message: Message, user: dict, lang: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    text = format_user_settings(user)
    keyboard = get_settings_main_menu(lang)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data == "settings_menu")
async def callback_settings_menu(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    text = format_user_settings(user)
    keyboard = get_settings_main_menu(lang)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "settings_timezone")
async def callback_timezone_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    current_tz = user.get('timezone', 'UTC')
    
    text = (
        f"üåç **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞**\n\n"
        f"–¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: **{current_tz}**\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:"
    )
    
    keyboard = get_timezone_menu(lang)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "tz_more")
async def callback_more_timezones(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤"""
    text = "üåç **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:"
    keyboard = get_more_timezones_menu()
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data.startswith("tz_set:"))
async def callback_set_timezone(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"""
    user_id = callback.from_user.id
    timezone = callback.data.split(":", 1)[1]
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        tz = ZoneInfo(timezone)
        current_time = datetime.now(tz)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        supabase_db.db.update_user(user_id, {"timezone": timezone})
        
        time_str = current_time.strftime('%H:%M')
        await callback.message.edit_text(
            f"‚úÖ **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª–µ–Ω**\n\n"
            f"–ù–æ–≤—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: **{timezone}**\n"
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: **{time_str}**\n\n"
            f"–í—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ.",
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞**\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {str(e)}",
            parse_mode="Markdown"
        )
    
    await callback.answer()

@router.callback_query(F.data == "settings_language")
async def callback_language_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    current_lang = user.get('language', 'ru')
    
    text = (
        f"üåê **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞**\n\n"
        f"–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: **{'–†—É—Å—Å–∫–∏–π' if current_lang == 'ru' else 'English'}**\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:"
    )
    
    keyboard = get_language_menu()
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data.startswith("lang_set:"))
async def callback_set_language(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫"""
    user_id = callback.from_user.id
    language = callback.data.split(":", 1)[1]
    
    supabase_db.db.update_user(user_id, {"language": language})
    
    lang_name = "–†—É—Å—Å–∫–∏–π" if language == 'ru' else "English"
    await callback.message.edit_text(
        f"‚úÖ **–Ø–∑—ã–∫ –æ–±–Ω–æ–≤–ª–µ–Ω**\n\n"
        f"–ù–æ–≤—ã–π —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: **{lang_name}**\n\n"
        f"–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ.",
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "settings_date_format")
async def callback_date_format_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    current_format = user.get('date_format', 'YYYY-MM-DD')
    
    text = (
        f"üìÖ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã**\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç: **{current_format}**\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç:"
    )
    
    keyboard = get_date_format_menu()
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data.startswith("date_fmt:"))
async def callback_set_date_format(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"""
    user_id = callback.from_user.id
    date_format = callback.data.split(":", 1)[1]
    
    supabase_db.db.update_user(user_id, {"date_format": date_format})
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä
    now = datetime.now()
    if date_format == 'DD.MM.YYYY':
        example = now.strftime('%d.%m.%Y')
    elif date_format == 'DD/MM/YYYY':
        example = now.strftime('%d/%m/%Y')
    elif date_format == 'MM/DD/YYYY':
        example = now.strftime('%m/%d/%Y')
    else:
        example = now.strftime('%Y-%m-%d')
    
    await callback.message.edit_text(
        f"‚úÖ **–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω**\n\n"
        f"–ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: **{date_format}**\n"
        f"–ü—Ä–∏–º–µ—Ä: **{example}**\n\n"
        f"–í—Å–µ –¥–∞—Ç—ã —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.",
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "settings_time_format")
async def callback_time_format_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    current_format = user.get('time_format', 'HH:MM')
    
    text = (
        f"‚è∞ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏**\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç: **{current_format}**\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç:"
    )
    
    keyboard = get_time_format_menu()
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data.startswith("time_fmt:"))
async def callback_set_time_format(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏"""
    user_id = callback.from_user.id
    time_format = callback.data.split(":", 1)[1]
    
    supabase_db.db.update_user(user_id, {"time_format": time_format})
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä
    now = datetime.now()
    if time_format == 'hh:MM AM':
        example = now.strftime('%I:%M %p')
    else:
        example = now.strftime('%H:%M')
    
    await callback.message.edit_text(
        f"‚úÖ **–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω**\n\n"
        f"–ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: **{time_format}**\n"
        f"–ü—Ä–∏–º–µ—Ä: **{example}**\n\n"
        f"–í—Å–µ –≤—Ä–µ–º–µ–Ω–∞ —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.",
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "settings_notifications")
async def callback_notifications_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    text = (
        f"üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n"
        f"–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–∏–ø–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:"
    )
    
    keyboard = get_notifications_menu(user, lang)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data.startswith("notif_toggle:"))
async def callback_toggle_notification(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    lang = user.get("language", "ru") if user else "ru"
    
    setting_name = callback.data.split(":", 1)[1]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    notifications = supabase_db.db.get_notification_settings(user_id)
    if not notifications:
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        notifications = {
            'user_id': user_id,
            'post_published': True,
            'post_failed': True,
            'daily_summary': False
        }
        supabase_db.db.create_notification_settings(notifications)
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    current_value = notifications.get(setting_name, False)
    new_value = not current_value
    
    supabase_db.db.update_notification_settings(user_id, {setting_name: new_value})
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    user = supabase_db.db.get_user(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text = (
        f"üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n"
        f"–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–∏–ø–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:"
    )
    
    keyboard = get_notifications_menu(user, lang)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    
    status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_value else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    setting_names = {
        'post_published': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',
        'post_failed': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö',
        'daily_summary': '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞'
    }
    
    await callback.answer(f"{setting_names.get(setting_name, setting_name)} {status}")

@router.callback_query(F.data == "settings_stats")
async def callback_settings_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    project_id = user.get("current_project")
    
    if not project_id:
        text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    channels = supabase_db.db.list_channels(project_id=project_id)
    all_posts = supabase_db.db.list_posts(project_id=project_id, only_pending=False)
    scheduled_posts = [p for p in all_posts if not p.get('published') and not p.get('draft') and p.get('publish_time')]
    draft_posts = [p for p in all_posts if p.get('draft')]
    published_posts = [p for p in all_posts if p.get('published')]
    
    text = (
        f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        f"üì∫ **–ö–∞–Ω–∞–ª–æ–≤:** {len(channels)}\n"
        f"üìù **–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤:** {len(all_posts)}\n"
        f"‚è∞ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö:** {len(scheduled_posts)}\n"
        f"üìã **–ß–µ—Ä–Ω–æ–≤–∏–∫–æ–≤:** {len(draft_posts)}\n"
        f"‚úÖ **–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö:** {len(published_posts)}\n\n"
    )
    
    if user.get('created_at'):
        try:
            created_date = datetime.fromisoformat(user['created_at'].replace('Z', '+00:00'))
            days_using = (datetime.now(created_date.tzinfo) - created_date).days
            text += f"üìÖ **–ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–æ—Ç–∞:** {days_using} –¥–Ω–µ–π\n"
        except:
            pass
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
    if channels:
        text += f"\n**–ö–∞–Ω–∞–ª—ã:**\n"
        for channel in channels[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            channel_posts = [p for p in all_posts if p.get('channel_id') == channel['id']]
            admin_status = "‚úÖ" if channel.get('is_admin_verified') else "‚ùì"
            text += f"{admin_status} {channel['name']}: {len(channel_posts)} –ø–æ—Å—Ç–æ–≤\n"
        
        if len(channels) > 5:
            text += f"... –∏ –µ—â–µ {len(channels) - 5} –∫–∞–Ω–∞–ª–æ–≤\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="settings_stats")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_menu")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()
