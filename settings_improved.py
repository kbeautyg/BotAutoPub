from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import supabase_db
from zoneinfo import available_timezones
import re

router = Router()

def get_settings_main_menu(lang: str = "ru"):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="settings_timezone"),
            InlineKeyboardButton(text="üó£ –Ø–∑—ã–∫", callback_data="settings_language")
        ],
        [
            InlineKeyboardButton(text="üìÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã", callback_data="settings_date_format"),
            InlineKeyboardButton(text="üïê –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏", callback_data="settings_time_format")
        ],
        [
            InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications")
        ],
        [
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ])

def format_user_settings(user: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not user:
        return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
    
    text = "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
    
    # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    timezone = user.get("timezone", "UTC")
    text += f"üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** {timezone}\n"
    
    # –Ø–∑—ã–∫
    language = user.get("language", "ru")
    lang_name = "–†—É—Å—Å–∫–∏–π" if language == "ru" else "English"
    text += f"üó£ **–Ø–∑—ã–∫:** {lang_name}\n"
    
    # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    date_format = user.get("date_format", "YYYY-MM-DD")
    text += f"üìÖ **–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã:** {date_format}\n"
    
    # –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    time_format = user.get("time_format", "HH:MM")
    text += f"üïê **–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏:** {time_format}\n"
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notify_before = user.get("notify_before", 0)
    if notify_before > 0:
        text += f"üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** –∑–∞ {notify_before} –º–∏–Ω. –¥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n"
    else:
        text += f"üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** –æ—Ç–∫–ª—é—á–µ–Ω—ã\n"
    
    text += "\n**–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:**"
    
    return text

@router.message(Command("settings"))
async def cmd_settings(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user = supabase_db.db.get_user(user_id)
    if not user:
        user = supabase_db.db.ensure_user(user_id)
    
    lang = user.get("language", "ru") if user else "ru"
    
    text = format_user_settings(user)
    keyboard = get_settings_main_menu(lang)
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data == "settings_timezone")
async def callback_settings_timezone(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    
    current_tz = user.get("timezone", "UTC") if user else "UTC"
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞
    popular_timezones = [
        ("UTC", "UTC (–í—Å–µ–º–∏—Ä–Ω–æ–µ –≤—Ä–µ–º—è)"),
        ("Europe/Moscow", "–ú–æ—Å–∫–≤–∞ (UTC+3)"),
        ("Europe/Kiev", "–ö–∏–µ–≤ (UTC+2)"),
        ("Europe/Minsk", "–ú–∏–Ω—Å–∫ (UTC+3)"),
        ("Asia/Almaty", "–ê–ª–º–∞—Ç—ã (UTC+6)"),
        ("Asia/Yekaterinburg", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (UTC+5)"),
        ("Asia/Novosibirsk", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ (UTC+7)"),
        ("Europe/London", "–õ–æ–Ω–¥–æ–Ω (UTC+0)"),
        ("America/New_York", "–ù—å—é-–ô–æ—Ä–∫ (UTC-5)"),
        ("Asia/Tokyo", "–¢–æ–∫–∏–æ (UTC+9)")
    ]
    
    text = f"üåç **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞**\n\n"
    text += f"**–¢–µ–∫—É—â–∏–π:** {current_tz}\n\n"
    text += f"**–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:**\n\n"
    
    buttons = []
    for tz_id, tz_name in popular_timezones:
        is_current = tz_id == current_tz
        button_text = f"{'‚úÖ ' if is_current else ''}{tz_name}"
        buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"set_timezone:{tz_id}"
        )])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_menu")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "settings_language")
async def callback_settings_language(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    
    current_lang = user.get("language", "ru") if user else "ru"
    
    text = f"üó£ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞**\n\n"
    text += f"**–¢–µ–∫—É—â–∏–π:** {'–†—É—Å—Å–∫–∏–π' if current_lang == 'ru' else 'English'}\n\n"
    text += f"**–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:**"
    
    buttons = [
        [InlineKeyboardButton(
            text=f"{'‚úÖ ' if current_lang == 'ru' else ''}üá∑üá∫ –†—É—Å—Å–∫–∏–π",
            callback_data="set_language:ru"
        )],
        [InlineKeyboardButton(
            text=f"{'‚úÖ ' if current_lang == 'en' else ''}üá∫üá∏ English",
            callback_data="set_language:en"
        )],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_menu")]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "settings_date_format")
async def callback_settings_date_format(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    
    current_format = user.get("date_format", "YYYY-MM-DD") if user else "YYYY-MM-DD"
    
    date_formats = [
        ("YYYY-MM-DD", "2024-12-25"),
        ("DD.MM.YYYY", "25.12.2024"),
        ("DD/MM/YYYY", "25/12/2024"),
        ("MM/DD/YYYY", "12/25/2024")
    ]
    
    text = f"üìÖ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã**\n\n"
    text += f"**–¢–µ–∫—É—â–∏–π:** {current_format}\n\n"
    text += f"**–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã:**\n\n"
    
    buttons = []
    for format_id, example in date_formats:
        is_current = format_id == current_format
        button_text = f"{'‚úÖ ' if is_current else ''}{format_id} ({example})"
        buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"set_date_format:{format_id}"
        )])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_menu")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "settings_time_format")
async def callback_settings_time_format(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    
    current_format = user.get("time_format", "HH:MM") if user else "HH:MM"
    
    time_formats = [
        ("HH:MM", "15:30 (24-—á–∞—Å–æ–≤–æ–π)"),
        ("hh:MM AM", "3:30 PM (12-—á–∞—Å–æ–≤–æ–π)")
    ]
    
    text = f"üïê **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏**\n\n"
    text += f"**–¢–µ–∫—É—â–∏–π:** {current_format}\n\n"
    text += f"**–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏:**\n\n"
    
    buttons = []
    for format_id, example in time_formats:
        is_current = format_id == current_format
        button_text = f"{'‚úÖ ' if is_current else ''}{example}"
        buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"set_time_format:{format_id}"
        )])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_menu")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "settings_notifications")
async def callback_settings_notifications(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    
    current_notify = user.get("notify_before", 0) if user else 0
    
    text = f"üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n"
    
    if current_notify > 0:
        text += f"**–¢–µ–∫—É—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:** –∑–∞ {current_notify} –º–∏–Ω—É—Ç –¥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
    else:
        text += f"**–¢–µ–∫—É—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:** –æ—Ç–∫–ª—é—á–µ–Ω—ã\n\n"
    
    text += f"**–£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏?**\n\n"
    
    notify_options = [
        (0, "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
        (5, "5 –º–∏–Ω—É—Ç"),
        (15, "15 –º–∏–Ω—É—Ç"),
        (30, "30 –º–∏–Ω—É—Ç"),
        (60, "1 —á–∞—Å"),
        (120, "2 —á–∞—Å–∞")
    ]
    
    buttons = []
    for minutes, label in notify_options:
        is_current = minutes == current_notify
        button_text = f"{'‚úÖ ' if is_current else ''}{label}"
        buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"set_notifications:{minutes}"
        )])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_menu")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "settings_menu")
async def callback_settings_menu(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = callback.from_user.id
    user = supabase_db.db.get_user(user_id)
    if not user:
        user = supabase_db.db.ensure_user(user_id)
    
    lang = user.get("language", "ru") if user else "ru"
    
    text = format_user_settings(user)
    keyboard = get_settings_main_menu(lang)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.callback_query(F.data.startswith("set_timezone:"))
async def callback_set_timezone(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"""
    timezone = callback.data.split(":", 1)[1]
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if timezone not in available_timezones():
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    success = supabase_db.db.update_user(user_id, {"timezone": timezone})
    
    if success:
        user = supabase_db.db.get_user(user_id)
        text = format_user_settings(user)
        keyboard = get_settings_main_menu(user.get("language", "ru"))
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer(f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {timezone}")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@router.callback_query(F.data.startswith("set_language:"))
async def callback_set_language(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫"""
    language = callback.data.split(":", 1)[1]
    user_id = callback.from_user.id
    
    if language not in ["ru", "en"]:
        await callback.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    success = supabase_db.db.update_user(user_id, {"language": language})
    
    if success:
        user = supabase_db.db.get_user(user_id)
        text = format_user_settings(user)
        keyboard = get_settings_main_menu(language)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        lang_name = "—Ä—É—Å—Å–∫–∏–π" if language == "ru" else "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π"
        await callback.answer(f"‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {lang_name}")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@router.callback_query(F.data.startswith("set_date_format:"))
async def callback_set_date_format(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"""
    date_format = callback.data.split(":", 1)[1]
    user_id = callback.from_user.id
    
    valid_formats = ["YYYY-MM-DD", "DD.MM.YYYY", "DD/MM/YYYY", "MM/DD/YYYY"]
    if date_format not in valid_formats:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    success = supabase_db.db.update_user(user_id, {"date_format": date_format})
    
    if success:
        user = supabase_db.db.get_user(user_id)
        text = format_user_settings(user)
        keyboard = get_settings_main_menu(user.get("language", "ru"))
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer(f"‚úÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {date_format}")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@router.callback_query(F.data.startswith("set_time_format:"))
async def callback_set_time_format(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏"""
    time_format = callback.data.split(":", 1)[1]
    user_id = callback.from_user.id
    
    valid_formats = ["HH:MM", "hh:MM AM"]
    if time_format not in valid_formats:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    success = supabase_db.db.update_user(user_id, {"time_format": time_format})
    
    if success:
        user = supabase_db.db.get_user(user_id)
        text = format_user_settings(user)
        keyboard = get_settings_main_menu(user.get("language", "ru"))
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer(f"‚úÖ –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {time_format}")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@router.callback_query(F.data.startswith("set_notifications:"))
async def callback_set_notifications(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        notify_minutes = int(callback.data.split(":", 1)[1])
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        return
    
    user_id = callback.from_user.id
    
    if notify_minutes < 0 or notify_minutes > 1440:  # –ú–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    success = supabase_db.db.update_user(user_id, {"notify_before": notify_minutes})
    
    if success:
        user = supabase_db.db.get_user(user_id)
        text = format_user_settings(user)
        keyboard = get_settings_main_menu(user.get("language", "ru"))
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        
        if notify_minutes == 0:
            await callback.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        else:
            await callback.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –∑–∞ {notify_minutes} –º–∏–Ω.")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
