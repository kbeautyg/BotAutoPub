import pytz
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple
import re
import json
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import logging

logger = logging.getLogger(__name__)

class TimeZoneManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤"""
    
    COMMON_TIMEZONES = {
        'UTC': 'UTC',
        '–ú–æ—Å–∫–≤–∞': 'Europe/Moscow',
        '–ö–∏–µ–≤': 'Europe/Kiev',
        '–ú–∏–Ω—Å–∫': 'Europe/Minsk',
        '–ê–ª–º–∞—Ç—ã': 'Asia/Almaty',
        '–¢–∞—à–∫–µ–Ω—Ç': 'Asia/Tashkent',
        '–ë–∞–∫—É': 'Asia/Baku',
        '–ï—Ä–µ–≤–∞–Ω': 'Asia/Yerevan',
        '–¢–±–∏–ª–∏—Å–∏': 'Asia/Tbilisi',
        '–ù—å—é-–ô–æ—Ä–∫': 'America/New_York',
        '–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å': 'America/Los_Angeles',
        '–õ–æ–Ω–¥–æ–Ω': 'Europe/London',
        '–ë–µ—Ä–ª–∏–Ω': 'Europe/Berlin',
        '–¢–æ–∫–∏–æ': 'Asia/Tokyo',
        '–ü–µ–∫–∏–Ω': 'Asia/Shanghai'
    }
    
    @classmethod
    def get_timezone_keyboard(cls) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏"""
        keyboard = []
        for name, tz in cls.COMMON_TIMEZONES.items():
            keyboard.append([InlineKeyboardButton(name, callback_data=f"tz_{tz}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")])
        return InlineKeyboardMarkup(keyboard)
    
    @classmethod
    def convert_to_user_timezone(cls, utc_time: datetime, user_timezone: str) -> datetime:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å UTC –≤—Ä–µ–º—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"""
        try:
            utc_tz = pytz.UTC
            user_tz = pytz.timezone(user_timezone)
            
            if utc_time.tzinfo is None:
                utc_time = utc_tz.localize(utc_time)
            
            return utc_time.astimezone(user_tz)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return utc_time
    
    @classmethod
    def convert_to_utc(cls, local_time: datetime, user_timezone: str) -> datetime:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ UTC"""
        try:
            user_tz = pytz.timezone(user_timezone)
            
            if local_time.tzinfo is None:
                local_time = user_tz.localize(local_time)
            
            return local_time.astimezone(pytz.UTC)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ UTC: {e}")
            return local_time

class TextFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram"""
    
    @staticmethod
    def escape_html(text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å HTML —Å–∏–º–≤–æ–ª—ã"""
        if not text:
            return ""
        return (text.replace('&', '&amp;')
                   .replace('<', '&lt;')
                   .replace('>', '&gt;'))
    
    @staticmethod
    def escape_markdown(text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å Markdown —Å–∏–º–≤–æ–ª—ã"""
        if not text:
            return ""
        chars_to_escape = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        for char in chars_to_escape:
            text = text.replace(char, f'\\{char}')
        return text
    
    @staticmethod
    def format_post_preview(text: str, media_type: str = None, 
                          buttons: List[List[Dict]] = None, parse_mode: str = 'HTML') -> str:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞"""
        preview = "üìù <b>–ü—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞:</b>\n\n"
        
        if media_type:
            media_icons = {
                'photo': 'üñºÔ∏è',
                'video': 'üé•',
                'document': 'üìÑ',
                'audio': 'üéµ',
                'voice': 'üé§',
                'animation': 'üé¨'
            }
            preview += f"{media_icons.get(media_type, 'üìé')} <i>–ú–µ–¥–∏–∞: {media_type}</i>\n\n"
        
        if text:
            preview += f"<b>–¢–µ–∫—Å—Ç:</b>\n{text[:500]}{'...' if len(text) > 500 else ''}\n\n"
        
        if buttons:
            preview += "<b>–ö–Ω–æ–ø–∫–∏:</b>\n"
            for row in buttons:
                row_text = " | ".join([btn.get('text', '–ö–Ω–æ–ø–∫–∞') for btn in row])
                preview += f"‚Ä¢ {row_text}\n"
            preview += "\n"
        
        preview += f"<b>–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b> {parse_mode}"
        
        return preview

class ButtonManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ—Å—Ç–æ–≤"""
    
    @staticmethod
    def parse_buttons_text(text: str) -> List[List[Dict]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Telegram"""
        if not text.strip():
            return []
        
        buttons = []
        lines = text.strip().split('\n')
        
        for line in lines:
            if not line.strip():
                continue
            
            row = []
            # –§–æ—Ä–º–∞—Ç: "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ - —Å—Å—ã–ª–∫–∞" –∏–ª–∏ "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ 2 - —Å—Å—ã–ª–∫–∞"
            if '|' in line:
                # –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
                button_parts = line.split('|')
                for part in button_parts:
                    part = part.strip()
                    if ' - ' in part:
                        text, url = part.split(' - ', 1)
                        row.append({'text': text.strip(), 'url': url.strip()})
                    else:
                        row.append({'text': part, 'url': '#'})
            else:
                # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É
                if ' - ' in line:
                    text, url = line.split(' - ', 1)
                    row.append({'text': text.strip(), 'url': url.strip()})
                else:
                    row.append({'text': line.strip(), 'url': '#'})
            
            if row:
                buttons.append(row)
        
        return buttons
    
    @staticmethod
    def create_inline_keyboard(buttons: List[List[Dict]]) -> Optional[InlineKeyboardMarkup]:
        """–°–æ–∑–¥–∞—Ç—å InlineKeyboardMarkup –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫"""
        if not buttons:
            return None
        
        keyboard = []
        for row in buttons:
            keyboard_row = []
            for button in row:
                text = button.get('text', '–ö–Ω–æ–ø–∫–∞')
                url = button.get('url', '#')
                
                if url and url != '#':
                    keyboard_row.append(InlineKeyboardButton(text, url=url))
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç URL, —Å–æ–∑–¥–∞–µ–º callback –∫–Ω–æ–ø–∫—É
                    keyboard_row.append(InlineKeyboardButton(text, callback_data=f"btn_{text}"))
            
            if keyboard_row:
                keyboard.append(keyboard_row)
        
        return InlineKeyboardMarkup(keyboard) if keyboard else None

class DateTimeParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    
    @staticmethod
    def parse_datetime_input(text: str, user_timezone: str = 'UTC') -> Optional[datetime]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        text = text.strip().lower()
        
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            formats = [
                '%d.%m.%Y %H:%M',
                '%d.%m.%y %H:%M',
                '%d/%m/%Y %H:%M',
                '%d/%m/%y %H:%M',
                '%Y-%m-%d %H:%M',
                '%d.%m %H:%M',
                '%d/%m %H:%M',
                '%H:%M'
            ]
            
            now = datetime.now()
            user_tz = pytz.timezone(user_timezone)
            
            for fmt in formats:
                try:
                    if fmt == '%H:%M':
                        # –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
                        parsed_time = datetime.strptime(text, fmt).time()
                        parsed_dt = datetime.combine(now.date(), parsed_time)
                        
                        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                        if parsed_dt <= now:
                            parsed_dt += timedelta(days=1)
                    
                    elif fmt in ['%d.%m %H:%M', '%d/%m %H:%M']:
                        # –î–∞—Ç–∞ –±–µ–∑ –≥–æ–¥–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
                        parsed_dt = datetime.strptime(f"{text} {now.year}", f"{fmt} %Y")
                        
                        # –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞ –≤ —ç—Ç–æ–º –≥–æ–¥—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
                        if parsed_dt <= now:
                            parsed_dt = parsed_dt.replace(year=now.year + 1)
                    
                    else:
                        parsed_dt = datetime.strptime(text, fmt)
                    
                    # –õ–æ–∫–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
                    if parsed_dt.tzinfo is None:
                        parsed_dt = user_tz.localize(parsed_dt)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
                    return parsed_dt.astimezone(pytz.UTC)
                
                except ValueError:
                    continue
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            relative_patterns = {
                r'—á–µ—Ä–µ–∑ (\d+) –º–∏–Ω': lambda m: now + timedelta(minutes=int(m.group(1))),
                r'—á–µ—Ä–µ–∑ (\d+) —á–∞—Å': lambda m: now + timedelta(hours=int(m.group(1))),
                r'—á–µ—Ä–µ–∑ (\d+) –¥–Ω': lambda m: now + timedelta(days=int(m.group(1))),
                r'–∑–∞–≤—Ç—Ä–∞ –≤ (\d{1,2}):(\d{2})': lambda m: (now + timedelta(days=1)).replace(
                    hour=int(m.group(1)), minute=int(m.group(2)), second=0, microsecond=0
                ),
                r'—Å–µ–≥–æ–¥–Ω—è –≤ (\d{1,2}):(\d{2})': lambda m: now.replace(
                    hour=int(m.group(1)), minute=int(m.group(2)), second=0, microsecond=0
                )
            }
            
            for pattern, func in relative_patterns.items():
                match = re.search(pattern, text)
                if match:
                    result_dt = func(match)
                    # –õ–æ–∫–∞–ª–∏–∑—É–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
                    if result_dt.tzinfo is None:
                        result_dt = user_tz.localize(result_dt)
                    return result_dt.astimezone(pytz.UTC)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ '{text}': {e}")
        
        return None
    
    @staticmethod
    def format_datetime(dt: datetime, user_timezone: str = 'UTC', 
                       include_seconds: bool = False) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
            user_dt = TimeZoneManager.convert_to_user_timezone(dt, user_timezone)
            
            fmt = '%d.%m.%Y %H:%M'
            if include_seconds:
                fmt += ':%S'
            
            return user_dt.strftime(fmt)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: {e}")
            return str(dt)

def create_main_menu_keyboard(is_admin: bool = False) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = []
    
    if is_admin:
        keyboard.extend([
            [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="create_post")],
            [InlineKeyboardButton("üìã –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã", callback_data="scheduled_posts")],
            [InlineKeyboardButton("üì∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", callback_data="manage_channels")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")]
        ])
    else:
        keyboard.extend([
            [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
        ])
    
    return InlineKeyboardMarkup(keyboard)

def create_back_button(callback_data: str = "main_menu") -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥"""
    return InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=callback_data)]])

def create_cancel_button() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã"""
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]])

def truncate_text(text: str, max_length: int = 100) -> str:
    """–û–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return text
    return text[:max_length-3] + "..."

def validate_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL"""
    url_pattern = re.compile(
        r'^https?://'  # http:// or https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?|'  # domain...
        r'localhost|'  # localhost...
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # ...or ip
        r'(?::\d+)?'  # optional port
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    return url_pattern.match(url) is not None